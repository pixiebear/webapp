{"ast":null,"code":"import { PublicKey } from \"@solana/web3.js\";\nexport function parseIdlErrors(idl) {\n  const errors = new Map();\n\n  if (idl.errors) {\n    idl.errors.forEach(e => {\n      var _a;\n\n      let msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;\n      errors.set(e.code, msg);\n    });\n  }\n\n  return errors;\n} // Allow either IdLInstruction or IdlStateMethod since the types share fields.\n\nexport function toInstruction(idlIx) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  if (idlIx.args.length != args.length) {\n    throw new Error(\"Invalid argument length\");\n  }\n\n  const ix = {};\n  let idx = 0;\n  idlIx.args.forEach(ixArg => {\n    ix[ixArg.name] = args[idx];\n    idx += 1;\n  });\n  return ix;\n} // Throws error if any account required for the `ix` is not given.\n\nexport function validateAccounts(ixAccounts) {\n  let accounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  ixAccounts.forEach(acc => {\n    if (\"accounts\" in acc) {\n      validateAccounts(acc.accounts, accounts[acc.name]);\n    } else {\n      if (accounts[acc.name] === undefined) {\n        throw new Error(`Invalid arguments: ${acc.name} not provided.`);\n      }\n    }\n  });\n} // Translates an address to a Pubkey.\n\nexport function translateAddress(address) {\n  if (typeof address === \"string\") {\n    const pk = new PublicKey(address);\n    return pk;\n  } else {\n    return address;\n  }\n}","map":{"version":3,"sources":["../../../src/program/common.ts"],"names":[],"mappings":"AACA,SAAS,SAAT,QAA0B,iBAA1B;AASA,OAAM,SAAU,cAAV,CAAyB,GAAzB,EAAiC;EACrC,MAAM,MAAM,GAAG,IAAI,GAAJ,EAAf;;EACA,IAAI,GAAG,CAAC,MAAR,EAAgB;IACd,GAAG,CAAC,MAAJ,CAAW,OAAX,CAAoB,CAAD,IAAM;;;MACvB,IAAI,GAAG,GAAG,CAAA,EAAA,GAAA,CAAC,CAAC,GAAF,MAAK,IAAL,IAAK,EAAA,KAAA,KAAA,CAAL,GAAK,EAAL,GAAS,CAAC,CAAC,IAArB;MACA,MAAM,CAAC,GAAP,CAAW,CAAC,CAAC,IAAb,EAAmB,GAAnB;IACD,CAHD;EAID;;EACD,OAAO,MAAP;AACD,C,CAED;;AACA,OAAM,SAAU,aAAV,CACJ,KADI,EAEU;EAAA,kCAAX,IAAW;IAAX,IAAW;EAAA;;EAEd,IAAI,KAAK,CAAC,IAAN,CAAW,MAAX,IAAqB,IAAI,CAAC,MAA9B,EAAsC;IACpC,MAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;EACD;;EACD,MAAM,EAAE,GAA2B,EAAnC;EACA,IAAI,GAAG,GAAG,CAAV;EACA,KAAK,CAAC,IAAN,CAAW,OAAX,CAAoB,KAAD,IAAU;IAC3B,EAAE,CAAC,KAAK,CAAC,IAAP,CAAF,GAAiB,IAAI,CAAC,GAAD,CAArB;IACA,GAAG,IAAI,CAAP;EACD,CAHD;EAKA,OAAO,EAAP;AACD,C,CAED;;AACA,OAAM,SAAU,gBAAV,CACJ,UADI,EAEmB;EAAA,IAAvB,QAAuB,uEAAF,EAAE;EAEvB,UAAU,CAAC,OAAX,CAAoB,GAAD,IAAQ;IACzB,IAAI,cAAc,GAAlB,EAAuB;MACrB,gBAAgB,CAAC,GAAG,CAAC,QAAL,EAAe,QAAQ,CAAC,GAAG,CAAC,IAAL,CAAvB,CAAhB;IACD,CAFD,MAEO;MACL,IAAI,QAAQ,CAAC,GAAG,CAAC,IAAL,CAAR,KAAuB,SAA3B,EAAsC;QACpC,MAAM,IAAI,KAAJ,CAAU,sBAAsB,GAAG,CAAC,IAAI,gBAAxC,CAAN;MACD;IACF;EACF,CARD;AASD,C,CAED;;AACA,OAAM,SAAU,gBAAV,CAA2B,OAA3B,EAA2C;EAC/C,IAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;IAC/B,MAAM,EAAE,GAAG,IAAI,SAAJ,CAAc,OAAd,CAAX;IACA,OAAO,EAAP;EACD,CAHD,MAGO;IACL,OAAO,OAAP;EACD;AACF","sourceRoot":"","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nexport function parseIdlErrors(idl) {\n    const errors = new Map();\n    if (idl.errors) {\n        idl.errors.forEach((e) => {\n            var _a;\n            let msg = (_a = e.msg) !== null && _a !== void 0 ? _a : e.name;\n            errors.set(e.code, msg);\n        });\n    }\n    return errors;\n}\n// Allow either IdLInstruction or IdlStateMethod since the types share fields.\nexport function toInstruction(idlIx, ...args) {\n    if (idlIx.args.length != args.length) {\n        throw new Error(\"Invalid argument length\");\n    }\n    const ix = {};\n    let idx = 0;\n    idlIx.args.forEach((ixArg) => {\n        ix[ixArg.name] = args[idx];\n        idx += 1;\n    });\n    return ix;\n}\n// Throws error if any account required for the `ix` is not given.\nexport function validateAccounts(ixAccounts, accounts = {}) {\n    ixAccounts.forEach((acc) => {\n        if (\"accounts\" in acc) {\n            validateAccounts(acc.accounts, accounts[acc.name]);\n        }\n        else {\n            if (accounts[acc.name] === undefined) {\n                throw new Error(`Invalid arguments: ${acc.name} not provided.`);\n            }\n        }\n    });\n}\n// Translates an address to a Pubkey.\nexport function translateAddress(address) {\n    if (typeof address === \"string\") {\n        const pk = new PublicKey(address);\n        return pk;\n    }\n    else {\n        return address;\n    }\n}\n//# sourceMappingURL=common.js.map"]},"metadata":{},"sourceType":"module"}