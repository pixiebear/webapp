{"ast":null,"code":"import { SystemInstruction, clusterApiUrl, Transaction, SystemProgram, Connection } from '@solana/web3.js';\nimport { encode } from 'bs58';\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction createCommonjsModule(fn, module) {\n  return module = {\n    exports: {}\n  }, fn(module, module.exports), module.exports;\n}\n\nvar runtime_1 = createCommonjsModule(function (module) {\n  /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n  var runtime = function (exports) {\n    var Op = Object.prototype;\n    var hasOwn = Op.hasOwnProperty;\n    var undefined$1; // More compressible than void 0.\n\n    var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n    var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n    var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n    var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n    function define(obj, key, value) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n      return obj[key];\n    }\n\n    try {\n      // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n      define({}, \"\");\n    } catch (err) {\n      define = function (obj, key, value) {\n        return obj[key] = value;\n      };\n    }\n\n    function wrap(innerFn, outerFn, self, tryLocsList) {\n      // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n      var generator = Object.create(protoGenerator.prototype);\n      var context = new Context(tryLocsList || []); // The ._invoke method unifies the implementations of the .next,\n      // .throw, and .return methods.\n\n      generator._invoke = makeInvokeMethod(innerFn, self, context);\n      return generator;\n    }\n\n    exports.wrap = wrap; // Try/catch helper to minimize deoptimizations. Returns a completion\n    // record like context.tryEntries[i].completion. This interface could\n    // have been (and was previously) designed to take a closure to be\n    // invoked without arguments, but in all the cases we care about we\n    // already have an existing method we want to call, so there's no need\n    // to create a new function object. We can even get away with assuming\n    // the method takes exactly one argument, since that happens to be true\n    // in every case, so we don't have to touch the arguments object. The\n    // only additional allocation required is the completion record, which\n    // has a stable shape and so hopefully should be cheap to allocate.\n\n    function tryCatch(fn, obj, arg) {\n      try {\n        return {\n          type: \"normal\",\n          arg: fn.call(obj, arg)\n        };\n      } catch (err) {\n        return {\n          type: \"throw\",\n          arg: err\n        };\n      }\n    }\n\n    var GenStateSuspendedStart = \"suspendedStart\";\n    var GenStateSuspendedYield = \"suspendedYield\";\n    var GenStateExecuting = \"executing\";\n    var GenStateCompleted = \"completed\"; // Returning this object from the innerFn has the same effect as\n    // breaking out of the dispatch switch statement.\n\n    var ContinueSentinel = {}; // Dummy constructor functions that we use as the .constructor and\n    // .constructor.prototype properties for functions that return Generator\n    // objects. For full spec compliance, you may wish to configure your\n    // minifier not to mangle the names of these two functions.\n\n    function Generator() {}\n\n    function GeneratorFunction() {}\n\n    function GeneratorFunctionPrototype() {} // This is a polyfill for %IteratorPrototype% for environments that\n    // don't natively support it.\n\n\n    var IteratorPrototype = {};\n\n    IteratorPrototype[iteratorSymbol] = function () {\n      return this;\n    };\n\n    var getProto = Object.getPrototypeOf;\n    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n\n    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n      // This environment has a native %IteratorPrototype%; use it instead\n      // of the polyfill.\n      IteratorPrototype = NativeIteratorPrototype;\n    }\n\n    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);\n    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n    GeneratorFunctionPrototype.constructor = GeneratorFunction;\n    GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"); // Helper for defining the .next, .throw, and .return methods of the\n    // Iterator interface in terms of a single ._invoke method.\n\n    function defineIteratorMethods(prototype) {\n      [\"next\", \"throw\", \"return\"].forEach(function (method) {\n        define(prototype, method, function (arg) {\n          return this._invoke(method, arg);\n        });\n      });\n    }\n\n    exports.isGeneratorFunction = function (genFun) {\n      var ctor = typeof genFun === \"function\" && genFun.constructor;\n      return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can\n      // do is to check its .name property.\n      (ctor.displayName || ctor.name) === \"GeneratorFunction\" : false;\n    };\n\n    exports.mark = function (genFun) {\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n      } else {\n        genFun.__proto__ = GeneratorFunctionPrototype;\n        define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n      }\n\n      genFun.prototype = Object.create(Gp);\n      return genFun;\n    }; // Within the body of any async function, `await x` is transformed to\n    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n    // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n    // meant to be awaited.\n\n\n    exports.awrap = function (arg) {\n      return {\n        __await: arg\n      };\n    };\n\n    function AsyncIterator(generator, PromiseImpl) {\n      function invoke(method, arg, resolve, reject) {\n        var record = tryCatch(generator[method], generator, arg);\n\n        if (record.type === \"throw\") {\n          reject(record.arg);\n        } else {\n          var result = record.arg;\n          var value = result.value;\n\n          if (value && typeof value === \"object\" && hasOwn.call(value, \"__await\")) {\n            return PromiseImpl.resolve(value.__await).then(function (value) {\n              invoke(\"next\", value, resolve, reject);\n            }, function (err) {\n              invoke(\"throw\", err, resolve, reject);\n            });\n          }\n\n          return PromiseImpl.resolve(value).then(function (unwrapped) {\n            // When a yielded Promise is resolved, its final value becomes\n            // the .value of the Promise<{value,done}> result for the\n            // current iteration.\n            result.value = unwrapped;\n            resolve(result);\n          }, function (error) {\n            // If a rejected Promise was yielded, throw the rejection back\n            // into the async generator function so it can be handled there.\n            return invoke(\"throw\", error, resolve, reject);\n          });\n        }\n      }\n\n      var previousPromise;\n\n      function enqueue(method, arg) {\n        function callInvokeWithMethodAndArg() {\n          return new PromiseImpl(function (resolve, reject) {\n            invoke(method, arg, resolve, reject);\n          });\n        }\n\n        return previousPromise = // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later\n        // invocations of the iterator.\n        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();\n      } // Define the unified helper method that is used to implement .next,\n      // .throw, and .return (see defineIteratorMethods).\n\n\n      this._invoke = enqueue;\n    }\n\n    defineIteratorMethods(AsyncIterator.prototype);\n\n    AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n      return this;\n    };\n\n    exports.AsyncIterator = AsyncIterator; // Note that simple async functions are implemented on top of\n    // AsyncIterator objects; they just return a Promise for the value of\n    // the final result produced by the iterator.\n\n    exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n      if (PromiseImpl === void 0) PromiseImpl = Promise;\n      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);\n      return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function (result) {\n        return result.done ? result.value : iter.next();\n      });\n    };\n\n    function makeInvokeMethod(innerFn, self, context) {\n      var state = GenStateSuspendedStart;\n      return function invoke(method, arg) {\n        if (state === GenStateExecuting) {\n          throw new Error(\"Generator is already running\");\n        }\n\n        if (state === GenStateCompleted) {\n          if (method === \"throw\") {\n            throw arg;\n          } // Be forgiving, per 25.3.3.3.3 of the spec:\n          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n\n\n          return doneResult();\n        }\n\n        context.method = method;\n        context.arg = arg;\n\n        while (true) {\n          var delegate = context.delegate;\n\n          if (delegate) {\n            var delegateResult = maybeInvokeDelegate(delegate, context);\n\n            if (delegateResult) {\n              if (delegateResult === ContinueSentinel) continue;\n              return delegateResult;\n            }\n          }\n\n          if (context.method === \"next\") {\n            // Setting context._sent for legacy support of Babel's\n            // function.sent implementation.\n            context.sent = context._sent = context.arg;\n          } else if (context.method === \"throw\") {\n            if (state === GenStateSuspendedStart) {\n              state = GenStateCompleted;\n              throw context.arg;\n            }\n\n            context.dispatchException(context.arg);\n          } else if (context.method === \"return\") {\n            context.abrupt(\"return\", context.arg);\n          }\n\n          state = GenStateExecuting;\n          var record = tryCatch(innerFn, self, context);\n\n          if (record.type === \"normal\") {\n            // If an exception is thrown from innerFn, we leave state ===\n            // GenStateExecuting and loop back for another invocation.\n            state = context.done ? GenStateCompleted : GenStateSuspendedYield;\n\n            if (record.arg === ContinueSentinel) {\n              continue;\n            }\n\n            return {\n              value: record.arg,\n              done: context.done\n            };\n          } else if (record.type === \"throw\") {\n            state = GenStateCompleted; // Dispatch the exception by looping back around to the\n            // context.dispatchException(context.arg) call above.\n\n            context.method = \"throw\";\n            context.arg = record.arg;\n          }\n        }\n      };\n    } // Call delegate.iterator[context.method](context.arg) and handle the\n    // result, either by returning a { value, done } result from the\n    // delegate iterator, or by modifying context.method and context.arg,\n    // setting context.delegate to null, and returning the ContinueSentinel.\n\n\n    function maybeInvokeDelegate(delegate, context) {\n      var method = delegate.iterator[context.method];\n\n      if (method === undefined$1) {\n        // A .throw or .return when the delegate iterator has no .throw\n        // method always terminates the yield* loop.\n        context.delegate = null;\n\n        if (context.method === \"throw\") {\n          // Note: [\"return\"] must be used for ES3 parsing compatibility.\n          if (delegate.iterator[\"return\"]) {\n            // If the delegate iterator has a return method, give it a\n            // chance to clean up.\n            context.method = \"return\";\n            context.arg = undefined$1;\n            maybeInvokeDelegate(delegate, context);\n\n            if (context.method === \"throw\") {\n              // If maybeInvokeDelegate(context) changed context.method from\n              // \"return\" to \"throw\", let that override the TypeError below.\n              return ContinueSentinel;\n            }\n          }\n\n          context.method = \"throw\";\n          context.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n        }\n\n        return ContinueSentinel;\n      }\n\n      var record = tryCatch(method, delegate.iterator, context.arg);\n\n      if (record.type === \"throw\") {\n        context.method = \"throw\";\n        context.arg = record.arg;\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      var info = record.arg;\n\n      if (!info) {\n        context.method = \"throw\";\n        context.arg = new TypeError(\"iterator result is not an object\");\n        context.delegate = null;\n        return ContinueSentinel;\n      }\n\n      if (info.done) {\n        // Assign the result of the finished delegate to the temporary\n        // variable specified by delegate.resultName (see delegateYield).\n        context[delegate.resultName] = info.value; // Resume execution at the desired location (see delegateYield).\n\n        context.next = delegate.nextLoc; // If context.method was \"throw\" but the delegate handled the\n        // exception, let the outer generator proceed normally. If\n        // context.method was \"next\", forget context.arg since it has been\n        // \"consumed\" by the delegate iterator. If context.method was\n        // \"return\", allow the original .return call to continue in the\n        // outer generator.\n\n        if (context.method !== \"return\") {\n          context.method = \"next\";\n          context.arg = undefined$1;\n        }\n      } else {\n        // Re-yield the result returned by the delegate method.\n        return info;\n      } // The delegate iterator is finished, so forget it and continue with\n      // the outer generator.\n\n\n      context.delegate = null;\n      return ContinueSentinel;\n    } // Define Generator.prototype.{next,throw,return} in terms of the\n    // unified ._invoke helper method.\n\n\n    defineIteratorMethods(Gp);\n    define(Gp, toStringTagSymbol, \"Generator\"); // A Generator should always return itself as the iterator object when the\n    // @@iterator function is called on it. Some browsers' implementations of the\n    // iterator prototype chain incorrectly implement this, causing the Generator\n    // object to not be returned from this call. This ensures that doesn't happen.\n    // See https://github.com/facebook/regenerator/issues/274 for more details.\n\n    Gp[iteratorSymbol] = function () {\n      return this;\n    };\n\n    Gp.toString = function () {\n      return \"[object Generator]\";\n    };\n\n    function pushTryEntry(locs) {\n      var entry = {\n        tryLoc: locs[0]\n      };\n\n      if (1 in locs) {\n        entry.catchLoc = locs[1];\n      }\n\n      if (2 in locs) {\n        entry.finallyLoc = locs[2];\n        entry.afterLoc = locs[3];\n      }\n\n      this.tryEntries.push(entry);\n    }\n\n    function resetTryEntry(entry) {\n      var record = entry.completion || {};\n      record.type = \"normal\";\n      delete record.arg;\n      entry.completion = record;\n    }\n\n    function Context(tryLocsList) {\n      // The root entry object (effectively a try statement without a catch\n      // or a finally block) gives us a place to store values thrown from\n      // locations where there is no enclosing try statement.\n      this.tryEntries = [{\n        tryLoc: \"root\"\n      }];\n      tryLocsList.forEach(pushTryEntry, this);\n      this.reset(true);\n    }\n\n    exports.keys = function (object) {\n      var keys = [];\n\n      for (var key in object) {\n        keys.push(key);\n      }\n\n      keys.reverse(); // Rather than returning an object with a next method, we keep\n      // things simple and return the next function itself.\n\n      return function next() {\n        while (keys.length) {\n          var key = keys.pop();\n\n          if (key in object) {\n            next.value = key;\n            next.done = false;\n            return next;\n          }\n        } // To avoid creating an additional object, we just hang the .value\n        // and .done properties off the next function object itself. This\n        // also ensures that the minifier will not anonymize the function.\n\n\n        next.done = true;\n        return next;\n      };\n    };\n\n    function values(iterable) {\n      if (iterable) {\n        var iteratorMethod = iterable[iteratorSymbol];\n\n        if (iteratorMethod) {\n          return iteratorMethod.call(iterable);\n        }\n\n        if (typeof iterable.next === \"function\") {\n          return iterable;\n        }\n\n        if (!isNaN(iterable.length)) {\n          var i = -1,\n              next = function next() {\n            while (++i < iterable.length) {\n              if (hasOwn.call(iterable, i)) {\n                next.value = iterable[i];\n                next.done = false;\n                return next;\n              }\n            }\n\n            next.value = undefined$1;\n            next.done = true;\n            return next;\n          };\n\n          return next.next = next;\n        }\n      } // Return an iterator with no values.\n\n\n      return {\n        next: doneResult\n      };\n    }\n\n    exports.values = values;\n\n    function doneResult() {\n      return {\n        value: undefined$1,\n        done: true\n      };\n    }\n\n    Context.prototype = {\n      constructor: Context,\n      reset: function (skipTempReset) {\n        this.prev = 0;\n        this.next = 0; // Resetting context._sent for legacy support of Babel's\n        // function.sent implementation.\n\n        this.sent = this._sent = undefined$1;\n        this.done = false;\n        this.delegate = null;\n        this.method = \"next\";\n        this.arg = undefined$1;\n        this.tryEntries.forEach(resetTryEntry);\n\n        if (!skipTempReset) {\n          for (var name in this) {\n            // Not sure about the optimal order of these conditions:\n            if (name.charAt(0) === \"t\" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {\n              this[name] = undefined$1;\n            }\n          }\n        }\n      },\n      stop: function () {\n        this.done = true;\n        var rootEntry = this.tryEntries[0];\n        var rootRecord = rootEntry.completion;\n\n        if (rootRecord.type === \"throw\") {\n          throw rootRecord.arg;\n        }\n\n        return this.rval;\n      },\n      dispatchException: function (exception) {\n        if (this.done) {\n          throw exception;\n        }\n\n        var context = this;\n\n        function handle(loc, caught) {\n          record.type = \"throw\";\n          record.arg = exception;\n          context.next = loc;\n\n          if (caught) {\n            // If the dispatched exception was caught by a catch block,\n            // then let that catch block handle the exception normally.\n            context.method = \"next\";\n            context.arg = undefined$1;\n          }\n\n          return !!caught;\n        }\n\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n          var record = entry.completion;\n\n          if (entry.tryLoc === \"root\") {\n            // Exception thrown outside of any try block that could handle\n            // it, so set the completion value of the entire function to\n            // throw the exception.\n            return handle(\"end\");\n          }\n\n          if (entry.tryLoc <= this.prev) {\n            var hasCatch = hasOwn.call(entry, \"catchLoc\");\n            var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n            if (hasCatch && hasFinally) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              } else if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else if (hasCatch) {\n              if (this.prev < entry.catchLoc) {\n                return handle(entry.catchLoc, true);\n              }\n            } else if (hasFinally) {\n              if (this.prev < entry.finallyLoc) {\n                return handle(entry.finallyLoc);\n              }\n            } else {\n              throw new Error(\"try statement without catch or finally\");\n            }\n          }\n        }\n      },\n      abrupt: function (type, arg) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) {\n            var finallyEntry = entry;\n            break;\n          }\n        }\n\n        if (finallyEntry && (type === \"break\" || type === \"continue\") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {\n          // Ignore the finally entry if control is not jumping to a\n          // location outside the try/catch block.\n          finallyEntry = null;\n        }\n\n        var record = finallyEntry ? finallyEntry.completion : {};\n        record.type = type;\n        record.arg = arg;\n\n        if (finallyEntry) {\n          this.method = \"next\";\n          this.next = finallyEntry.finallyLoc;\n          return ContinueSentinel;\n        }\n\n        return this.complete(record);\n      },\n      complete: function (record, afterLoc) {\n        if (record.type === \"throw\") {\n          throw record.arg;\n        }\n\n        if (record.type === \"break\" || record.type === \"continue\") {\n          this.next = record.arg;\n        } else if (record.type === \"return\") {\n          this.rval = this.arg = record.arg;\n          this.method = \"return\";\n          this.next = \"end\";\n        } else if (record.type === \"normal\" && afterLoc) {\n          this.next = afterLoc;\n        }\n\n        return ContinueSentinel;\n      },\n      finish: function (finallyLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.finallyLoc === finallyLoc) {\n            this.complete(entry.completion, entry.afterLoc);\n            resetTryEntry(entry);\n            return ContinueSentinel;\n          }\n        }\n      },\n      \"catch\": function (tryLoc) {\n        for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n          var entry = this.tryEntries[i];\n\n          if (entry.tryLoc === tryLoc) {\n            var record = entry.completion;\n\n            if (record.type === \"throw\") {\n              var thrown = record.arg;\n              resetTryEntry(entry);\n            }\n\n            return thrown;\n          }\n        } // The context.catch method must only be called with a location\n        // argument that corresponds to a known catch block.\n\n\n        throw new Error(\"illegal catch attempt\");\n      },\n      delegateYield: function (iterable, resultName, nextLoc) {\n        this.delegate = {\n          iterator: values(iterable),\n          resultName: resultName,\n          nextLoc: nextLoc\n        };\n\n        if (this.method === \"next\") {\n          // Deliberately forget the last sent value so that we don't\n          // accidentally pass it on to the delegate.\n          this.arg = undefined$1;\n        }\n\n        return ContinueSentinel;\n      }\n    }; // Regardless of whether this script is executing as a CommonJS module\n    // or not, return the runtime object so that we can declare the variable\n    // regeneratorRuntime in the outer scope, which allows this module to be\n    // injected easily by `bin/regenerator --include-runtime script.js`.\n\n    return exports;\n  }( // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  module.exports);\n\n  try {\n    regeneratorRuntime = runtime;\n  } catch (accidentalStrictMode) {\n    // This module should not be running in strict mode, so the above\n    // assignment should always work unless something is misconfigured. Just\n    // in case runtime.js accidentally runs in strict mode, we can escape\n    // strict mode using a global Function call. This could conceivably fail\n    // if a Content Security Policy forbids using Function, but in that case\n    // the proper solution is to fix the accidental strict mode problem. If\n    // you've misconfigured your bundler to force strict mode and applied a\n    // CSP to forbid Function, and you're not willing to fix either of those\n    // problems, please detail your unique predicament in a GitHub issue.\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n});\n\nvar defaultSigner = function defaultSigner(keypair) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(transaction) {\n      return runtime_1.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              transaction.sign(keypair);\n              return _context.abrupt(\"return\", transaction);\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\n\nvar isKeypair = function isKeypair(k) {\n  return k.constructor.name === 'Keypair';\n};\n\nvar pubkeyOf = function pubkeyOf(k) {\n  return isKeypair(k) ? k.publicKey : k;\n};\n\nvar DEFAULT_CONFIG = {\n  cluster: 'mainnet-beta',\n  commitment: 'confirmed',\n  supportedClusterUrls: {},\n  recentBlockCheck: true\n}; // get the solana cluster URL to connect to. Use the cluster in the config,\n// unless overridden. If the cluster is referenced in supportedClusterUrls,\n// use the clusterUrl specified there, otherwise use the default solana one\n\nvar getClusterUrl = function getClusterUrl(config) {\n  if (config.supportedClusterUrls && config.supportedClusterUrls[config.cluster]) {\n    return config.supportedClusterUrls[config.cluster];\n  }\n\n  return clusterApiUrl(config.cluster);\n};\n\nvar makeTransaction = /*#__PURE__*/function () {\n  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(connection, fromPubkey, toPubkey, amount) {\n    var instruction, _yield$connection$get, blockhash;\n\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            instruction = SystemProgram.transfer({\n              fromPubkey: fromPubkey,\n              lamports: amount,\n              toPubkey: toPubkey\n            });\n            _context2.next = 3;\n            return connection.getRecentBlockhash();\n\n          case 3:\n            _yield$connection$get = _context2.sent;\n            blockhash = _yield$connection$get.blockhash;\n            return _context2.abrupt(\"return\", new Transaction({\n              recentBlockhash: blockhash,\n              feePayer: fromPubkey\n            }).add(instruction));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function makeTransaction(_x2, _x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar findBlock = /*#__PURE__*/function () {\n  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee3(connection, blockhash) {\n    return runtime_1.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", connection.getFeeCalculatorForBlockhash(blockhash, 'confirmed').then(function (result) {\n              if (!result.value) throw new Error('Block was not found'); // if we were interested in the age of the block,\n              // we could check the value of result.context.slot here and use getBlock() to look it up\n            }));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function findBlock(_x6, _x7) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar checkRecentBlock = /*#__PURE__*/function () {\n  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee4(connection, transaction) {\n    return runtime_1.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (transaction.recentBlockhash) {\n              _context4.next = 2;\n              break;\n            }\n\n            throw new Error('Transaction has no recent blockhash!');\n\n          case 2:\n            _context4.next = 4;\n            return findBlock(connection, transaction.recentBlockhash);\n\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function checkRecentBlock(_x8, _x9) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar findTransaction = /*#__PURE__*/function () {\n  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee5(connection, transaction) {\n    var txSig;\n    return runtime_1.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            if (transaction.signature) {\n              _context5.next = 2;\n              break;\n            }\n\n            throw new Error('Transaction has no signature');\n\n          case 2:\n            txSig = encode(transaction.signature);\n            return _context5.abrupt(\"return\", connection.getTransaction(txSig));\n\n          case 4:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function findTransaction(_x10, _x11) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar checkTransactionNotBroadcast = /*#__PURE__*/function () {\n  var _ref6 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee6(connection, transaction) {\n    return runtime_1.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            return _context6.abrupt(\"return\", findTransaction(connection, transaction).then(function (result) {\n              if (result) throw new Error('Transaction was broadcast!');\n            }));\n\n          case 1:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function checkTransactionNotBroadcast(_x12, _x13) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nvar checkTransactionParameters = function checkTransactionParameters(transaction) {\n  if (transaction.instructions.length !== 1) throw new Error('Incorrect instruction count. The transaction must contain only one Transfer instruction');\n  var _transaction$instruct = transaction.instructions,\n      instruction = _transaction$instruct[0];\n  var transferParams;\n\n  try {\n    transferParams = SystemInstruction.decodeTransfer(instruction);\n  } catch (error) {\n    console.log(error);\n    throw new Error('Invalid instruction. The transaction must contain a Transfer instruction');\n  }\n\n  if (!transferParams.fromPubkey.equals(transferParams.toPubkey)) throw new Error('The transaction must be self-to-self');\n  if (transferParams.lamports !== 0) throw new Error('The transaction must have zero value');\n};\n\nvar checkSignatures = function checkSignatures(transaction, publicKey) {\n  if (!transaction.verifySignatures()) {\n    // some expected signature is missing\n    throw new Error('Signatures not verified');\n  }\n\n  var signatureForExpectedKey = transaction.signatures.find(function (signaturePubkeyPair) {\n    return signaturePubkeyPair.publicKey.equals(publicKey);\n  });\n\n  if (!signatureForExpectedKey) {\n    throw new Error('Missing signature for ' + publicKey.toBase58());\n  }\n};\n\nvar prove = /*#__PURE__*/function () {\n  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee(key, signer, config) {\n    var sign, connection, publicKey, transaction, signedTransaction;\n    return runtime_1.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (config === void 0) {\n              config = DEFAULT_CONFIG;\n            }\n\n            if (!(isKeypair(key) && signer)) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error('Provide a keypair or a signer, not both');\n\n          case 3:\n            if (!(!isKeypair(key) && !signer)) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error('Provide either a keypair or a signer');\n\n          case 5:\n            sign = signer || defaultSigner(key);\n            connection = config.connection || new Connection(getClusterUrl(config), config.commitment);\n            publicKey = pubkeyOf(key);\n            _context.next = 10;\n            return makeTransaction(connection, publicKey, publicKey, 0);\n\n          case 10:\n            transaction = _context.sent;\n            _context.next = 13;\n            return sign(transaction);\n\n          case 13:\n            signedTransaction = _context.sent;\n            return _context.abrupt(\"return\", signedTransaction.serialize());\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function prove(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar verifyStatic = function verifyStatic(evidence, publicKey) {\n  var transaction = Transaction.from(evidence);\n  checkSignatures(transaction, publicKey);\n  checkTransactionParameters(transaction);\n};\n\nvar verify = /*#__PURE__*/function () {\n  var _ref2 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/runtime_1.mark(function _callee2(evidence, publicKey, config) {\n    var transaction, connection, checkTransactionNotBroadcastPromise, checkBlockPromise;\n    return runtime_1.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (config === void 0) {\n              config = DEFAULT_CONFIG;\n            }\n\n            verifyStatic(evidence, publicKey);\n            transaction = Transaction.from(evidence);\n            connection = config.connection || new Connection(getClusterUrl(config), config.commitment);\n            checkTransactionNotBroadcastPromise = checkTransactionNotBroadcast(connection, transaction);\n            checkBlockPromise = config.recentBlockCheck ? checkRecentBlock(connection, transaction) : Promise.resolve();\n            _context2.next = 8;\n            return Promise.all([checkTransactionNotBroadcastPromise, checkBlockPromise]);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function verify(_x4, _x5, _x6) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport { DEFAULT_CONFIG, prove, verify, verifyStatic };","map":{"version":3,"sources":["../node_modules/regenerator-runtime/runtime.js","../src/utilities.ts","../src/index.ts"],"names":["undefined","defaultSigner","transaction","isKeypair","k","pubkeyOf","DEFAULT_CONFIG","cluster","commitment","supportedClusterUrls","recentBlockCheck","getClusterUrl","config","clusterApiUrl","makeTransaction","instruction","fromPubkey","lamports","toPubkey","blockhash","connection","recentBlockhash","feePayer","findBlock","result","checkRecentBlock","findTransaction","txSig","encode","checkTransactionNotBroadcast","checkTransactionParameters","transferParams","SystemInstruction","console","checkSignatures","signatureForExpectedKey","signaturePubkeyPair","publicKey","prove","sign","signer","signedTransaction","verifyStatic","Transaction","verify","checkTransactionNotBroadcastPromise","checkBlockPromise","Promise"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import {\n  Cluster,\n  clusterApiUrl,\n  Commitment,\n  Connection,\n  Keypair,\n  PublicKey,\n  SystemInstruction,\n  SystemProgram,\n  Transaction,\n  TransactionResponse,\n} from '@solana/web3.js';\nimport { encode } from 'bs58';\n\nexport type SignCallback = (transaction: Transaction) => Promise<Transaction>;\nexport const defaultSigner = (keypair: Keypair): SignCallback => async (\n  transaction: Transaction\n) => {\n  transaction.sign(keypair);\n  return transaction;\n};\n\ntype KeyMaterial = Keypair | PublicKey;\nexport const isKeypair = (k: KeyMaterial): k is Keypair =>\n  k.constructor.name === 'Keypair';\nexport const pubkeyOf = (k: KeyMaterial): PublicKey =>\n  isKeypair(k) ? k.publicKey : k;\n\nexport type ClusterUrlMap = Record<string, string>;\n\nexport type Config = {\n  // the cluster that should be used when generating and verifying proofs\n  cluster: string;\n  // when checking that a proof transaction has not been transmitted, the commitment\n  // to be used, i.e. the degree to which the transaction is finalised by the network\n  commitment: Commitment;\n  // if the cluster is not a standard solana public cluster, this map provides\n  // the cluster URL to connect to. Use this when the proof may contain a cluster that is\n  // not recognised by solana's clusterApiUrl function\n  supportedClusterUrls?: ClusterUrlMap;\n  // If true, check that the transaction includes a recent blockhash.\n  // Disable if nodes are having difficulty synchronising,\n  // warning - this makes replay attacks easier as proofs remain valid longer\n  recentBlockCheck: boolean;\n  /// If set, use this connection rather than creating a new one - ignores cluster, commitment, supportedClusterUrls\n  connection?: Connection;\n};\n\nexport const DEFAULT_CONFIG: Config = {\n  cluster: 'mainnet-beta',\n  commitment: 'confirmed',\n  supportedClusterUrls: {},\n  recentBlockCheck: true,\n};\n\n// get the solana cluster URL to connect to. Use the cluster in the config,\n// unless overridden. If the cluster is referenced in supportedClusterUrls,\n// use the clusterUrl specified there, otherwise use the default solana one\nexport const getClusterUrl = (config: Config) => {\n  if (\n    config.supportedClusterUrls &&\n    config.supportedClusterUrls[config.cluster]\n  ) {\n    return config.supportedClusterUrls[config.cluster];\n  }\n  return clusterApiUrl(config.cluster as Cluster);\n};\n\nexport const makeTransaction = async (\n  connection: Connection,\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  amount: number\n): Promise<Transaction> => {\n  const instruction = SystemProgram.transfer({\n    fromPubkey,\n    lamports: amount,\n    toPubkey,\n  });\n\n  const { blockhash } = await connection.getRecentBlockhash();\n  return new Transaction({\n    recentBlockhash: blockhash,\n    feePayer: fromPubkey,\n  }).add(instruction);\n};\n\nconst findBlock = async (\n  connection: Connection,\n  blockhash: string\n): Promise<void> =>\n  connection\n    .getFeeCalculatorForBlockhash(blockhash, 'confirmed')\n    .then(result => {\n      if (!result.value) throw new Error('Block was not found');\n      // if we were interested in the age of the block,\n      // we could check the value of result.context.slot here and use getBlock() to look it up\n    });\n\nexport const checkRecentBlock = async (\n  connection: Connection,\n  transaction: Transaction\n): Promise<void> => {\n  if (!transaction.recentBlockhash)\n    throw new Error('Transaction has no recent blockhash!');\n  await findBlock(connection, transaction.recentBlockhash);\n};\n\nconst findTransaction = async (\n  connection: Connection,\n  transaction: Transaction\n): Promise<TransactionResponse | null> => {\n  if (!transaction.signature) {\n    throw new Error('Transaction has no signature');\n  }\n  const txSig = encode(transaction.signature);\n  return connection.getTransaction(txSig);\n};\n\nexport const checkTransactionNotBroadcast = async (\n  connection: Connection,\n  transaction: Transaction\n): Promise<void> =>\n  findTransaction(connection, transaction).then(result => {\n    if (result) throw new Error('Transaction was broadcast!');\n  });\n\nexport const checkTransactionParameters = (transaction: Transaction) => {\n  if (transaction.instructions.length !== 1)\n    throw new Error(\n      'Incorrect instruction count. The transaction must contain only one Transfer instruction'\n    );\n\n  const [instruction] = transaction.instructions;\n\n  let transferParams;\n  try {\n    transferParams = SystemInstruction.decodeTransfer(instruction);\n  } catch (error) {\n    console.log(error);\n    throw new Error(\n      'Invalid instruction. The transaction must contain a Transfer instruction'\n    );\n  }\n\n  if (!transferParams.fromPubkey.equals(transferParams.toPubkey))\n    throw new Error('The transaction must be self-to-self');\n  if (transferParams.lamports !== 0)\n    throw new Error('The transaction must have zero value');\n};\n\nexport const checkSignatures = (\n  transaction: Transaction,\n  publicKey: PublicKey\n) => {\n  if (!transaction.verifySignatures()) {\n    // some expected signature is missing\n    throw new Error('Signatures not verified');\n  }\n  const signatureForExpectedKey = transaction.signatures.find(\n    signaturePubkeyPair => signaturePubkeyPair.publicKey.equals(publicKey)\n  );\n  if (!signatureForExpectedKey) {\n    throw new Error('Missing signature for ' + publicKey.toBase58());\n  }\n};\n","import { Connection, Keypair, PublicKey, Transaction } from '@solana/web3.js';\nimport {\n  checkRecentBlock,\n  checkSignatures,\n  checkTransactionNotBroadcast,\n  checkTransactionParameters,\n  Config,\n  DEFAULT_CONFIG,\n  defaultSigner,\n  getClusterUrl,\n  isKeypair,\n  makeTransaction,\n  pubkeyOf,\n  SignCallback,\n} from './utilities';\n\nexport { SignCallback, Config, DEFAULT_CONFIG } from './utilities';\n\nexport const prove = async (\n  key: PublicKey | Keypair,\n  signer?: SignCallback,\n  config: Config = DEFAULT_CONFIG\n): Promise<Buffer> => {\n  if (isKeypair(key) && signer)\n    throw new Error('Provide a keypair or a signer, not both');\n  if (!isKeypair(key) && !signer)\n    throw new Error('Provide either a keypair or a signer');\n  const sign = signer || defaultSigner(key as Keypair);\n\n  const connection =\n    config.connection ||\n    new Connection(getClusterUrl(config), config.commitment);\n\n  const publicKey = pubkeyOf(key);\n\n  const transaction = await makeTransaction(\n    connection,\n    publicKey,\n    publicKey,\n    0\n  );\n  const signedTransaction = await sign(transaction);\n  return signedTransaction.serialize();\n};\n\nexport const verifyStatic = (evidence: Buffer, publicKey: PublicKey): void => {\n  const transaction = Transaction.from(evidence);\n\n  checkSignatures(transaction, publicKey);\n  checkTransactionParameters(transaction);\n};\n\nexport const verify = async (\n  evidence: Buffer,\n  publicKey: PublicKey,\n  config: Config = DEFAULT_CONFIG\n): Promise<void> => {\n  verifyStatic(evidence, publicKey);\n\n  const transaction = Transaction.from(evidence);\n\n  const connection =\n    config.connection ||\n    new Connection(getClusterUrl(config), config.commitment);\n\n  const checkTransactionNotBroadcastPromise = checkTransactionNotBroadcast(\n    connection,\n    transaction\n  );\n  const checkBlockPromise = config.recentBlockCheck\n    ? checkRecentBlock(connection, transaction)\n    : Promise.resolve();\n\n  await Promise.all([checkTransactionNotBroadcastPromise, checkBlockPromise]);\n};\n"]},"metadata":{},"sourceType":"module"}