{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BaseSignerWalletAdapter, pollUntilReady, WalletAccountError, WalletNotConnectedError, WalletNotFoundError, WalletNotInstalledError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\nexport class Coin98WalletAdapter extends BaseSignerWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    if (!this.ready) pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    return typeof window !== 'undefined' && !!window.coin98;\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    var _a;\n\n    return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.isConnected());\n  }\n\n  connect() {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        const wallet = typeof window !== 'undefined' && ((_a = window.coin98) === null || _a === void 0 ? void 0 : _a.sol);\n        if (!wallet) throw new WalletNotFoundError();\n        if (!wallet.isCoin98) throw new WalletNotInstalledError();\n        let account;\n\n        try {\n          [account] = yield wallet.connect();\n        } catch (error) {\n          throw new WalletAccountError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        let publicKey;\n\n        try {\n          publicKey = new PublicKey(account);\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        this._wallet = null;\n        this._publicKey = null;\n        yield wallet.disconnect();\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          const response = yield wallet.request({\n            method: 'sol_sign',\n            params: [transaction]\n          });\n          const publicKey = new PublicKey(response.publicKey);\n          const signature = bs58.decode(response.signature);\n          transaction.addSignature(publicKey, signature);\n          return transaction;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const signedTransactions = [];\n\n      for (const transaction of transactions) {\n        signedTransactions.push(yield this.signTransaction(transaction));\n      }\n\n      return signedTransactions;\n    });\n  }\n\n}","map":{"version":3,"sources":["../src/adapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseSignerWalletAdapter, pollUntilReady, WalletAccountError, WalletNotConnectedError, WalletNotFoundError, WalletNotInstalledError, WalletPublicKeyError, WalletSignTransactionError, } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nimport bs58 from 'bs58';\nexport class Coin98WalletAdapter extends BaseSignerWalletAdapter {\n    constructor(config = {}) {\n        super();\n        this._connecting = false;\n        this._wallet = null;\n        this._publicKey = null;\n        if (!this.ready)\n            pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);\n    }\n    get publicKey() {\n        return this._publicKey;\n    }\n    get ready() {\n        return typeof window !== 'undefined' && !!window.coin98;\n    }\n    get connecting() {\n        return this._connecting;\n    }\n    get connected() {\n        var _a;\n        return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.isConnected());\n    }\n    connect() {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (this.connected || this.connecting)\n                    return;\n                this._connecting = true;\n                const wallet = typeof window !== 'undefined' && ((_a = window.coin98) === null || _a === void 0 ? void 0 : _a.sol);\n                if (!wallet)\n                    throw new WalletNotFoundError();\n                if (!wallet.isCoin98)\n                    throw new WalletNotInstalledError();\n                let account;\n                try {\n                    [account] = yield wallet.connect();\n                }\n                catch (error) {\n                    throw new WalletAccountError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n                let publicKey;\n                try {\n                    publicKey = new PublicKey(account);\n                }\n                catch (error) {\n                    throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n                this._wallet = wallet;\n                this._publicKey = publicKey;\n                this.emit('connect');\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n            finally {\n                this._connecting = false;\n            }\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wallet = this._wallet;\n            if (wallet) {\n                this._wallet = null;\n                this._publicKey = null;\n                yield wallet.disconnect();\n            }\n            this.emit('disconnect');\n        });\n    }\n    signTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const wallet = this._wallet;\n                if (!wallet)\n                    throw new WalletNotConnectedError();\n                try {\n                    const response = yield wallet.request({ method: 'sol_sign', params: [transaction] });\n                    const publicKey = new PublicKey(response.publicKey);\n                    const signature = bs58.decode(response.signature);\n                    transaction.addSignature(publicKey, signature);\n                    return transaction;\n                }\n                catch (error) {\n                    throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n        });\n    }\n    signAllTransactions(transactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const signedTransactions = [];\n            for (const transaction of transactions) {\n                signedTransactions.push(yield this.signTransaction(transaction));\n            }\n            return signedTransactions;\n        });\n    }\n}\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"module"}