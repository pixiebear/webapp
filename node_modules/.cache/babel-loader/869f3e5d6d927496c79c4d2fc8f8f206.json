{"ast":null,"code":"import _slicedToArray from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\";\nimport { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\n\nvar SimulateFactory = /*#__PURE__*/function () {\n  function SimulateFactory() {\n    _classCallCheck(this, SimulateFactory);\n  }\n\n  _createClass(SimulateFactory, null, [{\n    key: \"build\",\n    value: function build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n      var simulate = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var _len,\n              args,\n              _key,\n              tx,\n              _splitArgsAndCtx,\n              _splitArgsAndCtx2,\n              ctx,\n              resp,\n              translatedErr,\n              logs,\n              events,\n              parser,\n              _args = arguments;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  for (_len = _args.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = _args[_key];\n                  }\n\n                  tx = txFn.apply(void 0, args);\n                  _splitArgsAndCtx = splitArgsAndCtx(idlIx, [].concat(args)), _splitArgsAndCtx2 = _slicedToArray(_splitArgsAndCtx, 2), ctx = _splitArgsAndCtx2[1];\n                  resp = undefined;\n                  _context.prev = 4;\n                  _context.next = 7;\n                  return provider.simulate(tx, ctx.signers, ctx.options);\n\n                case 7:\n                  resp = _context.sent;\n                  _context.next = 17;\n                  break;\n\n                case 10:\n                  _context.prev = 10;\n                  _context.t0 = _context[\"catch\"](4);\n                  console.log(\"Translating error\", _context.t0);\n                  translatedErr = ProgramError.parse(_context.t0, idlErrors);\n\n                  if (!(translatedErr === null)) {\n                    _context.next = 16;\n                    break;\n                  }\n\n                  throw _context.t0;\n\n                case 16:\n                  throw translatedErr;\n\n                case 17:\n                  if (!(resp === undefined)) {\n                    _context.next = 19;\n                    break;\n                  }\n\n                  throw new Error(\"Unable to simulate transaction\");\n\n                case 19:\n                  if (!resp.value.err) {\n                    _context.next = 21;\n                    break;\n                  }\n\n                  throw new Error(\"Simulate error: \".concat(resp.value.err.toString()));\n\n                case 21:\n                  logs = resp.value.logs;\n\n                  if (logs) {\n                    _context.next = 24;\n                    break;\n                  }\n\n                  throw new Error(\"Simulated logs not found\");\n\n                case 24:\n                  events = [];\n\n                  if (idl.events) {\n                    parser = new EventParser(programId, coder);\n                    parser.parseLogs(logs, function (event) {\n                      events.push(event);\n                    });\n                  }\n\n                  return _context.abrupt(\"return\", {\n                    events: events,\n                    raw: logs\n                  });\n\n                case 27:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[4, 10]]);\n        }));\n\n        return function simulate() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      return simulate;\n    }\n  }]);\n\n  return SimulateFactory;\n}();\n\nexport { SimulateFactory as default };","map":{"version":3,"sources":["../../../../src/program/namespace/simulate.ts"],"names":[],"mappings":";;;;;AAOA,SAAS,eAAT,QAAgC,YAAhC;AAEA,SAAS,WAAT,QAAmC,UAAnC;AAGA,SAAS,YAAT,QAA6B,aAA7B;;IAEqB,e;;;;;;;WACZ,eACL,KADK,EAEL,IAFK,EAGL,SAHK,EAIL,QAJK,EAKL,KALK,EAML,SANK,EAOL,GAPK,EAOG;MAER,IAAM,QAAQ;QAAA,oEAAG;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;UAAA;;UAAA;YAAA;cAAA;gBAAA;kBAAA,0BAAU,IAAV;oBAAU,IAAV;kBAAA;;kBACT,EADS,GACJ,IAAI,MAAJ,SAAQ,IAAR,CADI;kBAAA,mBAEC,eAAe,CAAC,KAAD,YAAY,IAAZ,EAFhB,2DAEN,GAFM;kBAGX,IAHW,GAKC,SALD;kBAAA;kBAAA;kBAAA,OAOA,QAAQ,CAAC,QAAT,CAAkB,EAAlB,EAAsB,GAAG,CAAC,OAA1B,EAAmC,GAAG,CAAC,OAAvC,CAPA;;gBAAA;kBAOb,IAPa;kBAAA;kBAAA;;gBAAA;kBAAA;kBAAA;kBASb,OAAO,CAAC,GAAR,CAAY,mBAAZ;kBACI,aAVS,GAUO,YAAY,CAAC,KAAb,cAAwB,SAAxB,CAVP;;kBAAA,MAWT,aAAa,KAAK,IAXT;oBAAA;oBAAA;kBAAA;;kBAAA;;gBAAA;kBAAA,MAcP,aAdO;;gBAAA;kBAAA,MAgBX,IAAI,KAAK,SAhBE;oBAAA;oBAAA;kBAAA;;kBAAA,MAiBP,IAAI,KAAJ,CAAU,gCAAV,CAjBO;;gBAAA;kBAAA,KAmBX,IAAI,CAAC,KAAL,CAAW,GAnBA;oBAAA;oBAAA;kBAAA;;kBAAA,MAoBP,IAAI,KAAJ,2BAA6B,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,QAAf,EAA7B,EApBO;;gBAAA;kBAsBT,IAtBS,GAsBF,IAAI,CAAC,KAAL,CAAW,IAtBT;;kBAAA,IAuBV,IAvBU;oBAAA;oBAAA;kBAAA;;kBAAA,MAwBP,IAAI,KAAJ,CAAU,0BAAV,CAxBO;;gBAAA;kBA2BT,MA3BS,GA2BS,EA3BT;;kBA4Bf,IAAI,GAAG,CAAC,MAAR,EAAgB;oBACV,MADU,GACD,IAAI,WAAJ,CAAgB,SAAhB,EAA2B,KAA3B,CADC;oBAEd,MAAM,CAAC,SAAP,CAAiB,IAAjB,EAAuB,UAAC,KAAD,EAAU;sBAC/B,MAAM,CAAC,IAAP,CAAY,KAAZ;oBACD,CAFD;kBAGD;;kBAjCc,iCAkCR;oBAAE,MAAM,EAAN,MAAF;oBAAU,GAAG,EAAE;kBAAf,CAlCQ;;gBAAA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA,CAAH;;QAAA,gBAAR,QAAQ;UAAA;QAAA;MAAA,GAAd;;MAqCA,OAAO,QAAP;IACD;;;;;;SAhDkB,e","sourceRoot":"","sourcesContent":["import { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\nexport default class SimulateFactory {\n    static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n        const simulate = async (...args) => {\n            const tx = txFn(...args);\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            let resp = undefined;\n            try {\n                resp = await provider.simulate(tx, ctx.signers, ctx.options);\n            }\n            catch (err) {\n                console.log(\"Translating error\", err);\n                let translatedErr = ProgramError.parse(err, idlErrors);\n                if (translatedErr === null) {\n                    throw err;\n                }\n                throw translatedErr;\n            }\n            if (resp === undefined) {\n                throw new Error(\"Unable to simulate transaction\");\n            }\n            if (resp.value.err) {\n                throw new Error(`Simulate error: ${resp.value.err.toString()}`);\n            }\n            const logs = resp.value.logs;\n            if (!logs) {\n                throw new Error(\"Simulated logs not found\");\n            }\n            const events = [];\n            if (idl.events) {\n                let parser = new EventParser(programId, coder);\n                parser.parseLogs(logs, (event) => {\n                    events.push(event);\n                });\n            }\n            return { events, raw: logs };\n        };\n        return simulate;\n    }\n}\n//# sourceMappingURL=simulate.js.map"]},"metadata":{},"sourceType":"module"}