{"ast":null,"code":"import _classCallCheck from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport * as base64 from \"base64-js\";\nimport { sha256 } from \"js-sha256\";\nimport { IdlCoder } from \"./idl\";\nexport var EventCoder = /*#__PURE__*/function () {\n  function EventCoder(idl) {\n    _classCallCheck(this, EventCoder);\n\n    if (idl.events === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n\n    var layouts = idl.events.map(function (event) {\n      var eventTypeDef = {\n        name: event.name,\n        type: {\n          kind: \"struct\",\n          fields: event.fields.map(function (f) {\n            return {\n              name: f.name,\n              type: f.type\n            };\n          })\n        }\n      };\n      return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];\n    }); // @ts-ignore\n\n    this.layouts = new Map(layouts);\n    this.discriminators = new Map(idl.events === undefined ? [] : idl.events.map(function (e) {\n      return [base64.fromByteArray(eventDiscriminator(e.name)), e.name];\n    }));\n  }\n\n  _createClass(EventCoder, [{\n    key: \"decode\",\n    value: function decode(log) {\n      var logArr; // This will throw if log length is not a multiple of 4.\n\n      try {\n        logArr = Buffer.from(base64.toByteArray(log));\n      } catch (e) {\n        return null;\n      }\n\n      var disc = base64.fromByteArray(logArr.slice(0, 8)); // Only deserialize if the discriminator implies a proper event.\n\n      var eventName = this.discriminators.get(disc);\n\n      if (eventName === undefined) {\n        return null;\n      }\n\n      var layout = this.layouts.get(eventName);\n\n      if (!layout) {\n        throw new Error(\"Unknown event: \".concat(eventName));\n      }\n\n      var data = layout.decode(logArr.slice(8));\n      return {\n        data: data,\n        name: eventName\n      };\n    }\n  }]);\n\n  return EventCoder;\n}();\nexport function eventDiscriminator(name) {\n  return Buffer.from(sha256.digest(\"event:\".concat(name))).slice(0, 8);\n}","map":{"version":3,"sources":["../../../src/coder/event.ts"],"names":[],"mappings":";;AAAA,OAAO,KAAK,MAAZ,MAAwB,WAAxB;AAEA,SAAS,MAAT,QAAuB,WAAvB;AAGA,SAAS,QAAT,QAAyB,OAAzB;AAEA,WAAa,UAAb;EAWE,oBAAmB,GAAnB,EAA2B;IAAA;;IACzB,IAAI,GAAG,CAAC,MAAJ,KAAe,SAAnB,EAA8B;MAC5B,KAAK,OAAL,GAAe,IAAI,GAAJ,EAAf;MACA;IACD;;IACD,IAAM,OAAO,GAAG,GAAG,CAAC,MAAJ,CAAW,GAAX,CAAe,UAAC,KAAD,EAAU;MACvC,IAAI,YAAY,GAAe;QAC7B,IAAI,EAAE,KAAK,CAAC,IADiB;QAE7B,IAAI,EAAE;UACJ,IAAI,EAAE,QADF;UAEJ,MAAM,EAAE,KAAK,CAAC,MAAN,CAAa,GAAb,CAAiB,UAAC,CAAD,EAAM;YAC7B,OAAO;cAAE,IAAI,EAAE,CAAC,CAAC,IAAV;cAAgB,IAAI,EAAE,CAAC,CAAC;YAAxB,CAAP;UACD,CAFO;QAFJ;MAFuB,CAA/B;MASA,OAAO,CAAC,KAAK,CAAC,IAAP,EAAa,QAAQ,CAAC,aAAT,CAAuB,YAAvB,EAAqC,GAAG,CAAC,KAAzC,CAAb,CAAP;IACD,CAXe,CAAhB,CALyB,CAiBzB;;IACA,KAAK,OAAL,GAAe,IAAI,GAAJ,CAAQ,OAAR,CAAf;IAEA,KAAK,cAAL,GAAsB,IAAI,GAAJ,CACpB,GAAG,CAAC,MAAJ,KAAe,SAAf,GACI,EADJ,GAEI,GAAG,CAAC,MAAJ,CAAW,GAAX,CAAe,UAAC,CAAD;MAAA,OAAO,CACpB,MAAM,CAAC,aAAP,CAAqB,kBAAkB,CAAC,CAAC,CAAC,IAAH,CAAvC,CADoB,EAEpB,CAAC,CAAC,IAFkB,CAAP;IAAA,CAAf,CAHgB,CAAtB;EAQD;;EAvCH;IAAA;IAAA,OAyCS,gBAAoC,GAApC,EAA+C;MACpD,IAAI,MAAJ,CADoD,CAEpD;;MACA,IAAI;QACF,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,WAAP,CAAmB,GAAnB,CAAZ,CAAT;MACD,CAFD,CAEE,OAAO,CAAP,EAAU;QACV,OAAO,IAAP;MACD;;MACD,IAAM,IAAI,GAAG,MAAM,CAAC,aAAP,CAAqB,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAArB,CAAb,CARoD,CAUpD;;MACA,IAAM,SAAS,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,IAAxB,CAAlB;;MACA,IAAI,SAAS,KAAK,SAAlB,EAA6B;QAC3B,OAAO,IAAP;MACD;;MAED,IAAM,MAAM,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,SAAjB,CAAf;;MACA,IAAI,CAAC,MAAL,EAAa;QACX,MAAM,IAAI,KAAJ,0BAA4B,SAA5B,EAAN;MACD;;MACD,IAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,KAAP,CAAa,CAAb,CAAd,CAAb;MACA,OAAO;QAAE,IAAI,EAAJ,IAAF;QAAQ,IAAI,EAAE;MAAd,CAAP;IACD;EA/DH;;EAAA;AAAA;AAkEA,OAAM,SAAU,kBAAV,CAA6B,IAA7B,EAAyC;EAC7C,OAAO,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,MAAP,iBAAuB,IAAvB,EAAZ,EAA4C,KAA5C,CAAkD,CAAlD,EAAqD,CAArD,CAAP;AACD","sourceRoot":"","sourcesContent":["import * as base64 from \"base64-js\";\nimport { sha256 } from \"js-sha256\";\nimport { IdlCoder } from \"./idl\";\nexport class EventCoder {\n    constructor(idl) {\n        if (idl.events === undefined) {\n            this.layouts = new Map();\n            return;\n        }\n        const layouts = idl.events.map((event) => {\n            let eventTypeDef = {\n                name: event.name,\n                type: {\n                    kind: \"struct\",\n                    fields: event.fields.map((f) => {\n                        return { name: f.name, type: f.type };\n                    }),\n                },\n            };\n            return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];\n        });\n        // @ts-ignore\n        this.layouts = new Map(layouts);\n        this.discriminators = new Map(idl.events === undefined\n            ? []\n            : idl.events.map((e) => [\n                base64.fromByteArray(eventDiscriminator(e.name)),\n                e.name,\n            ]));\n    }\n    decode(log) {\n        let logArr;\n        // This will throw if log length is not a multiple of 4.\n        try {\n            logArr = Buffer.from(base64.toByteArray(log));\n        }\n        catch (e) {\n            return null;\n        }\n        const disc = base64.fromByteArray(logArr.slice(0, 8));\n        // Only deserialize if the discriminator implies a proper event.\n        const eventName = this.discriminators.get(disc);\n        if (eventName === undefined) {\n            return null;\n        }\n        const layout = this.layouts.get(eventName);\n        if (!layout) {\n            throw new Error(`Unknown event: ${eventName}`);\n        }\n        const data = layout.decode(logArr.slice(8));\n        return { data, name: eventName };\n    }\n}\nexport function eventDiscriminator(name) {\n    return Buffer.from(sha256.digest(`event:${name}`)).slice(0, 8);\n}\n//# sourceMappingURL=event.js.map"]},"metadata":{},"sourceType":"module"}