{"ast":null,"code":"var _jsxFileName = \"/Users/nikola/Sites/candy-machine/candy-machine-ui/src/components/mint/Mint.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport { awaitTransactionSignatureConfirmation, CANDY_MACHINE_PROGRAM, createAccountsForMint, getCandyMachineState, getCollectionPDA, mintOneToken } from './candy-machine';\nimport { formatNumber, getAtaForMint, toDate } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n_c = ConnectButton;\nconst MintContainer = styled.div``; // add your owns styles here\n\n_c2 = MintContainer;\n\nconst Home = props => {\n  _s();\n\n  var _candyMachine$state, _candyMachine$state2, _candyMachine$state2$;\n\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState();\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: '',\n    severity: undefined\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState();\n  const [itemsRemaining, setItemsRemaining] = useState();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState();\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const anchorWallet = useMemo(() => {\n    if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction\n    };\n  }, [wallet]);\n  const refreshCandyMachineState = useCallback(async function () {\n    let commitment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'confirmed';\n\n    if (!anchorWallet) {\n      return;\n    }\n\n    const connection = new Connection(props.rpcHost, commitment);\n\n    if (props.candyMachineId) {\n      try {\n        var _cndy$state$goLiveDat, _cndy$state$endSettin, _cndy$state$endSettin2, _cndy$state$whitelist, _cndy$state$whitelist2, _cndy$state$gatekeepe;\n\n        const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, connection);\n        let active = (cndy === null || cndy === void 0 ? void 0 : (_cndy$state$goLiveDat = cndy.state.goLiveDate) === null || _cndy$state$goLiveDat === void 0 ? void 0 : _cndy$state$goLiveDat.toNumber()) < new Date().getTime() / 1000;\n        let presale = false; // duplication of state to make sure we have the right values!\n\n        let isWLUser = false;\n        let userPrice = cndy.state.price; // whitelist mint?\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (cndy.state.whitelistMintSettings.presale && (!cndy.state.goLiveDate || cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)) {\n            presale = true;\n          } // is there a discount?\n\n\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n            userPrice = cndy.state.whitelistMintSettings.discountPrice;\n          } else {\n            setDiscountPrice(undefined); // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          } // retrieves the whitelist token\n\n\n          const mint = new anchor.web3.PublicKey(cndy.state.whitelistMintSettings.mint);\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await connection.getTokenAccountBalance(token);\n            isWLUser = parseInt(balance.value.amount) > 0; // only whitelist the user if the balance > 0\n\n            setIsWhitelistUser(isWLUser);\n\n            if (cndy.state.isWhitelistOnly) {\n              active = isWLUser && (presale || active);\n            }\n          } catch (e) {\n            setIsWhitelistUser(false); // no whitelist user, no mint\n\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        }\n\n        userPrice = isWLUser ? userPrice : cndy.state.price;\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.tokenMint) {\n          // retrieves the SPL token\n          const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await connection.getTokenAccountBalance(token);\n            const valid = new anchor.BN(balance.value.amount).gte(userPrice); // only allow user to mint if token balance >  the user if the balance > 0\n\n            setIsValidBalance(valid);\n            active = active && valid;\n          } catch (e) {\n            setIsValidBalance(false);\n            active = false; // no whitelist user, no mint\n\n            console.log('There was a problem fetching SPL token balance');\n            console.log(e);\n          }\n        } else {\n          const balance = new anchor.BN(await connection.getBalance(anchorWallet.publicKey));\n          const valid = balance.gte(userPrice);\n          setIsValidBalance(valid);\n          active = active && valid;\n        } // datetime to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin = cndy.state.endSettings) !== null && _cndy$state$endSettin !== void 0 && _cndy$state$endSettin.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n\n          if (cndy.state.endSettings.number.toNumber() < new Date().getTime() / 1000) {\n            active = false;\n          }\n        } // amount to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin2 = cndy.state.endSettings) !== null && _cndy$state$endSettin2 !== void 0 && _cndy$state$endSettin2.endSettingType.amount) {\n          let limit = Math.min(cndy.state.endSettings.number.toNumber(), cndy.state.itemsAvailable);\n\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n        const collectionPDAAccount = await connection.getAccountInfo(collectionPDA);\n        setIsActive(cndy.state.isActive = active);\n        setIsPresale(cndy.state.isPresale = presale);\n        setCandyMachine(cndy);\n        const txnEstimate = 892 + (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) + (cndy.state.tokenMint ? 66 : 0) + (cndy.state.whitelistMintSettings ? 34 : 0) + ((_cndy$state$whitelist = cndy.state.whitelistMintSettings) !== null && _cndy$state$whitelist !== void 0 && (_cndy$state$whitelist2 = _cndy$state$whitelist.mode) !== null && _cndy$state$whitelist2 !== void 0 && _cndy$state$whitelist2.burnEveryTime ? 34 : 0) + (cndy.state.gatekeeper ? 33 : 0) + ((_cndy$state$gatekeepe = cndy.state.gatekeeper) !== null && _cndy$state$gatekeepe !== void 0 && _cndy$state$gatekeepe.expireOnUse ? 66 : 0);\n        setNeedTxnSplit(txnEstimate > 1230);\n      } catch (e) {\n        if (e instanceof Error) {\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n              severity: 'error',\n              hideDuration: null\n            });\n          } else if (e.message.startsWith('failed to get info about account')) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n              severity: 'error',\n              hideDuration: null\n            });\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: `${e}`,\n            severity: 'error',\n            hideDuration: null\n          });\n        }\n\n        console.log(e);\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n        severity: 'error',\n        hideDuration: null\n      });\n    }\n  }, [anchorWallet, props.candyMachineId, props.rpcHost]);\n\n  const onMint = async function () {\n    let beforeTransactions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let afterTransactions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    try {\n      var _document$getElementB;\n\n      setIsUserMinting(true);\n      (_document$getElementB = document.getElementById('#identity')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.click();\n\n      if (wallet.connected && candyMachine !== null && candyMachine !== void 0 && candyMachine.program && wallet.publicKey) {\n        var _setupMint;\n\n        let setupMint;\n\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info'\n          });\n          setupMint = await createAccountsForMint(candyMachine, wallet.publicKey);\n          let status = {\n            err: true\n          };\n\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(setupMint.transaction, props.txTimeout, props.connection, true);\n          }\n\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message: 'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info'\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error'\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info'\n          });\n        }\n\n        let mintResult = await mintOneToken(candyMachine, wallet.publicKey, beforeTransactions, afterTransactions, (_setupMint = setupMint) !== null && _setupMint !== void 0 ? _setupMint : setupTxn);\n        let status = {\n          err: true\n        };\n        let metadataStatus = null;\n\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(mintResult.mintTxId, props.txTimeout, props.connection, true);\n          metadataStatus = await candyMachine.program.provider.connection.getAccountInfo(mintResult.metadataKey, 'processed');\n          console.log('Metadata status: ', !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining - 1;\n          setItemsRemaining(remaining);\n          setIsActive(candyMachine.state.isActive = remaining > 0);\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n            hideDuration: 7000\n          });\n          refreshCandyMachineState('processed');\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message: 'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n            severity: 'error',\n            hideDuration: 8000\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error'\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!';\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error'\n      }); // updates the candy machine state to reflect the latest\n      // information on chain\n\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() <= new Date().getTime() / 1000) {\n      setIsPresale(candyMachine.state.isPresale = false);\n    }\n\n    setIsActive(candyMachine.state.isActive = active);\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [anchorWallet, props.candyMachineId, props.connection, refreshCandyMachineState]);\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      marginTop: 100\n    },\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xs\",\n      style: {\n        position: 'relative'\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        style: {\n          padding: 24,\n          paddingBottom: 10,\n          backgroundColor: '#151A1F',\n          borderRadius: 6\n        },\n        children: [!wallet.connected ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 491,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [candyMachine && /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"center\",\n            wrap: \"nowrap\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 3,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: \"Remaining\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 502,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textPrimary\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: `${itemsRemaining}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: isWhitelistUser && discountPrice ? 'Discount Price' : 'Price'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textPrimary\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: isWhitelistUser && discountPrice ? `◎ ${formatNumber.asNumber(discountPrice)}` : `◎ ${formatNumber.asNumber(candyMachine.state.price)}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 5,\n              children: isActive && endDate && Date.now() < endDate.getTime() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                  date: getCountdownDate(candyMachine),\n                  style: {\n                    justifyContent: 'flex-end'\n                  },\n                  status: \"COMPLETED\",\n                  onComplete: toggleMintButton\n                }, \"endSettings\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 536,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  align: \"center\",\n                  display: \"block\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"TO END OF MINT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 543,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                  date: getCountdownDate(candyMachine),\n                  style: {\n                    justifyContent: 'flex-end'\n                  },\n                  status: candyMachine !== null && candyMachine !== void 0 && (_candyMachine$state = candyMachine.state) !== null && _candyMachine$state !== void 0 && _candyMachine$state.isSoldOut || endDate && Date.now() > endDate.getTime() ? 'COMPLETED' : isPresale ? 'PRESALE' : 'LIVE',\n                  onComplete: toggleMintButton\n                }, \"goLive\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 25\n                }, this), isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() > new Date().getTime() / 1000 && /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  align: \"center\",\n                  display: \"block\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"UNTIL PUBLIC MINT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 572,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(MintContainer, {\n            children: candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper && wallet.publicKey && wallet.signTransaction ? /*#__PURE__*/_jsxDEV(GatewayProvider, {\n              wallet: {\n                publicKey: wallet.publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                //@ts-ignore\n                signTransaction: wallet.signTransaction\n              },\n              gatekeeperNetwork: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state2 = candyMachine.state) === null || _candyMachine$state2 === void 0 ? void 0 : (_candyMachine$state2$ = _candyMachine$state2.gatekeeper) === null || _candyMachine$state2$ === void 0 ? void 0 : _candyMachine$state2$.gatekeeperNetwork,\n              clusterUrl: props.network === WalletAdapterNetwork.Devnet ? 'https://api.devnet.solana.com' : rpcUrl,\n              handleTransaction: async transaction => {\n                setIsUserMinting(true);\n                const userMustSign = transaction.signatures.find(sig => sig.publicKey.equals(wallet.publicKey));\n\n                if (userMustSign) {\n                  setAlertState({\n                    open: true,\n                    message: 'Please sign one-time Civic Pass issuance',\n                    severity: 'info'\n                  });\n\n                  try {\n                    transaction = await wallet.signTransaction(transaction);\n                  } catch (e) {\n                    setAlertState({\n                      open: true,\n                      message: 'User cancelled signing',\n                      severity: 'error'\n                    }); // setTimeout(() => window.location.reload(), 2000);\n\n                    setIsUserMinting(false);\n                    throw e;\n                  }\n                } else {\n                  setAlertState({\n                    open: true,\n                    message: 'Refreshing Civic Pass',\n                    severity: 'info'\n                  });\n                }\n\n                try {\n                  await sendTransaction(props.connection, wallet, transaction, [], true, 'confirmed');\n                  setAlertState({\n                    open: true,\n                    message: 'Please sign minting',\n                    severity: 'info'\n                  });\n                } catch (e) {\n                  setAlertState({\n                    open: true,\n                    message: 'Solana dropped the transaction, please try again',\n                    severity: 'warning'\n                  });\n                  console.error(e); // setTimeout(() => window.location.reload(), 2000);\n\n                  setIsUserMinting(false);\n                  throw e;\n                }\n\n                await onMint();\n              },\n              broadcastTransaction: false,\n              options: {\n                autoShowModal: false\n              },\n              children: /*#__PURE__*/_jsxDEV(MintButton, {\n                candyMachine: candyMachine,\n                isMinting: isUserMinting,\n                setIsMinting: val => setIsUserMinting(val),\n                onMint: onMint,\n                isActive: isActive || isPresale && isWhitelistUser && isValidBalance\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 670,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n              candyMachine: candyMachine,\n              isMinting: isUserMinting,\n              setIsMinting: val => setIsUserMinting(val),\n              onMint: onMint,\n              isActive: isActive || isPresale && isWhitelistUser && isValidBalance\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          align: \"center\",\n          display: \"block\",\n          style: {\n            marginTop: 7,\n            color: 'grey'\n          },\n          children: \"Powered by Pixie Bears\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 696,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: alertState.open,\n      autoHideDuration: alertState.hideDuration === undefined ? 6000 : alertState.hideDuration,\n      onClose: () => setAlertState({ ...alertState,\n        open: false\n      }),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        severity: alertState.severity,\n        children: alertState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 480,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"3f1/oynoWJ5kikgXZgk43Rt6Kao=\", false, function () {\n  return [useWallet];\n});\n\n_c3 = Home;\n\nconst getCountdownDate = candyMachine => {\n  var _candyMachine$state$e;\n\n  if (candyMachine.state.isActive && (_candyMachine$state$e = candyMachine.state.endSettings) !== null && _candyMachine$state$e !== void 0 && _candyMachine$state$e.endSettingType.date) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(candyMachine.state.goLiveDate ? candyMachine.state.goLiveDate : candyMachine.state.isPresale ? new anchor.BN(new Date().getTime() / 1000) : undefined);\n};\n\nexport default Home;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"MintContainer\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"names":["useCallback","useEffect","useMemo","useState","anchor","styled","Container","Snackbar","Paper","Alert","Grid","Typography","Connection","PublicKey","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","CANDY_MACHINE_PROGRAM","createAccountsForMint","getCandyMachineState","getCollectionPDA","mintOneToken","formatNumber","getAtaForMint","toDate","MintCountdown","MintButton","GatewayProvider","sendTransaction","WalletAdapterNetwork","ConnectButton","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","candyMachine","setCandyMachine","alertState","setAlertState","open","message","severity","undefined","isActive","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","isPresale","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","wallet","anchorWallet","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","commitment","connection","candyMachineId","cndy","active","state","goLiveDate","toNumber","Date","getTime","presale","isWLUser","userPrice","price","whitelistMintSettings","isWhitelistOnly","mint","web3","token","balance","getTokenAccountBalance","parseInt","value","amount","e","console","log","tokenMint","valid","BN","gte","getBalance","endSettings","endSettingType","date","number","limit","Math","min","itemsAvailable","itemsRedeemed","isSoldOut","collectionPDA","collectionPDAAccount","getAccountInfo","txnEstimate","retainAuthority","mode","burnEveryTime","gatekeeper","expireOnUse","Error","hideDuration","startsWith","onMint","beforeTransactions","afterTransactions","document","getElementById","click","connected","program","setupMint","status","err","transaction","txTimeout","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","error","msg","indexOf","code","window","location","reload","toggleMintButton","now","loop","setTimeout","marginTop","position","padding","paddingBottom","backgroundColor","borderRadius","fontWeight","asNumber","getCountdownDate","justifyContent","gatekeeperNetwork","network","Devnet","userMustSign","signatures","find","sig","equals","autoShowModal","val","color"],"sources":["/Users/nikola/Sites/candy-machine/candy-machine-ui/src/components/mint/Mint.tsx"],"sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as anchor from '@project-serum/anchor';\n\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from './candy-machine';\nimport { AlertState, formatNumber, getAtaForMint, toDate } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = 'confirmed') => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection,\n          );\n          let active =\n            cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          // whitelist mint?\n          if (cndy?.state.whitelistMintSettings) {\n            // is it a presale mint?\n            if (\n              cndy.state.whitelistMintSettings.presale &&\n              (!cndy.state.goLiveDate ||\n                cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n            ) {\n              presale = true;\n            }\n            // is there a discount?\n            if (cndy.state.whitelistMintSettings.discountPrice) {\n              setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n              userPrice = cndy.state.whitelistMintSettings.discountPrice;\n            } else {\n              setDiscountPrice(undefined);\n              // when presale=false and discountPrice=null, mint is restricted\n              // to whitelist users only\n              if (!cndy.state.whitelistMintSettings.presale) {\n                cndy.state.isWhitelistOnly = true;\n              }\n            }\n            // retrieves the whitelist token\n            const mint = new anchor.web3.PublicKey(\n              cndy.state.whitelistMintSettings.mint,\n            );\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n              isWLUser = parseInt(balance.value.amount) > 0;\n              // only whitelist the user if the balance > 0\n              setIsWhitelistUser(isWLUser);\n\n              if (cndy.state.isWhitelistOnly) {\n                active = isWLUser && (presale || active);\n              }\n            } catch (e) {\n              setIsWhitelistUser(false);\n              // no whitelist user, no mint\n              if (cndy.state.isWhitelistOnly) {\n                active = false;\n              }\n              console.log(\n                'There was a problem fetching whitelist token balance',\n              );\n              console.log(e);\n            }\n          }\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log('There was a problem fetching SPL token balance');\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey),\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          // datetime to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.date) {\n            setEndDate(toDate(cndy.state.endSettings.number));\n            if (\n              cndy.state.endSettings.number.toNumber() <\n              new Date().getTime() / 1000\n            ) {\n              active = false;\n            }\n          }\n          // amount to stop the mint?\n          if (cndy?.state.endSettings?.endSettingType.amount) {\n            let limit = Math.min(\n              cndy.state.endSettings.number.toNumber(),\n              cndy.state.itemsAvailable,\n            );\n            if (cndy.state.itemsRedeemed < limit) {\n              setItemsRemaining(limit - cndy.state.itemsRedeemed);\n            } else {\n              setItemsRemaining(0);\n              cndy.state.isSoldOut = true;\n            }\n          } else {\n            setItemsRemaining(cndy.state.itemsRemaining);\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA,\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 66 : 0) +\n            (cndy.state.whitelistMintSettings ? 34 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 34 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith('failed to get info about account')\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: 'error',\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: 'error',\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.rpcHost],\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info',\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey,\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true,\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info',\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error',\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info',\n          });\n        }\n\n        let mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn,\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              'processed',\n            );\n          console.log('Metadata status: ', !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState('processed');\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n            severity: 'error',\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  return (\n    <Container style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: '#151A1F',\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? 'Discount Price'\n                        : 'Price'}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: 'bold' }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price,\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: 'bold' }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? 'COMPLETED'\n                              : isPresale\n                              ? 'PRESALE'\n                              : 'LIVE'\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold' }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={\n                      props.network === WalletAdapterNetwork.Devnet\n                        ? 'https://api.devnet.solana.com'\n                        : rpcUrl\n                    }\n                    handleTransaction={async (transaction: Transaction) => {\n                      setIsUserMinting(true);\n                      const userMustSign = transaction.signatures.find(sig =>\n                        sig.publicKey.equals(wallet.publicKey!),\n                      );\n                      if (userMustSign) {\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign one-time Civic Pass issuance',\n                          severity: 'info',\n                        });\n                        try {\n                          transaction = await wallet.signTransaction!(\n                            transaction,\n                          );\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message: 'User cancelled signing',\n                            severity: 'error',\n                          });\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                      } else {\n                        setAlertState({\n                          open: true,\n                          message: 'Refreshing Civic Pass',\n                          severity: 'info',\n                        });\n                      }\n                      try {\n                        await sendTransaction(\n                          props.connection,\n                          wallet,\n                          transaction,\n                          [],\n                          true,\n                          'confirmed',\n                        );\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign minting',\n                          severity: 'info',\n                        });\n                      } catch (e) {\n                        setAlertState({\n                          open: true,\n                          message:\n                            'Solana dropped the transaction, please try again',\n                          severity: 'warning',\n                        });\n                        console.error(e);\n                        // setTimeout(() => window.location.reload(), 2000);\n                        setIsUserMinting(false);\n                        throw e;\n                      }\n                      await onMint();\n                    }}\n                    broadcastTransaction={false}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={val => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={val => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: 'grey' }}\n          >\n            Powered by Pixie Bears\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}