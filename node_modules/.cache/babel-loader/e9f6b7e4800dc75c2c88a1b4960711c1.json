{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSolanaGateway = exports.chainImplementation = void 0;\n\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\n\nconst config_1 = require(\"./config\");\n\nconst types_1 = require(\"../types\");\n\nconst GatewayContext_1 = require(\"../gateway/GatewayContext\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst createSolanaTransactionFromBase64 = partiallySignedTx => web3_js_1.Transaction.from(Buffer.from(partiallySignedTx, 'base64')); // eslint-disable-next-line import/prefer-default-export\n\n\nconst chainImplementation = _ref => {\n  let {\n    clusterUrl,\n    publicKey,\n    signTransaction,\n    handleTransaction,\n    gatekeeperNetworkAddress,\n    stage\n  } = _ref;\n  logger_1.default.debug('Connecting to cluster with commitment recent', clusterUrl);\n  const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n  return {\n    addOnGatewayTokenChangeListener: (gatewayToken, tokenDidChange) => {\n      return (0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), token => {\n        tokenDidChange({\n          issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n          gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n          owner: token.owner.toBase58(),\n          state: types_1.State[token.state],\n          identifier: token.publicKey.toBase58(),\n          expiryTime: token.expiryTime\n        });\n      });\n    },\n    removeOnGatewayTokenChangeListener: listenerId => {\n      (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n    },\n    findGatewayToken: async () => {\n      const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n      if (!onChainToken) return undefined;\n      return {\n        issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n        gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n        owner: onChainToken.owner.toBase58(),\n        state: types_1.State[onChainToken.state],\n        identifier: onChainToken.publicKey.toBase58(),\n        expiryTime: onChainToken.expiryTime\n      };\n    },\n    proveWalletOwnership: async () => {\n      const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl));\n      return result.toString('base64');\n    },\n    handleUserSignedTransaction: async partiallySignedTx => {\n      if (handleTransaction) {\n        await handleTransaction(createSolanaTransactionFromBase64(partiallySignedTx));\n      } // The user can still request broadcastTransaction to be false and then\n      // useGateway to instead retrieve the GatewayTokenTransaction instead of\n      // using a callback. The callback is optional so ignore it if it has not been supplied\n\n    },\n    chainType: types_1.ChainType.SOLANA,\n    httpConfig: {\n      baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n      queryParams: {\n        network: (0, config_1.urlToCluster)(clusterUrl)\n      }\n    }\n  };\n};\n\nexports.chainImplementation = chainImplementation;\n\nconst useSolanaGateway = () => {\n  const {\n    gatewayToken,\n    gatewayTokenTransaction\n  } = (0, GatewayContext_1.useGateway)();\n  const solanaGatewayToken = gatewayToken ? {\n    issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n    gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n    owner: new web3_js_1.PublicKey(gatewayToken.owner),\n    state: gatewayToken.state,\n    publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n    expiryTime: gatewayToken.expiryTime\n  } : undefined;\n  const solanaGatewayTokenTransaction = gatewayTokenTransaction ? createSolanaTransactionFromBase64(gatewayTokenTransaction) : undefined;\n  return Object.assign(Object.assign({}, (0, GatewayContext_1.useGateway)()), {\n    gatewayToken: solanaGatewayToken,\n    gatewayTokenTransaction: solanaGatewayTokenTransaction\n  });\n};\n\nexports.useSolanaGateway = useSolanaGateway;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","useSolanaGateway","chainImplementation","solana_gateway_ts_1","require","web3_js_1","prove_solana_wallet_1","config_1","types_1","GatewayContext_1","logger_1","createSolanaTransactionFromBase64","partiallySignedTx","Transaction","from","Buffer","clusterUrl","publicKey","signTransaction","handleTransaction","gatekeeperNetworkAddress","stage","default","debug","connection","Connection","addOnGatewayTokenChangeListener","gatewayToken","tokenDidChange","onGatewayTokenChange","PublicKey","identifier","token","issuingGatekeeper","toBase58","gatekeeperNetwork","owner","state","State","expiryTime","removeOnGatewayTokenChangeListener","listenerId","removeAccountChangeListener","findGatewayToken","onChainToken","undefined","proveWalletOwnership","result","prove","makeConfig","toString","handleUserSignedTransaction","chainType","ChainType","SOLANA","httpConfig","baseUrl","getGatekeeperEndpoint","queryParams","network","urlToCluster","gatewayTokenTransaction","useGateway","solanaGatewayToken","solanaGatewayTokenTransaction","assign"],"sources":["/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/chainImplementation.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useSolanaGateway = exports.chainImplementation = void 0;\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\nconst config_1 = require(\"./config\");\nconst types_1 = require(\"../types\");\nconst GatewayContext_1 = require(\"../gateway/GatewayContext\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst createSolanaTransactionFromBase64 = (partiallySignedTx) => web3_js_1.Transaction.from(Buffer.from(partiallySignedTx, 'base64'));\n// eslint-disable-next-line import/prefer-default-export\nconst chainImplementation = ({ clusterUrl, publicKey, signTransaction, handleTransaction, gatekeeperNetworkAddress, stage, }) => {\n    logger_1.default.debug('Connecting to cluster with commitment recent', clusterUrl);\n    const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n    return {\n        addOnGatewayTokenChangeListener: (gatewayToken, tokenDidChange) => {\n            return (0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), (token) => {\n                tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: types_1.State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime,\n                });\n            });\n        },\n        removeOnGatewayTokenChangeListener: (listenerId) => {\n            (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n        },\n        findGatewayToken: async () => {\n            const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n            if (!onChainToken)\n                return undefined;\n            return {\n                issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                owner: onChainToken.owner.toBase58(),\n                state: types_1.State[onChainToken.state],\n                identifier: onChainToken.publicKey.toBase58(),\n                expiryTime: onChainToken.expiryTime,\n            };\n        },\n        proveWalletOwnership: async () => {\n            const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl));\n            return result.toString('base64');\n        },\n        handleUserSignedTransaction: async (partiallySignedTx) => {\n            if (handleTransaction) {\n                await handleTransaction(createSolanaTransactionFromBase64(partiallySignedTx));\n            }\n            // The user can still request broadcastTransaction to be false and then\n            // useGateway to instead retrieve the GatewayTokenTransaction instead of\n            // using a callback. The callback is optional so ignore it if it has not been supplied\n        },\n        chainType: types_1.ChainType.SOLANA,\n        httpConfig: {\n            baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n            queryParams: { network: (0, config_1.urlToCluster)(clusterUrl) },\n        },\n    };\n};\nexports.chainImplementation = chainImplementation;\nconst useSolanaGateway = () => {\n    const { gatewayToken, gatewayTokenTransaction } = (0, GatewayContext_1.useGateway)();\n    const solanaGatewayToken = gatewayToken\n        ? {\n            issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n            gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n            owner: new web3_js_1.PublicKey(gatewayToken.owner),\n            state: gatewayToken.state,\n            publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n            expiryTime: gatewayToken.expiryTime,\n        }\n        : undefined;\n    const solanaGatewayTokenTransaction = gatewayTokenTransaction\n        ? createSolanaTransactionFromBase64(gatewayTokenTransaction)\n        : undefined;\n    return Object.assign(Object.assign({}, (0, GatewayContext_1.useGateway)()), { gatewayToken: solanaGatewayToken, gatewayTokenTransaction: solanaGatewayTokenTransaction });\n};\nexports.useSolanaGateway = useSolanaGateway;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}