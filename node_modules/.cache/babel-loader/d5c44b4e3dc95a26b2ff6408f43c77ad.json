{"ast":null,"code":"import camelCase from \"camelcase\";\nimport StateFactory from \"./state\";\nimport InstructionFactory from \"./instruction\";\nimport TransactionFactory from \"./transaction\";\nimport RpcFactory from \"./rpc\";\nimport AccountFactory from \"./account\";\nimport SimulateFactory from \"./simulate\";\nimport { parseIdlErrors } from \"../common\"; // Re-exports.\n\nexport { StateClient } from \"./state\";\nexport { AccountClient } from \"./account\";\nexport default class NamespaceFactory {\n  /**\n   * Generates all namespaces for a given program.\n   */\n  static build(idl, coder, programId, provider) {\n    const rpc = {};\n    const instruction = {};\n    const transaction = {};\n    const simulate = {};\n    const idlErrors = parseIdlErrors(idl);\n    const state = StateFactory.build(idl, coder, programId, provider);\n    idl.instructions.forEach(idlIx => {\n      const ixItem = InstructionFactory.build(idlIx, (ixName, ix) => coder.instruction.encode(ixName, ix), programId);\n      const txItem = TransactionFactory.build(idlIx, ixItem);\n      const rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n      const simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);\n      const name = camelCase(idlIx.name);\n      instruction[name] = ixItem;\n      transaction[name] = txItem;\n      rpc[name] = rpcItem;\n      simulate[name] = simulateItem;\n    });\n    const account = idl.accounts ? AccountFactory.build(idl, coder, programId, provider) : {};\n    return [rpc, instruction, transaction, account, simulate, state];\n  }\n\n}","map":{"version":3,"sources":["../../../../src/program/namespace/index.ts"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,WAAtB;AAKA,OAAO,YAAP,MAA0C,SAA1C;AACA,OAAO,kBAAP,MAAyD,eAAzD;AACA,OAAO,kBAAP,MAAyD,eAAzD;AACA,OAAO,UAAP,MAAyC,OAAzC;AACA,OAAO,cAAP,MAAiD,WAAjD;AACA,OAAO,eAAP,MAAmD,YAAnD;AACA,SAAS,cAAT,QAA+B,WAA/B,C,CAEA;;AACA,SAAS,WAAT,QAA4B,SAA5B;AAIA,SAA2B,aAA3B,QAAgE,WAAhE;AAGA,eAAc,MAAO,gBAAP,CAAuB;EACnC;;AAEG;EACgB,OAAL,KAAK,CACjB,GADiB,EAEjB,KAFiB,EAGjB,SAHiB,EAIjB,QAJiB,EAIC;IASlB,MAAM,GAAG,GAAiB,EAA1B;IACA,MAAM,WAAW,GAAyB,EAA1C;IACA,MAAM,WAAW,GAAyB,EAA1C;IACA,MAAM,QAAQ,GAAsB,EAApC;IAEA,MAAM,SAAS,GAAG,cAAc,CAAC,GAAD,CAAhC;IAEA,MAAM,KAAK,GAAG,YAAY,CAAC,KAAb,CAAmB,GAAnB,EAAwB,KAAxB,EAA+B,SAA/B,EAA0C,QAA1C,CAAd;IAEA,GAAG,CAAC,YAAJ,CAAiB,OAAjB,CAA0B,KAAD,IAAU;MACjC,MAAM,MAAM,GAAG,kBAAkB,CAAC,KAAnB,CACb,KADa,EAEb,CAAC,MAAD,EAAiB,EAAjB,KAA6B,KAAK,CAAC,WAAN,CAAkB,MAAlB,CAAyB,MAAzB,EAAiC,EAAjC,CAFhB,EAGb,SAHa,CAAf;MAKA,MAAM,MAAM,GAAG,kBAAkB,CAAC,KAAnB,CAAyB,KAAzB,EAAgC,MAAhC,CAAf;MACA,MAAM,OAAO,GAAG,UAAU,CAAC,KAAX,CAAiB,KAAjB,EAAwB,MAAxB,EAAgC,SAAhC,EAA2C,QAA3C,CAAhB;MACA,MAAM,YAAY,GAAG,eAAe,CAAC,KAAhB,CACnB,KADmB,EAEnB,MAFmB,EAGnB,SAHmB,EAInB,QAJmB,EAKnB,KALmB,EAMnB,SANmB,EAOnB,GAPmB,CAArB;MAUA,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,IAAP,CAAtB;MAEA,WAAW,CAAC,IAAD,CAAX,GAAoB,MAApB;MACA,WAAW,CAAC,IAAD,CAAX,GAAoB,MAApB;MACA,GAAG,CAAC,IAAD,CAAH,GAAY,OAAZ;MACA,QAAQ,CAAC,IAAD,CAAR,GAAiB,YAAjB;IACD,CAxBD;IA0BA,MAAM,OAAO,GAAG,GAAG,CAAC,QAAJ,GACZ,cAAc,CAAC,KAAf,CAAqB,GAArB,EAA0B,KAA1B,EAAiC,SAAjC,EAA4C,QAA5C,CADY,GAEZ,EAFJ;IAIA,OAAO,CAAC,GAAD,EAAM,WAAN,EAAmB,WAAnB,EAAgC,OAAhC,EAAyC,QAAzC,EAAmD,KAAnD,CAAP;EACD;;AAzDkC","sourceRoot":"","sourcesContent":["import camelCase from \"camelcase\";\nimport StateFactory from \"./state\";\nimport InstructionFactory from \"./instruction\";\nimport TransactionFactory from \"./transaction\";\nimport RpcFactory from \"./rpc\";\nimport AccountFactory from \"./account\";\nimport SimulateFactory from \"./simulate\";\nimport { parseIdlErrors } from \"../common\";\n// Re-exports.\nexport { StateClient } from \"./state\";\nexport { AccountClient } from \"./account\";\nexport default class NamespaceFactory {\n    /**\n     * Generates all namespaces for a given program.\n     */\n    static build(idl, coder, programId, provider) {\n        const rpc = {};\n        const instruction = {};\n        const transaction = {};\n        const simulate = {};\n        const idlErrors = parseIdlErrors(idl);\n        const state = StateFactory.build(idl, coder, programId, provider);\n        idl.instructions.forEach((idlIx) => {\n            const ixItem = InstructionFactory.build(idlIx, (ixName, ix) => coder.instruction.encode(ixName, ix), programId);\n            const txItem = TransactionFactory.build(idlIx, ixItem);\n            const rpcItem = RpcFactory.build(idlIx, txItem, idlErrors, provider);\n            const simulateItem = SimulateFactory.build(idlIx, txItem, idlErrors, provider, coder, programId, idl);\n            const name = camelCase(idlIx.name);\n            instruction[name] = ixItem;\n            transaction[name] = txItem;\n            rpc[name] = rpcItem;\n            simulate[name] = simulateItem;\n        });\n        const account = idl.accounts\n            ? AccountFactory.build(idl, coder, programId, provider)\n            : {};\n        return [rpc, instruction, transaction, account, simulate, state];\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}