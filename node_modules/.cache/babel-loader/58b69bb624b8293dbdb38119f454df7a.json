{"ast":null,"code":"import _asyncToGenerator from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _regeneratorRuntime from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\";\nimport { Connection, Keypair, sendAndConfirmRawTransaction } from \"@solana/web3.js\";\nimport { isBrowser } from \"./utils/common\";\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\n\nvar Provider = /*#__PURE__*/function () {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  function Provider(connection, wallet, opts) {\n    _classCallCheck(this, Provider);\n\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n  }\n\n  _createClass(Provider, [{\n    key: \"send\",\n    value:\n    /**\n     * Sends the given transaction, paid for and signed by the provider's wallet.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provider wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n    function () {\n      var _send = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(tx, signers, opts) {\n        var rawTx, txId;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (signers === undefined) {\n                  signers = [];\n                }\n\n                if (opts === undefined) {\n                  opts = this.opts;\n                }\n\n                tx.feePayer = this.wallet.publicKey;\n                _context.next = 5;\n                return this.connection.getRecentBlockhash(opts.preflightCommitment);\n\n              case 5:\n                tx.recentBlockhash = _context.sent.blockhash;\n                _context.next = 8;\n                return this.wallet.signTransaction(tx);\n\n              case 8:\n                signers.filter(function (s) {\n                  return s !== undefined;\n                }).forEach(function (kp) {\n                  tx.partialSign(kp);\n                });\n                rawTx = tx.serialize();\n                _context.next = 12;\n                return sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n\n              case 12:\n                txId = _context.sent;\n                return _context.abrupt(\"return\", txId);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function send(_x, _x2, _x3) {\n        return _send.apply(this, arguments);\n      }\n\n      return send;\n    }()\n    /**\n     * Similar to `send`, but for an array of transactions and signers.\n     */\n\n  }, {\n    key: \"sendAll\",\n    value: function () {\n      var _sendAll = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(reqs, opts) {\n        var _this = this;\n\n        var blockhash, txs, signedTxs, sigs, k, tx, rawTx;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (opts === undefined) {\n                  opts = this.opts;\n                }\n\n                _context2.next = 3;\n                return this.connection.getRecentBlockhash(opts.preflightCommitment);\n\n              case 3:\n                blockhash = _context2.sent;\n                txs = reqs.map(function (r) {\n                  var tx = r.tx;\n                  var signers = r.signers;\n\n                  if (signers === undefined) {\n                    signers = [];\n                  }\n\n                  tx.feePayer = _this.wallet.publicKey;\n                  tx.recentBlockhash = blockhash.blockhash;\n                  signers.filter(function (s) {\n                    return s !== undefined;\n                  }).forEach(function (kp) {\n                    tx.partialSign(kp);\n                  });\n                  return tx;\n                });\n                _context2.next = 7;\n                return this.wallet.signAllTransactions(txs);\n\n              case 7:\n                signedTxs = _context2.sent;\n                sigs = [];\n                k = 0;\n\n              case 10:\n                if (!(k < txs.length)) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                tx = signedTxs[k];\n                rawTx = tx.serialize();\n                _context2.t0 = sigs;\n                _context2.next = 16;\n                return sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n\n              case 16:\n                _context2.t1 = _context2.sent;\n\n                _context2.t0.push.call(_context2.t0, _context2.t1);\n\n              case 18:\n                k += 1;\n                _context2.next = 10;\n                break;\n\n              case 21:\n                return _context2.abrupt(\"return\", sigs);\n\n              case 22:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function sendAll(_x4, _x5) {\n        return _sendAll.apply(this, arguments);\n      }\n\n      return sendAll;\n    }()\n    /**\n     * Simulates the given transaction, returning emitted logs from execution.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provdier wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n\n  }, {\n    key: \"simulate\",\n    value: function () {\n      var _simulate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tx, signers) {\n        var opts,\n            _a,\n            _b,\n            _c,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                opts = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : this.opts;\n\n                if (signers === undefined) {\n                  signers = [];\n                }\n\n                tx.feePayer = this.wallet.publicKey;\n                _context3.next = 5;\n                return this.connection.getRecentBlockhash((_a = opts.preflightCommitment) !== null && _a !== void 0 ? _a : this.opts.preflightCommitment);\n\n              case 5:\n                tx.recentBlockhash = _context3.sent.blockhash;\n                _context3.next = 8;\n                return this.wallet.signTransaction(tx);\n\n              case 8:\n                signers.filter(function (s) {\n                  return s !== undefined;\n                }).forEach(function (kp) {\n                  tx.partialSign(kp);\n                });\n                _context3.next = 11;\n                return simulateTransaction(this.connection, tx, (_c = (_b = opts.commitment) !== null && _b !== void 0 ? _b : this.opts.commitment) !== null && _c !== void 0 ? _c : \"recent\");\n\n              case 11:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function simulate(_x6, _x7) {\n        return _simulate.apply(this, arguments);\n      }\n\n      return simulate;\n    }()\n  }], [{\n    key: \"defaultOptions\",\n    value: function defaultOptions() {\n      return {\n        preflightCommitment: \"recent\",\n        commitment: \"recent\"\n      };\n    }\n    /**\n     * Returns a `Provider` with a wallet read from the local filesystem.\n     *\n     * @param url  The network cluster url.\n     * @param opts The default transaction confirmation options.\n     *\n     * (This api is for Node only.)\n     */\n\n  }, {\n    key: \"local\",\n    value: function local(url, opts) {\n      opts = opts !== null && opts !== void 0 ? opts : Provider.defaultOptions();\n      var connection = new Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n      var wallet = NodeWallet.local();\n      return new Provider(connection, wallet, opts);\n    }\n    /**\n     * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n     * variable\n     *\n     * (This api is for Node only.)\n     */\n\n  }, {\n    key: \"env\",\n    value: function env() {\n      if (isBrowser) {\n        throw new Error(\"Provider env is not available on browser.\");\n      }\n\n      var process = require(\"process\");\n\n      var url = process.env.ANCHOR_PROVIDER_URL;\n\n      if (url === undefined) {\n        throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n      }\n\n      var options = Provider.defaultOptions();\n      var connection = new Connection(url, options.commitment);\n      var wallet = NodeWallet.local();\n      return new Provider(connection, wallet, options);\n    }\n  }]);\n\n  return Provider;\n}();\n/**\n * Node only wallet.\n */\n\n\nexport { Provider as default };\nexport var NodeWallet = /*#__PURE__*/function () {\n  function NodeWallet(payer) {\n    _classCallCheck(this, NodeWallet);\n\n    this.payer = payer;\n  }\n\n  _createClass(NodeWallet, [{\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tx) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                tx.partialSign(this.payer);\n                return _context4.abrupt(\"return\", tx);\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function signTransaction(_x8) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n  }, {\n    key: \"signAllTransactions\",\n    value: function () {\n      var _signAllTransactions = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(txs) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", txs.map(function (t) {\n                  t.partialSign(_this2.payer);\n                  return t;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n\n      function signAllTransactions(_x9) {\n        return _signAllTransactions.apply(this, arguments);\n      }\n\n      return signAllTransactions;\n    }()\n  }, {\n    key: \"publicKey\",\n    get: function get() {\n      return this.payer.publicKey;\n    }\n  }], [{\n    key: \"local\",\n    value: function local() {\n      var process = require(\"process\");\n\n      var payer = Keypair.fromSecretKey(Buffer.from(JSON.parse(require(\"fs\").readFileSync(process.env.ANCHOR_WALLET, {\n        encoding: \"utf-8\"\n      }))));\n      return new NodeWallet(payer);\n    }\n  }]);\n\n  return NodeWallet;\n}(); // Copy of Connection.simulateTransaction that takes a commitment parameter.\n\nfunction simulateTransaction(_x10, _x11, _x12) {\n  return _simulateTransaction.apply(this, arguments);\n}\n/**\n * Sets the default provider on the client.\n */\n\n\nfunction _simulateTransaction() {\n  _simulateTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(connection, transaction, commitment) {\n    var signData, wireTransaction, encodedTransaction, config, args, res;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return connection._recentBlockhash( // @ts-ignore\n            connection._disableBlockhashCaching);\n\n          case 2:\n            transaction.recentBlockhash = _context6.sent;\n            signData = transaction.serializeMessage(); // @ts-ignore\n\n            wireTransaction = transaction._serialize(signData);\n            encodedTransaction = wireTransaction.toString(\"base64\");\n            config = {\n              encoding: \"base64\",\n              commitment: commitment\n            };\n            args = [encodedTransaction, config]; // @ts-ignore\n\n            _context6.next = 10;\n            return connection._rpcRequest(\"simulateTransaction\", args);\n\n          case 10:\n            res = _context6.sent;\n\n            if (!res.error) {\n              _context6.next = 13;\n              break;\n            }\n\n            throw new Error(\"failed to simulate transaction: \" + res.error.message);\n\n          case 13:\n            return _context6.abrupt(\"return\", res.result);\n\n          case 14:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _simulateTransaction.apply(this, arguments);\n}\n\nexport function setProvider(provider) {\n  _provider = provider;\n}\n/**\n * Returns the default provider being used by the client.\n */\n\nexport function getProvider() {\n  if (_provider === null) {\n    return Provider.local();\n  }\n\n  return _provider;\n} // Global provider used as the default when a provider is not given.\n\nvar _provider = null;","map":{"version":3,"sources":["../../src/provider.ts"],"names":[],"mappings":";;;;AAAA,SACE,UADF,EAEE,OAFF,EAQE,4BARF,QAYO,iBAZP;AAaA,SAAS,SAAT,QAA0B,gBAA1B;AAEA;;;AAGG;;IACkB,Q;EACnB;;;;AAIG;EACH,kBACW,UADX,EAEW,MAFX,EAGW,IAHX,EAG+B;IAAA;;IAFpB,KAAA,UAAA,GAAA,UAAA;IACA,KAAA,MAAA,GAAA,MAAA;IACA,KAAA,IAAA,GAAA,IAAA;EACP;;;;;IAkDJ;;;;;;;AAOG;;2EACH,iBACE,EADF,EAEE,OAFF,EAGE,IAHF;QAAA;QAAA;UAAA;YAAA;cAAA;gBAKE,IAAI,OAAO,KAAK,SAAhB,EAA2B;kBACzB,OAAO,GAAG,EAAV;gBACD;;gBACD,IAAI,IAAI,KAAK,SAAb,EAAwB;kBACtB,IAAI,GAAG,KAAK,IAAZ;gBACD;;gBAED,EAAE,CAAC,QAAH,GAAc,KAAK,MAAL,CAAY,SAA1B;gBAZF;gBAAA,OAcU,KAAK,UAAL,CAAgB,kBAAhB,CAAmC,IAAI,CAAC,mBAAxC,CAdV;;cAAA;gBAaE,EAAE,CAAC,eAbL,iBAeI,SAfJ;gBAAA;gBAAA,OAiBQ,KAAK,MAAL,CAAY,eAAZ,CAA4B,EAA5B,CAjBR;;cAAA;gBAkBE,OAAO,CACJ,MADH,CACU,UAAC,CAAD;kBAAA,OAAoB,CAAC,KAAK,SAA1B;gBAAA,CADV,EAEG,OAFH,CAEW,UAAC,EAAD,EAAO;kBACd,EAAE,CAAC,WAAH,CAAe,EAAf;gBACD,CAJH;gBAMM,KAxBR,GAwBgB,EAAE,CAAC,SAAH,EAxBhB;gBAAA;gBAAA,OA0BqB,4BAA4B,CAC7C,KAAK,UADwC,EAE7C,KAF6C,EAG7C,IAH6C,CA1BjD;;cAAA;gBA0BQ,IA1BR;gBAAA,iCAgCS,IAhCT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IAmCA;;AAEG;;;;;8EACH,kBACE,IADF,EAEE,IAFF;QAAA;;QAAA;QAAA;UAAA;YAAA;cAAA;gBAIE,IAAI,IAAI,KAAK,SAAb,EAAwB;kBACtB,IAAI,GAAG,KAAK,IAAZ;gBACD;;gBANH;gBAAA,OAO0B,KAAK,UAAL,CAAgB,kBAAhB,CACtB,IAAI,CAAC,mBADiB,CAP1B;;cAAA;gBAOQ,SAPR;gBAWM,GAXN,GAWY,IAAI,CAAC,GAAL,CAAS,UAAC,CAAD,EAAM;kBACvB,IAAI,EAAE,GAAG,CAAC,CAAC,EAAX;kBACA,IAAI,OAAO,GAAG,CAAC,CAAC,OAAhB;;kBAEA,IAAI,OAAO,KAAK,SAAhB,EAA2B;oBACzB,OAAO,GAAG,EAAV;kBACD;;kBAED,EAAE,CAAC,QAAH,GAAc,KAAI,CAAC,MAAL,CAAY,SAA1B;kBACA,EAAE,CAAC,eAAH,GAAqB,SAAS,CAAC,SAA/B;kBAEA,OAAO,CACJ,MADH,CACU,UAAC,CAAD;oBAAA,OAAoB,CAAC,KAAK,SAA1B;kBAAA,CADV,EAEG,OAFH,CAEW,UAAC,EAAD,EAAO;oBACd,EAAE,CAAC,WAAH,CAAe,EAAf;kBACD,CAJH;kBAMA,OAAO,EAAP;gBACD,CAlBS,CAXZ;gBAAA;gBAAA,OA+B0B,KAAK,MAAL,CAAY,mBAAZ,CAAgC,GAAhC,CA/B1B;;cAAA;gBA+BQ,SA/BR;gBAiCQ,IAjCR,GAiCuC,EAjCvC;gBAmCW,CAnCX,GAmCe,CAnCf;;cAAA;gBAAA,MAmCkB,CAAC,GAAG,GAAG,CAAC,MAnC1B;kBAAA;kBAAA;gBAAA;;gBAoCU,EApCV,GAoCe,SAAS,CAAC,CAAD,CApCxB;gBAqCU,KArCV,GAqCkB,EAAE,CAAC,SAAH,EArClB;gBAAA,eAsCI,IAtCJ;gBAAA;gBAAA,OAuCY,4BAA4B,CAAC,KAAK,UAAN,EAAkB,KAAlB,EAAyB,IAAzB,CAvCxC;;cAAA;gBAAA;;gBAAA,aAsCS,IAtCT;;cAAA;gBAmCkC,CAAC,IAAI,CAnCvC;gBAAA;gBAAA;;cAAA;gBAAA,kCA2CS,IA3CT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;IA8CA;;;;;;;AAOG;;;;;+EACH,kBACE,EADF,EAEE,OAFF;QAAA;QAAA;QAAA;QAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAGE,IAHF,8DAGyB,KAAK,IAH9B;;gBAKE,IAAI,OAAO,KAAK,SAAhB,EAA2B;kBACzB,OAAO,GAAG,EAAV;gBACD;;gBAED,EAAE,CAAC,QAAH,GAAc,KAAK,MAAL,CAAY,SAA1B;gBATF;gBAAA,OAWU,KAAK,UAAL,CAAgB,kBAAhB,CACJ,CAAA,EAAA,GAAA,IAAI,CAAC,mBAAL,MAAwB,IAAxB,IAAwB,EAAA,KAAA,KAAA,CAAxB,GAAwB,EAAxB,GAA4B,KAAK,IAAL,CAAU,mBADlC,CAXV;;cAAA;gBAUE,EAAE,CAAC,eAVL,kBAcI,SAdJ;gBAAA;gBAAA,OAgBQ,KAAK,MAAL,CAAY,eAAZ,CAA4B,EAA5B,CAhBR;;cAAA;gBAiBE,OAAO,CACJ,MADH,CACU,UAAC,CAAD;kBAAA,OAAoB,CAAC,KAAK,SAA1B;gBAAA,CADV,EAEG,OAFH,CAEW,UAAC,EAAD,EAAO;kBACd,EAAE,CAAC,WAAH,CAAe,EAAf;gBACD,CAJH;gBAjBF;gBAAA,OAuBe,mBAAmB,CAC9B,KAAK,UADyB,EAE9B,EAF8B,EAG9B,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,IAAI,CAAC,UAAL,MAAe,IAAf,IAAe,EAAA,KAAA,KAAA,CAAf,GAAe,EAAf,GAAmB,KAAK,IAAL,CAAU,UAA7B,MAAuC,IAAvC,IAAuC,EAAA,KAAA,KAAA,CAAvC,GAAuC,EAAvC,GAA2C,QAHb,CAvBlC;;cAAA;gBAAA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,C;;;;;;;;;;WApJA,0BAAqB;MACnB,OAAO;QACL,mBAAmB,EAAE,QADhB;QAEL,UAAU,EAAE;MAFP,CAAP;IAID;IAED;;;;;;;AAOG;;;;WACH,eAAa,GAAb,EAA2B,IAA3B,EAAgD;MAC9C,IAAI,GAAG,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAA,IAAA,GAAQ,QAAQ,CAAC,cAAT,EAAf;MACA,IAAM,UAAU,GAAG,IAAI,UAAJ,CACjB,GAAG,KAAA,IAAH,IAAA,GAAG,KAAA,KAAA,CAAH,GAAA,GAAA,GAAO,uBADU,EAEjB,IAAI,CAAC,mBAFY,CAAnB;MAIA,IAAM,MAAM,GAAG,UAAU,CAAC,KAAX,EAAf;MACA,OAAO,IAAI,QAAJ,CAAa,UAAb,EAAyB,MAAzB,EAAiC,IAAjC,CAAP;IACD;IAED;;;;;AAKG;;;;WACH,eAAU;MACR,IAAI,SAAJ,EAAe;QACb,MAAM,IAAI,KAAJ,6CAAN;MACD;;MAED,IAAM,OAAO,GAAG,OAAO,CAAC,SAAD,CAAvB;;MACA,IAAM,GAAG,GAAG,OAAO,CAAC,GAAR,CAAY,mBAAxB;;MACA,IAAI,GAAG,KAAK,SAAZ,EAAuB;QACrB,MAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;MACD;;MACD,IAAM,OAAO,GAAG,QAAQ,CAAC,cAAT,EAAhB;MACA,IAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,GAAf,EAAoB,OAAO,CAAC,UAA5B,CAAnB;MACA,IAAM,MAAM,GAAG,UAAU,CAAC,KAAX,EAAf;MAEA,OAAO,IAAI,QAAJ,CAAa,UAAb,EAAyB,MAAzB,EAAiC,OAAjC,CAAP;IACD;;;;;AAmJH;;AAEG;;;SA/MkB,Q;AAgNrB,WAAa,UAAb;EACE,oBAAqB,KAArB,EAAmC;IAAA;;IAAd,KAAA,KAAA,GAAA,KAAA;EAAkB;;EADzC;IAAA;IAAA;MAAA,gFAiBE,kBAAsB,EAAtB;QAAA;UAAA;YAAA;cAAA;gBACE,EAAE,CAAC,WAAH,CAAe,KAAK,KAApB;gBADF,kCAES,EAFT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAjBF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA;MAAA,oFAsBE,kBAA0B,GAA1B;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAA,kCACS,GAAG,CAAC,GAAJ,CAAQ,UAAC,CAAD,EAAM;kBACnB,CAAC,CAAC,WAAF,CAAc,MAAI,CAAC,KAAnB;kBACA,OAAO,CAAP;gBACD,CAHM,CADT;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA,CAtBF;;MAAA;QAAA;MAAA;;MAAA;IAAA;EAAA;IAAA;IAAA,KA6BE,eAAa;MACX,OAAO,KAAK,KAAL,CAAW,SAAlB;IACD;EA/BH;IAAA;IAAA,OAGE,iBAAY;MACV,IAAM,OAAO,GAAG,OAAO,CAAC,SAAD,CAAvB;;MACA,IAAM,KAAK,GAAG,OAAO,CAAC,aAAR,CACZ,MAAM,CAAC,IAAP,CACE,IAAI,CAAC,KAAL,CACE,OAAO,CAAC,IAAD,CAAP,CAAc,YAAd,CAA2B,OAAO,CAAC,GAAR,CAAY,aAAvC,EAAsD;QACpD,QAAQ,EAAE;MAD0C,CAAtD,CADF,CADF,CADY,CAAd;MASA,OAAO,IAAI,UAAJ,CAAe,KAAf,CAAP;IACD;EAfH;;EAAA;AAAA,I,CAkCA;;SACe,mB;;;AA0Bf;;AAEG;;;;kFA5BH,kBACE,UADF,EAEE,WAFF,EAGE,UAHF;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OAMsC,UAAU,CAAC,gBAAX,EAClC;YACA,UAAU,CAAC,wBAFuB,CANtC;;UAAA;YAME,WAAW,CAAC,eANd;YAWQ,QAXR,GAWmB,WAAW,CAAC,gBAAZ,EAXnB,EAYE;;YACM,eAbR,GAa0B,WAAW,CAAC,UAAZ,CAAuB,QAAvB,CAb1B;YAcQ,kBAdR,GAc6B,eAAe,CAAC,QAAhB,CAAyB,QAAzB,CAd7B;YAeQ,MAfR,GAesB;cAAE,QAAQ,EAAE,QAAZ;cAAsB,UAAU,EAAV;YAAtB,CAftB;YAgBQ,IAhBR,GAgBe,CAAC,kBAAD,EAAqB,MAArB,CAhBf,EAkBE;;YAlBF;YAAA,OAmBoB,UAAU,CAAC,WAAX,CAAuB,qBAAvB,EAA8C,IAA9C,CAnBpB;;UAAA;YAmBQ,GAnBR;;YAAA,KAoBM,GAAG,CAAC,KApBV;cAAA;cAAA;YAAA;;YAAA,MAqBU,IAAI,KAAJ,CAAU,qCAAqC,GAAG,CAAC,KAAJ,CAAU,OAAzD,CArBV;;UAAA;YAAA,kCAuBS,GAAG,CAAC,MAvBb;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AA6BA,OAAM,SAAU,WAAV,CAAsB,QAAtB,EAAwC;EAC5C,SAAS,GAAG,QAAZ;AACD;AAED;;AAEG;;AACH,OAAM,SAAU,WAAV,GAAqB;EACzB,IAAI,SAAS,KAAK,IAAlB,EAAwB;IACtB,OAAO,QAAQ,CAAC,KAAT,EAAP;EACD;;EACD,OAAO,SAAP;AACD,C,CAED;;AACA,IAAI,SAAS,GAAoB,IAAjC","sourceRoot":"","sourcesContent":["import { Connection, Keypair, sendAndConfirmRawTransaction, } from \"@solana/web3.js\";\nimport { isBrowser } from \"./utils/common\";\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\nexport default class Provider {\n    /**\n     * @param connection The cluster connection where the program is deployed.\n     * @param wallet     The wallet used to pay for and sign all transactions.\n     * @param opts       Transaction confirmation options to use by default.\n     */\n    constructor(connection, wallet, opts) {\n        this.connection = connection;\n        this.wallet = wallet;\n        this.opts = opts;\n    }\n    static defaultOptions() {\n        return {\n            preflightCommitment: \"recent\",\n            commitment: \"recent\",\n        };\n    }\n    /**\n     * Returns a `Provider` with a wallet read from the local filesystem.\n     *\n     * @param url  The network cluster url.\n     * @param opts The default transaction confirmation options.\n     *\n     * (This api is for Node only.)\n     */\n    static local(url, opts) {\n        opts = opts !== null && opts !== void 0 ? opts : Provider.defaultOptions();\n        const connection = new Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n        const wallet = NodeWallet.local();\n        return new Provider(connection, wallet, opts);\n    }\n    /**\n     * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n     * variable\n     *\n     * (This api is for Node only.)\n     */\n    static env() {\n        if (isBrowser) {\n            throw new Error(`Provider env is not available on browser.`);\n        }\n        const process = require(\"process\");\n        const url = process.env.ANCHOR_PROVIDER_URL;\n        if (url === undefined) {\n            throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n        }\n        const options = Provider.defaultOptions();\n        const connection = new Connection(url, options.commitment);\n        const wallet = NodeWallet.local();\n        return new Provider(connection, wallet, options);\n    }\n    /**\n     * Sends the given transaction, paid for and signed by the provider's wallet.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provider wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n    async send(tx, signers, opts) {\n        if (signers === undefined) {\n            signers = [];\n        }\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        tx.feePayer = this.wallet.publicKey;\n        tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n        await this.wallet.signTransaction(tx);\n        signers\n            .filter((s) => s !== undefined)\n            .forEach((kp) => {\n            tx.partialSign(kp);\n        });\n        const rawTx = tx.serialize();\n        const txId = await sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n        return txId;\n    }\n    /**\n     * Similar to `send`, but for an array of transactions and signers.\n     */\n    async sendAll(reqs, opts) {\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n        let txs = reqs.map((r) => {\n            let tx = r.tx;\n            let signers = r.signers;\n            if (signers === undefined) {\n                signers = [];\n            }\n            tx.feePayer = this.wallet.publicKey;\n            tx.recentBlockhash = blockhash.blockhash;\n            signers\n                .filter((s) => s !== undefined)\n                .forEach((kp) => {\n                tx.partialSign(kp);\n            });\n            return tx;\n        });\n        const signedTxs = await this.wallet.signAllTransactions(txs);\n        const sigs = [];\n        for (let k = 0; k < txs.length; k += 1) {\n            const tx = signedTxs[k];\n            const rawTx = tx.serialize();\n            sigs.push(await sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n        }\n        return sigs;\n    }\n    /**\n     * Simulates the given transaction, returning emitted logs from execution.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provdier wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n    async simulate(tx, signers, opts = this.opts) {\n        var _a, _b, _c;\n        if (signers === undefined) {\n            signers = [];\n        }\n        tx.feePayer = this.wallet.publicKey;\n        tx.recentBlockhash = (await this.connection.getRecentBlockhash((_a = opts.preflightCommitment) !== null && _a !== void 0 ? _a : this.opts.preflightCommitment)).blockhash;\n        await this.wallet.signTransaction(tx);\n        signers\n            .filter((s) => s !== undefined)\n            .forEach((kp) => {\n            tx.partialSign(kp);\n        });\n        return await simulateTransaction(this.connection, tx, (_c = (_b = opts.commitment) !== null && _b !== void 0 ? _b : this.opts.commitment) !== null && _c !== void 0 ? _c : \"recent\");\n    }\n}\n/**\n * Node only wallet.\n */\nexport class NodeWallet {\n    constructor(payer) {\n        this.payer = payer;\n    }\n    static local() {\n        const process = require(\"process\");\n        const payer = Keypair.fromSecretKey(Buffer.from(JSON.parse(require(\"fs\").readFileSync(process.env.ANCHOR_WALLET, {\n            encoding: \"utf-8\",\n        }))));\n        return new NodeWallet(payer);\n    }\n    async signTransaction(tx) {\n        tx.partialSign(this.payer);\n        return tx;\n    }\n    async signAllTransactions(txs) {\n        return txs.map((t) => {\n            t.partialSign(this.payer);\n            return t;\n        });\n    }\n    get publicKey() {\n        return this.payer.publicKey;\n    }\n}\n// Copy of Connection.simulateTransaction that takes a commitment parameter.\nasync function simulateTransaction(connection, transaction, commitment) {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching);\n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString(\"base64\");\n    const config = { encoding: \"base64\", commitment };\n    const args = [encodedTransaction, config];\n    // @ts-ignore\n    const res = await connection._rpcRequest(\"simulateTransaction\", args);\n    if (res.error) {\n        throw new Error(\"failed to simulate transaction: \" + res.error.message);\n    }\n    return res.result;\n}\n/**\n * Sets the default provider on the client.\n */\nexport function setProvider(provider) {\n    _provider = provider;\n}\n/**\n * Returns the default provider being used by the client.\n */\nexport function getProvider() {\n    if (_provider === null) {\n        return Provider.local();\n    }\n    return _provider;\n}\n// Global provider used as the default when a provider is not given.\nlet _provider = null;\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}