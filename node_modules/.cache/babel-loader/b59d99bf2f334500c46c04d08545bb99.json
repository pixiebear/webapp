{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _createClass = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar _classCallCheck = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _inherits = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.removeFeatureFromNetwork = exports.addFeatureToNetwork = exports.updateExpiry = exports.unfreeze = exports.freeze = exports.revoke = exports.issueVanilla = exports.revokeGatekeeper = exports.addGatekeeper = exports.GatewayInstruction = void 0;\n\nvar solanaBorsh_1 = require(\"./solanaBorsh\");\n\nvar constants_1 = require(\"./constants\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar GatewayTokenData_1 = require(\"./GatewayTokenData\");\n\nvar GatewayNetworkData_1 = require(\"./GatewayNetworkData\");\n\nvar util_1 = require(\"./util\");\n/**\n * Creates instructions to send to the gateway program.\n *\n * Must match solana/program/src/instruction.rs\n */\n\n\nvar AddGatekeeper = /*#__PURE__*/function (_solanaBorsh_1$Assign) {\n  _inherits(AddGatekeeper, _solanaBorsh_1$Assign);\n\n  var _super = _createSuper(AddGatekeeper);\n\n  function AddGatekeeper() {\n    _classCallCheck(this, AddGatekeeper);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(AddGatekeeper);\n}(solanaBorsh_1.Assignable);\n\nvar IssueVanilla = /*#__PURE__*/function (_solanaBorsh_1$Assign2) {\n  _inherits(IssueVanilla, _solanaBorsh_1$Assign2);\n\n  var _super2 = _createSuper(IssueVanilla);\n\n  function IssueVanilla() {\n    _classCallCheck(this, IssueVanilla);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return _createClass(IssueVanilla);\n}(solanaBorsh_1.Assignable);\n\nvar SetState = /*#__PURE__*/function (_solanaBorsh_1$Assign3) {\n  _inherits(SetState, _solanaBorsh_1$Assign3);\n\n  var _super3 = _createSuper(SetState);\n\n  function SetState() {\n    _classCallCheck(this, SetState);\n\n    return _super3.apply(this, arguments);\n  }\n\n  return _createClass(SetState);\n}(solanaBorsh_1.Assignable);\n\nvar UpdateExpiry = /*#__PURE__*/function (_solanaBorsh_1$Assign4) {\n  _inherits(UpdateExpiry, _solanaBorsh_1$Assign4);\n\n  var _super4 = _createSuper(UpdateExpiry);\n\n  function UpdateExpiry() {\n    _classCallCheck(this, UpdateExpiry);\n\n    return _super4.apply(this, arguments);\n  }\n\n  return _createClass(UpdateExpiry);\n}(solanaBorsh_1.Assignable);\n\nvar RevokeGatekeeper = /*#__PURE__*/function (_solanaBorsh_1$Assign5) {\n  _inherits(RevokeGatekeeper, _solanaBorsh_1$Assign5);\n\n  var _super5 = _createSuper(RevokeGatekeeper);\n\n  function RevokeGatekeeper() {\n    _classCallCheck(this, RevokeGatekeeper);\n\n    return _super5.apply(this, arguments);\n  }\n\n  return _createClass(RevokeGatekeeper);\n}(solanaBorsh_1.Assignable);\n\nvar AddFeatureToNetwork = /*#__PURE__*/function (_solanaBorsh_1$Assign6) {\n  _inherits(AddFeatureToNetwork, _solanaBorsh_1$Assign6);\n\n  var _super6 = _createSuper(AddFeatureToNetwork);\n\n  function AddFeatureToNetwork() {\n    _classCallCheck(this, AddFeatureToNetwork);\n\n    return _super6.apply(this, arguments);\n  }\n\n  return _createClass(AddFeatureToNetwork);\n}(solanaBorsh_1.Assignable);\n\nvar RemoveFeatureFromNetwork = /*#__PURE__*/function (_solanaBorsh_1$Assign7) {\n  _inherits(RemoveFeatureFromNetwork, _solanaBorsh_1$Assign7);\n\n  var _super7 = _createSuper(RemoveFeatureFromNetwork);\n\n  function RemoveFeatureFromNetwork() {\n    _classCallCheck(this, RemoveFeatureFromNetwork);\n\n    return _super7.apply(this, arguments);\n  }\n\n  return _createClass(RemoveFeatureFromNetwork);\n}(solanaBorsh_1.Assignable);\n\nvar GatewayInstruction = /*#__PURE__*/function (_solanaBorsh_1$Enum) {\n  _inherits(GatewayInstruction, _solanaBorsh_1$Enum);\n\n  var _super8 = _createSuper(GatewayInstruction);\n\n  function GatewayInstruction() {\n    _classCallCheck(this, GatewayInstruction);\n\n    return _super8.apply(this, arguments);\n  }\n\n  _createClass(GatewayInstruction, null, [{\n    key: \"addGatekeeper\",\n    value: function addGatekeeper() {\n      return new GatewayInstruction({\n        addGatekeeper: new AddGatekeeper({})\n      });\n    }\n  }, {\n    key: \"issueVanilla\",\n    value: function issueVanilla(seed, expireTime) {\n      return new GatewayInstruction({\n        issueVanilla: new IssueVanilla({\n          seed: seed,\n          expireTime: expireTime\n        })\n      });\n    }\n  }, {\n    key: \"revoke\",\n    value: function revoke() {\n      return new GatewayInstruction({\n        setState: new SetState({\n          state: new GatewayTokenData_1.GatewayTokenState({\n            revoked: new GatewayTokenData_1.Revoked({})\n          })\n        })\n      });\n    }\n  }, {\n    key: \"freeze\",\n    value: function freeze() {\n      return new GatewayInstruction({\n        setState: new SetState({\n          state: new GatewayTokenData_1.GatewayTokenState({\n            frozen: new GatewayTokenData_1.Frozen({})\n          })\n        })\n      });\n    }\n  }, {\n    key: \"unfreeze\",\n    value: function unfreeze() {\n      return new GatewayInstruction({\n        setState: new SetState({\n          state: new GatewayTokenData_1.GatewayTokenState({\n            active: new GatewayTokenData_1.Active({})\n          })\n        })\n      });\n    }\n  }, {\n    key: \"updateExpiry\",\n    value: function updateExpiry(expireTime) {\n      return new GatewayInstruction({\n        updateExpiry: new UpdateExpiry({\n          expireTime: expireTime\n        })\n      });\n    }\n  }, {\n    key: \"revokeGatekeeper\",\n    value: function revokeGatekeeper() {\n      return new GatewayInstruction({\n        revokeGatekeeper: new RevokeGatekeeper({})\n      });\n    }\n  }, {\n    key: \"addFeatureToNetwork\",\n    value: function addFeatureToNetwork(feature) {\n      return new GatewayInstruction({\n        addFeatureToNetwork: new AddFeatureToNetwork({\n          feature: feature\n        })\n      });\n    }\n  }, {\n    key: \"removeFeatureFromNetwork\",\n    value: function removeFeatureFromNetwork(feature) {\n      return new GatewayInstruction({\n        removeFeatureFromNetwork: new RemoveFeatureFromNetwork({\n          feature: feature\n        })\n      });\n    }\n  }]);\n\n  return GatewayInstruction;\n}(solanaBorsh_1.Enum);\n\nexports.GatewayInstruction = GatewayInstruction;\n/**\n * Add a gatekeeper to a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param gatekeeperAccount An uninitialised gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to add to the network\n * @param network The gatekeeper network that the account is being added to.\n */\n\nfunction addGatekeeper(payer, gatekeeperAccount, gatekeeperAuthority, network) {\n  var keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: network,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.addGatekeeper().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.addGatekeeper = addGatekeeper;\n/**\n * Removes a gatekeeper from a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param funds_to The account the gatekeeper account's rent goes to\n * @param gatekeeperAccount The gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to remove from the network\n * @param network The gatekeeper network that the account is being removed from.\n */\n\nfunction revokeGatekeeper(funds_to, gatekeeperAccount, gatekeeperAuthority, network) {\n  var keys = [{\n    pubkey: funds_to,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: network,\n    isSigner: true,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.revokeGatekeeper().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.revokeGatekeeper = revokeGatekeeper;\n/**\n * Issue a gateway token to the owner publicKey. This is a 'vanilla' token, in that it does not\n * rely on any other accounts (e.g. identity accounts) to validate.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount An uninitialised gateway token account PDA. The address must be derived via getGatewayTokenAddressForOwnerAndGatekeeperNetwork\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account).\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper issuing the token\n * @param owner The recipient of the token\n * @param gatekeeperAuthority The gatekeeper issuing the token\n * @param gatekeeperNetwork The network that the gatekeeper belongs to\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n * @param expireTime The unix timestamp at which the token is no longer valid\n */\n\nfunction issueVanilla(gatewayTokenAccount, payer, gatekeeperAccount, owner, gatekeeperAuthority, gatekeeperNetwork, seed, expireTime) {\n  var keys = [{\n    pubkey: payer,\n    isSigner: true,\n    isWritable: true\n  }, {\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: owner,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperNetwork,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,\n    isSigner: false,\n    isWritable: false\n  }, {\n    pubkey: web3_js_1.SystemProgram.programId,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.issueVanilla(seed, expireTime).encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.issueVanilla = issueVanilla;\n\nvar getStateChangeAccountMeta = function getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  return [{\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }];\n};\n/**\n * Revoke a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to revoke\n * @param gatekeeperAuthority The gatekeeper revoking the token (must be in the same network as the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper revoking the token\n */\n\n\nfunction revoke(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  var keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  var data = GatewayInstruction.revoke().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.revoke = revoke;\n/**\n * Freeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to freeze\n * @param gatekeeperAuthority The gatekeeper freezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper freezing the token\n */\n\nfunction freeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  var keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  var data = GatewayInstruction.freeze().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.freeze = freeze;\n/**\n * Unfreeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to unfreeze\n * @param gatekeeperAuthority The gatekeeper unfreezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper unfreezing the token\n */\n\nfunction unfreeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n  var keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n  var data = GatewayInstruction.unfreeze().encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.unfreeze = unfreeze;\n/**\n * Update the expiry time of a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to be updated (must have an expiry time)\n * @param gatekeeperAuthority The gatekeeper (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper\n * @param expireTime The new expiry time\n */\n\nfunction updateExpiry(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount, expireTime) {\n  var keys = [{\n    pubkey: gatewayTokenAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: gatekeeperAuthority,\n    isSigner: true,\n    isWritable: false\n  }, {\n    pubkey: gatekeeperAccount,\n    isSigner: false,\n    isWritable: false\n  }];\n  var data = GatewayInstruction.updateExpiry(expireTime).encode();\n  return new web3_js_1.TransactionInstruction({\n    keys: keys,\n    programId: constants_1.PROGRAM_ID,\n    data: data\n  });\n}\n\nexports.updateExpiry = updateExpiry;\n/**\n * Add a feature to an existing Gatekeeper Network.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param network The gatekeeper network that the account is being added to.\n * @param feature The NetworkFeature Enum value\n */\n\nfunction addFeatureToNetwork(payer, network, feature) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var featureAccount, keys, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return (0, util_1.getFeatureAccountAddress)(feature, network);\n\n          case 2:\n            featureAccount = _context.sent;\n            keys = [{\n              pubkey: payer,\n              isSigner: true,\n              isWritable: true\n            }, {\n              pubkey: network,\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: featureAccount,\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: web3_js_1.SystemProgram.programId,\n              isSigner: false,\n              isWritable: false\n            }];\n            data = GatewayInstruction.addFeatureToNetwork(feature).encode();\n            return _context.abrupt(\"return\", new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: constants_1.PROGRAM_ID,\n              data: data\n            }));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.addFeatureToNetwork = addFeatureToNetwork;\n/**\n * Remove a feature to an existing Gatekeeper Network.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param network The gatekeeper network that the account is being added to.\n * @param feature The NetworkFeature Enum value\n */\n\nfunction removeFeatureFromNetwork(payer, network, feature) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var featureAccount, keys, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return (0, util_1.getFeatureAccountAddress)(feature, network);\n\n          case 2:\n            featureAccount = _context2.sent;\n            keys = [{\n              pubkey: payer,\n              isSigner: true,\n              isWritable: true\n            }, {\n              pubkey: network,\n              isSigner: true,\n              isWritable: false\n            }, {\n              pubkey: featureAccount,\n              isSigner: false,\n              isWritable: true\n            }, {\n              pubkey: web3_js_1.SystemProgram.programId,\n              isSigner: false,\n              isWritable: false\n            }];\n            data = GatewayInstruction.removeFeatureFromNetwork(feature).encode();\n            return _context2.abrupt(\"return\", new web3_js_1.TransactionInstruction({\n              keys: keys,\n              programId: constants_1.PROGRAM_ID,\n              data: data\n            }));\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nexports.removeFeatureFromNetwork = removeFeatureFromNetwork;\nsolanaBorsh_1.SCHEMA.set(GatewayInstruction, {\n  kind: \"enum\",\n  field: \"enum\",\n  values: [[\"addGatekeeper\", AddGatekeeper], [\"issueVanilla\", IssueVanilla], [\"setState\", SetState], [\"updateExpiry\", UpdateExpiry], [\"revokeGatekeeper\", RevokeGatekeeper], [\"addFeatureToNetwork\", AddFeatureToNetwork], [\"removeFeatureFromNetwork\", RemoveFeatureFromNetwork]]\n});\nsolanaBorsh_1.SCHEMA.set(AddGatekeeper, {\n  kind: \"struct\",\n  fields: []\n});\nsolanaBorsh_1.SCHEMA.set(IssueVanilla, {\n  kind: \"struct\",\n  fields: [[\"seed\", {\n    kind: \"option\",\n    type: [8]\n  }], [\"expireTime\", {\n    kind: \"option\",\n    type: \"u64\"\n  }]]\n});\nsolanaBorsh_1.SCHEMA.set(SetState, {\n  kind: \"struct\",\n  fields: [[\"state\", GatewayTokenData_1.GatewayTokenState]]\n});\nsolanaBorsh_1.SCHEMA.set(UpdateExpiry, {\n  kind: \"struct\",\n  fields: [[\"expireTime\", \"u64\"]]\n});\nsolanaBorsh_1.SCHEMA.set(RevokeGatekeeper, {\n  kind: \"struct\",\n  fields: []\n});\nsolanaBorsh_1.SCHEMA.set(AddFeatureToNetwork, {\n  kind: \"struct\",\n  fields: [[\"feature\", GatewayNetworkData_1.NetworkFeature]]\n});\nsolanaBorsh_1.SCHEMA.set(RemoveFeatureFromNetwork, {\n  kind: \"struct\",\n  fields: [[\"feature\", GatewayNetworkData_1.NetworkFeature]]\n});","map":{"version":3,"sources":["../../src/lib/instruction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.removeFeatureFromNetwork = exports.addFeatureToNetwork = exports.updateExpiry = exports.unfreeze = exports.freeze = exports.revoke = exports.issueVanilla = exports.revokeGatekeeper = exports.addGatekeeper = exports.GatewayInstruction = void 0;\nconst solanaBorsh_1 = require(\"./solanaBorsh\");\nconst constants_1 = require(\"./constants\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst GatewayTokenData_1 = require(\"./GatewayTokenData\");\nconst GatewayNetworkData_1 = require(\"./GatewayNetworkData\");\nconst util_1 = require(\"./util\");\n/**\n * Creates instructions to send to the gateway program.\n *\n * Must match solana/program/src/instruction.rs\n */\nclass AddGatekeeper extends solanaBorsh_1.Assignable {\n}\nclass IssueVanilla extends solanaBorsh_1.Assignable {\n}\nclass SetState extends solanaBorsh_1.Assignable {\n}\nclass UpdateExpiry extends solanaBorsh_1.Assignable {\n}\nclass RevokeGatekeeper extends solanaBorsh_1.Assignable {\n}\nclass AddFeatureToNetwork extends solanaBorsh_1.Assignable {\n}\nclass RemoveFeatureFromNetwork extends solanaBorsh_1.Assignable {\n}\nclass GatewayInstruction extends solanaBorsh_1.Enum {\n    static addGatekeeper() {\n        return new GatewayInstruction({\n            addGatekeeper: new AddGatekeeper({}),\n        });\n    }\n    static issueVanilla(seed, expireTime) {\n        return new GatewayInstruction({\n            issueVanilla: new IssueVanilla({ seed, expireTime }),\n        });\n    }\n    static revoke() {\n        return new GatewayInstruction({\n            setState: new SetState({\n                state: new GatewayTokenData_1.GatewayTokenState({ revoked: new GatewayTokenData_1.Revoked({}) }),\n            }),\n        });\n    }\n    static freeze() {\n        return new GatewayInstruction({\n            setState: new SetState({\n                state: new GatewayTokenData_1.GatewayTokenState({ frozen: new GatewayTokenData_1.Frozen({}) }),\n            }),\n        });\n    }\n    static unfreeze() {\n        return new GatewayInstruction({\n            setState: new SetState({\n                state: new GatewayTokenData_1.GatewayTokenState({ active: new GatewayTokenData_1.Active({}) }),\n            }),\n        });\n    }\n    static updateExpiry(expireTime) {\n        return new GatewayInstruction({\n            updateExpiry: new UpdateExpiry({\n                expireTime,\n            }),\n        });\n    }\n    static revokeGatekeeper() {\n        return new GatewayInstruction({\n            revokeGatekeeper: new RevokeGatekeeper({}),\n        });\n    }\n    static addFeatureToNetwork(feature) {\n        return new GatewayInstruction({\n            addFeatureToNetwork: new AddFeatureToNetwork({\n                feature,\n            }),\n        });\n    }\n    static removeFeatureFromNetwork(feature) {\n        return new GatewayInstruction({\n            removeFeatureFromNetwork: new RemoveFeatureFromNetwork({\n                feature,\n            }),\n        });\n    }\n}\nexports.GatewayInstruction = GatewayInstruction;\n/**\n * Add a gatekeeper to a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param gatekeeperAccount An uninitialised gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to add to the network\n * @param network The gatekeeper network that the account is being added to.\n */\nfunction addGatekeeper(payer, gatekeeperAccount, gatekeeperAuthority, network) {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAuthority, isSigner: false, isWritable: false },\n        { pubkey: network, isSigner: true, isWritable: false },\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const data = GatewayInstruction.addGatekeeper().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.addGatekeeper = addGatekeeper;\n/**\n * Removes a gatekeeper from a gatekeeper network.\n * Returns a Solana instruction that must be signed by the gatekeeper network authority.\n *\n * @param funds_to The account the gatekeeper account's rent goes to\n * @param gatekeeperAccount The gatekeeper account PDA. The address must be derived via getGatekeeperAccountKeyFromGatekeeperAuthority()\n * @param gatekeeperAuthority The gatekeeper to remove from the network\n * @param network The gatekeeper network that the account is being removed from.\n */\nfunction revokeGatekeeper(funds_to, gatekeeperAccount, gatekeeperAuthority, network) {\n    const keys = [\n        { pubkey: funds_to, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAuthority, isSigner: false, isWritable: false },\n        { pubkey: network, isSigner: true, isWritable: false },\n    ];\n    const data = GatewayInstruction.revokeGatekeeper().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.revokeGatekeeper = revokeGatekeeper;\n/**\n * Issue a gateway token to the owner publicKey. This is a 'vanilla' token, in that it does not\n * rely on any other accounts (e.g. identity accounts) to validate.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount An uninitialised gateway token account PDA. The address must be derived via getGatewayTokenAddressForOwnerAndGatekeeperNetwork\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account).\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper issuing the token\n * @param owner The recipient of the token\n * @param gatekeeperAuthority The gatekeeper issuing the token\n * @param gatekeeperNetwork The network that the gatekeeper belongs to\n * @param seed An 8-byte seed array, used to add multiple tokens to the same owner. Must be unique to each token, if present\n * @param expireTime The unix timestamp at which the token is no longer valid\n */\nfunction issueVanilla(gatewayTokenAccount, payer, gatekeeperAccount, owner, gatekeeperAuthority, gatekeeperNetwork, seed, expireTime) {\n    const keys = [\n        { pubkey: payer, isSigner: true, isWritable: true },\n        { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: owner, isSigner: false, isWritable: false },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n        { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n        { pubkey: gatekeeperNetwork, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false },\n        { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n    ];\n    const data = GatewayInstruction.issueVanilla(seed, expireTime).encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.issueVanilla = issueVanilla;\nconst getStateChangeAccountMeta = (gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) => [\n    { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n    { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n    { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n];\n/**\n * Revoke a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to revoke\n * @param gatekeeperAuthority The gatekeeper revoking the token (must be in the same network as the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper revoking the token\n */\nfunction revoke(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n    const data = GatewayInstruction.revoke().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.revoke = revoke;\n/**\n * Freeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to freeze\n * @param gatekeeperAuthority The gatekeeper freezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper freezing the token\n */\nfunction freeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n    const data = GatewayInstruction.freeze().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.freeze = freeze;\n/**\n * Unfreeze a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to unfreeze\n * @param gatekeeperAuthority The gatekeeper unfreezing the token (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper unfreezing the token\n */\nfunction unfreeze(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount) {\n    const keys = getStateChangeAccountMeta(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount);\n    const data = GatewayInstruction.unfreeze().encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.unfreeze = unfreeze;\n/**\n * Update the expiry time of a gateway token.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param gatewayTokenAccount The gateway token to be updated (must have an expiry time)\n * @param gatekeeperAuthority The gatekeeper (must be equal to the issuing gatekeeper)\n * @param gatekeeperAccount The account in the gatekeeper network of the gatekeeper\n * @param expireTime The new expiry time\n */\nfunction updateExpiry(gatewayTokenAccount, gatekeeperAuthority, gatekeeperAccount, expireTime) {\n    const keys = [\n        { pubkey: gatewayTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: gatekeeperAuthority, isSigner: true, isWritable: false },\n        { pubkey: gatekeeperAccount, isSigner: false, isWritable: false },\n    ];\n    const data = GatewayInstruction.updateExpiry(expireTime).encode();\n    return new web3_js_1.TransactionInstruction({\n        keys,\n        programId: constants_1.PROGRAM_ID,\n        data,\n    });\n}\nexports.updateExpiry = updateExpiry;\n/**\n * Add a feature to an existing Gatekeeper Network.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param network The gatekeeper network that the account is being added to.\n * @param feature The NetworkFeature Enum value\n */\nfunction addFeatureToNetwork(payer, network, feature) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const featureAccount = yield (0, util_1.getFeatureAccountAddress)(feature, network);\n        const keys = [\n            { pubkey: payer, isSigner: true, isWritable: true },\n            { pubkey: network, isSigner: true, isWritable: false },\n            { pubkey: featureAccount, isSigner: false, isWritable: true },\n            { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n        ];\n        const data = GatewayInstruction.addFeatureToNetwork(feature).encode();\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId: constants_1.PROGRAM_ID,\n            data,\n        });\n    });\n}\nexports.addFeatureToNetwork = addFeatureToNetwork;\n/**\n * Remove a feature to an existing Gatekeeper Network.\n * Returns a Solana instruction that must be signed by the gatekeeper authority.\n * @param payer The payer of the transaction (used to pay rent into the gatekeeper account)\n * @param network The gatekeeper network that the account is being added to.\n * @param feature The NetworkFeature Enum value\n */\nfunction removeFeatureFromNetwork(payer, network, feature) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const featureAccount = yield (0, util_1.getFeatureAccountAddress)(feature, network);\n        const keys = [\n            { pubkey: payer, isSigner: true, isWritable: true },\n            { pubkey: network, isSigner: true, isWritable: false },\n            { pubkey: featureAccount, isSigner: false, isWritable: true },\n            { pubkey: web3_js_1.SystemProgram.programId, isSigner: false, isWritable: false },\n        ];\n        const data = GatewayInstruction.removeFeatureFromNetwork(feature).encode();\n        return new web3_js_1.TransactionInstruction({\n            keys,\n            programId: constants_1.PROGRAM_ID,\n            data,\n        });\n    });\n}\nexports.removeFeatureFromNetwork = removeFeatureFromNetwork;\nsolanaBorsh_1.SCHEMA.set(GatewayInstruction, {\n    kind: \"enum\",\n    field: \"enum\",\n    values: [\n        [\"addGatekeeper\", AddGatekeeper],\n        [\"issueVanilla\", IssueVanilla],\n        [\"setState\", SetState],\n        [\"updateExpiry\", UpdateExpiry],\n        [\"revokeGatekeeper\", RevokeGatekeeper],\n        [\"addFeatureToNetwork\", AddFeatureToNetwork],\n        [\"removeFeatureFromNetwork\", RemoveFeatureFromNetwork],\n    ],\n});\nsolanaBorsh_1.SCHEMA.set(AddGatekeeper, {\n    kind: \"struct\",\n    fields: [],\n});\nsolanaBorsh_1.SCHEMA.set(IssueVanilla, {\n    kind: \"struct\",\n    fields: [\n        [\"seed\", { kind: \"option\", type: [8] }],\n        [\"expireTime\", { kind: \"option\", type: \"u64\" }],\n    ],\n});\nsolanaBorsh_1.SCHEMA.set(SetState, {\n    kind: \"struct\",\n    fields: [[\"state\", GatewayTokenData_1.GatewayTokenState]],\n});\nsolanaBorsh_1.SCHEMA.set(UpdateExpiry, {\n    kind: \"struct\",\n    fields: [[\"expireTime\", \"u64\"]],\n});\nsolanaBorsh_1.SCHEMA.set(RevokeGatekeeper, {\n    kind: \"struct\",\n    fields: [],\n});\nsolanaBorsh_1.SCHEMA.set(AddFeatureToNetwork, {\n    kind: \"struct\",\n    fields: [[\"feature\", GatewayNetworkData_1.NetworkFeature]],\n});\nsolanaBorsh_1.SCHEMA.set(RemoveFeatureFromNetwork, {\n    kind: \"struct\",\n    fields: [[\"feature\", GatewayNetworkData_1.NetworkFeature]],\n});\n//# sourceMappingURL=instruction.js.map"]},"metadata":{},"sourceType":"script"}