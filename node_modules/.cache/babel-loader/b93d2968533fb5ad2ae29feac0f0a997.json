{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSolanaGateway = exports.chainImplementation = void 0;\n\nvar solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\n\nvar config_1 = require(\"./config\");\n\nvar types_1 = require(\"../types\");\n\nvar GatewayContext_1 = require(\"../gateway/GatewayContext\");\n\nvar logger_1 = __importDefault(require(\"../logger\"));\n\nvar createSolanaTransactionFromBase64 = function createSolanaTransactionFromBase64(partiallySignedTx) {\n  return web3_js_1.Transaction.from(Buffer.from(partiallySignedTx, 'base64'));\n}; // eslint-disable-next-line import/prefer-default-export\n\n\nvar chainImplementation = function chainImplementation(_ref) {\n  var clusterUrl = _ref.clusterUrl,\n      publicKey = _ref.publicKey,\n      signTransaction = _ref.signTransaction,\n      handleTransaction = _ref.handleTransaction,\n      gatekeeperNetworkAddress = _ref.gatekeeperNetworkAddress,\n      stage = _ref.stage;\n  logger_1.default.debug('Connecting to cluster with commitment recent', clusterUrl);\n  var connection = new web3_js_1.Connection(clusterUrl, 'processed');\n  return {\n    addOnGatewayTokenChangeListener: function addOnGatewayTokenChangeListener(gatewayToken, tokenDidChange) {\n      return (0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), function (token) {\n        tokenDidChange({\n          issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n          gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n          owner: token.owner.toBase58(),\n          state: types_1.State[token.state],\n          identifier: token.publicKey.toBase58(),\n          expiryTime: token.expiryTime\n        });\n      });\n    },\n    removeOnGatewayTokenChangeListener: function removeOnGatewayTokenChangeListener(listenerId) {\n      (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n    },\n    findGatewayToken: function () {\n      var _findGatewayToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var onChainToken;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n\n              case 2:\n                onChainToken = _context.sent;\n\n                if (onChainToken) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", undefined);\n\n              case 5:\n                return _context.abrupt(\"return\", {\n                  issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                  gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                  owner: onChainToken.owner.toBase58(),\n                  state: types_1.State[onChainToken.state],\n                  identifier: onChainToken.publicKey.toBase58(),\n                  expiryTime: onChainToken.expiryTime\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function findGatewayToken() {\n        return _findGatewayToken.apply(this, arguments);\n      }\n\n      return findGatewayToken;\n    }(),\n    proveWalletOwnership: function () {\n      var _proveWalletOwnership = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl));\n\n              case 2:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", result.toString('base64'));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function proveWalletOwnership() {\n        return _proveWalletOwnership.apply(this, arguments);\n      }\n\n      return proveWalletOwnership;\n    }(),\n    handleUserSignedTransaction: function () {\n      var _handleUserSignedTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(partiallySignedTx) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!handleTransaction) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                _context3.next = 3;\n                return handleTransaction(createSolanaTransactionFromBase64(partiallySignedTx));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function handleUserSignedTransaction(_x) {\n        return _handleUserSignedTransaction.apply(this, arguments);\n      }\n\n      return handleUserSignedTransaction;\n    }(),\n    chainType: types_1.ChainType.SOLANA,\n    httpConfig: {\n      baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n      queryParams: {\n        network: (0, config_1.urlToCluster)(clusterUrl)\n      }\n    }\n  };\n};\n\nexports.chainImplementation = chainImplementation;\n\nvar useSolanaGateway = function useSolanaGateway() {\n  var _ref2 = (0, GatewayContext_1.useGateway)(),\n      gatewayToken = _ref2.gatewayToken,\n      gatewayTokenTransaction = _ref2.gatewayTokenTransaction;\n\n  var solanaGatewayToken = gatewayToken ? {\n    issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n    gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n    owner: new web3_js_1.PublicKey(gatewayToken.owner),\n    state: gatewayToken.state,\n    publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n    expiryTime: gatewayToken.expiryTime\n  } : undefined;\n  var solanaGatewayTokenTransaction = gatewayTokenTransaction ? createSolanaTransactionFromBase64(gatewayTokenTransaction) : undefined;\n  return Object.assign(Object.assign({}, (0, GatewayContext_1.useGateway)()), {\n    gatewayToken: solanaGatewayToken,\n    gatewayTokenTransaction: solanaGatewayTokenTransaction\n  });\n};\n\nexports.useSolanaGateway = useSolanaGateway;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","useSolanaGateway","chainImplementation","solana_gateway_ts_1","require","web3_js_1","prove_solana_wallet_1","config_1","types_1","GatewayContext_1","logger_1","createSolanaTransactionFromBase64","partiallySignedTx","Transaction","from","Buffer","clusterUrl","publicKey","signTransaction","handleTransaction","gatekeeperNetworkAddress","stage","default","debug","connection","Connection","addOnGatewayTokenChangeListener","gatewayToken","tokenDidChange","onGatewayTokenChange","PublicKey","identifier","token","issuingGatekeeper","toBase58","gatekeeperNetwork","owner","state","State","expiryTime","removeOnGatewayTokenChangeListener","listenerId","removeAccountChangeListener","findGatewayToken","onChainToken","undefined","proveWalletOwnership","prove","makeConfig","result","toString","handleUserSignedTransaction","chainType","ChainType","SOLANA","httpConfig","baseUrl","getGatekeeperEndpoint","queryParams","network","urlToCluster","useGateway","gatewayTokenTransaction","solanaGatewayToken","solanaGatewayTokenTransaction","assign"],"sources":["/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/solana/chainImplementation.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useSolanaGateway = exports.chainImplementation = void 0;\nconst solana_gateway_ts_1 = require(\"@identity.com/solana-gateway-ts\");\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst prove_solana_wallet_1 = require(\"@identity.com/prove-solana-wallet\");\nconst config_1 = require(\"./config\");\nconst types_1 = require(\"../types\");\nconst GatewayContext_1 = require(\"../gateway/GatewayContext\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst createSolanaTransactionFromBase64 = (partiallySignedTx) => web3_js_1.Transaction.from(Buffer.from(partiallySignedTx, 'base64'));\n// eslint-disable-next-line import/prefer-default-export\nconst chainImplementation = ({ clusterUrl, publicKey, signTransaction, handleTransaction, gatekeeperNetworkAddress, stage, }) => {\n    logger_1.default.debug('Connecting to cluster with commitment recent', clusterUrl);\n    const connection = new web3_js_1.Connection(clusterUrl, 'processed');\n    return {\n        addOnGatewayTokenChangeListener: (gatewayToken, tokenDidChange) => {\n            return (0, solana_gateway_ts_1.onGatewayTokenChange)(connection, new web3_js_1.PublicKey(gatewayToken.identifier), (token) => {\n                tokenDidChange({\n                    issuingGatekeeper: token.issuingGatekeeper.toBase58(),\n                    gatekeeperNetworkAddress: token.gatekeeperNetwork.toBase58(),\n                    owner: token.owner.toBase58(),\n                    state: types_1.State[token.state],\n                    identifier: token.publicKey.toBase58(),\n                    expiryTime: token.expiryTime,\n                });\n            });\n        },\n        removeOnGatewayTokenChangeListener: (listenerId) => {\n            (0, solana_gateway_ts_1.removeAccountChangeListener)(connection, listenerId);\n        },\n        findGatewayToken: async () => {\n            const onChainToken = await (0, solana_gateway_ts_1.findGatewayToken)(connection, publicKey, new web3_js_1.PublicKey(gatekeeperNetworkAddress));\n            if (!onChainToken)\n                return undefined;\n            return {\n                issuingGatekeeper: onChainToken.issuingGatekeeper.toBase58(),\n                gatekeeperNetworkAddress: onChainToken.gatekeeperNetwork.toBase58(),\n                owner: onChainToken.owner.toBase58(),\n                state: types_1.State[onChainToken.state],\n                identifier: onChainToken.publicKey.toBase58(),\n                expiryTime: onChainToken.expiryTime,\n            };\n        },\n        proveWalletOwnership: async () => {\n            const result = await (0, prove_solana_wallet_1.prove)(publicKey, signTransaction, (0, config_1.makeConfig)(clusterUrl));\n            return result.toString('base64');\n        },\n        handleUserSignedTransaction: async (partiallySignedTx) => {\n            if (handleTransaction) {\n                await handleTransaction(createSolanaTransactionFromBase64(partiallySignedTx));\n            }\n            // The user can still request broadcastTransaction to be false and then\n            // useGateway to instead retrieve the GatewayTokenTransaction instead of\n            // using a callback. The callback is optional so ignore it if it has not been supplied\n        },\n        chainType: types_1.ChainType.SOLANA,\n        httpConfig: {\n            baseUrl: (0, config_1.getGatekeeperEndpoint)(stage),\n            queryParams: { network: (0, config_1.urlToCluster)(clusterUrl) },\n        },\n    };\n};\nexports.chainImplementation = chainImplementation;\nconst useSolanaGateway = () => {\n    const { gatewayToken, gatewayTokenTransaction } = (0, GatewayContext_1.useGateway)();\n    const solanaGatewayToken = gatewayToken\n        ? {\n            issuingGatekeeper: new web3_js_1.PublicKey(gatewayToken.issuingGatekeeper),\n            gatekeeperNetworkAddress: new web3_js_1.PublicKey(gatewayToken.gatekeeperNetworkAddress),\n            owner: new web3_js_1.PublicKey(gatewayToken.owner),\n            state: gatewayToken.state,\n            publicKey: new web3_js_1.PublicKey(gatewayToken.identifier),\n            expiryTime: gatewayToken.expiryTime,\n        }\n        : undefined;\n    const solanaGatewayTokenTransaction = gatewayTokenTransaction\n        ? createSolanaTransactionFromBase64(gatewayTokenTransaction)\n        : undefined;\n    return Object.assign(Object.assign({}, (0, GatewayContext_1.useGateway)()), { gatewayToken: solanaGatewayToken, gatewayTokenTransaction: solanaGatewayTokenTransaction });\n};\nexports.useSolanaGateway = useSolanaGateway;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}