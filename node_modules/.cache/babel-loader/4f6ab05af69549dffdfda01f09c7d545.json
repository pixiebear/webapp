{"ast":null,"code":"var _toConsumableArray = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _classCallCheck = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\n// hoisted class for cyclic dependency\nvar Range = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Range(range, options) {\n    var _this = this;\n\n    _classCallCheck(this, Range);\n\n    options = parseOptions(options);\n\n    if (range instanceof Range) {\n      if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {\n        return range;\n      } else {\n        return new Range(range.raw, options);\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value;\n      this.set = [[range]];\n      this.format();\n      return this;\n    }\n\n    this.options = options;\n    this.loose = !!options.loose;\n    this.includePrerelease = !!options.includePrerelease; // First, split based on boolean or ||\n\n    this.raw = range;\n    this.set = range.split(/\\s*\\|\\|\\s*/) // map the range to a 2d array of comparators\n    .map(function (range) {\n      return _this.parseRange(range.trim());\n    }) // throw out any comparator lists that are empty\n    // this generally means that it was not a valid range, which is allowed\n    // in loose mode, but will still throw if the WHOLE range is invalid.\n    .filter(function (c) {\n      return c.length;\n    });\n\n    if (!this.set.length) {\n      throw new TypeError(\"Invalid SemVer Range: \".concat(range));\n    } // if we have any that are not the null set, throw out null sets.\n\n\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      var first = this.set[0];\n      this.set = this.set.filter(function (c) {\n        return !isNullSet(c[0]);\n      });\n      if (this.set.length === 0) this.set = [first];else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        var _iterator = _createForOfIteratorHelper(this.set),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var c = _step.value;\n\n            if (c.length === 1 && isAny(c[0])) {\n              this.set = [c];\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n\n    this.format();\n  }\n\n  _createClass(Range, [{\n    key: \"format\",\n    value: function format() {\n      this.range = this.set.map(function (comps) {\n        return comps.join(' ').trim();\n      }).join('||').trim();\n      return this.range;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.range;\n    }\n  }, {\n    key: \"parseRange\",\n    value: function parseRange(range) {\n      var _this2 = this;\n\n      range = range.trim(); // memoize range parsing for performance.\n      // this is a very hot path, and fully deterministic.\n\n      var memoOpts = Object.keys(this.options).join(',');\n      var memoKey = \"parseRange:\".concat(memoOpts, \":\").concat(range);\n      var cached = cache.get(memoKey);\n      if (cached) return cached;\n      var loose = this.options.loose; // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n\n      var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];\n      range = range.replace(hr, hyphenReplace(this.options.includePrerelease));\n      debug('hyphen replace', range); // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n\n      range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);\n      debug('comparator trim', range, re[t.COMPARATORTRIM]); // `~ 1.2.3` => `~1.2.3`\n\n      range = range.replace(re[t.TILDETRIM], tildeTrimReplace); // `^ 1.2.3` => `^1.2.3`\n\n      range = range.replace(re[t.CARETTRIM], caretTrimReplace); // normalize spaces\n\n      range = range.split(/\\s+/).join(' '); // At this point, the range is completely trimmed and\n      // ready to be split into comparators.\n\n      var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n      var rangeList = range.split(' ').map(function (comp) {\n        return parseComparator(comp, _this2.options);\n      }).join(' ').split(/\\s+/) // >=0.0.0 is equivalent to *\n      .map(function (comp) {\n        return replaceGTE0(comp, _this2.options);\n      }) // in loose mode, throw out any that are not valid comparators\n      .filter(this.options.loose ? function (comp) {\n        return !!comp.match(compRe);\n      } : function () {\n        return true;\n      }).map(function (comp) {\n        return new Comparator(comp, _this2.options);\n      }); // if any comparators are the null set, then replace with JUST null set\n      // if more than one comparator, remove any * comparators\n      // also, don't include the same comparator more than once\n\n      var l = rangeList.length;\n      var rangeMap = new Map();\n\n      var _iterator2 = _createForOfIteratorHelper(rangeList),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var comp = _step2.value;\n          if (isNullSet(comp)) return [comp];\n          rangeMap.set(comp.value, comp);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      if (rangeMap.size > 1 && rangeMap.has('')) rangeMap.delete('');\n\n      var result = _toConsumableArray(rangeMap.values());\n\n      cache.set(memoKey, result);\n      return result;\n    }\n  }, {\n    key: \"intersects\",\n    value: function intersects(range, options) {\n      if (!(range instanceof Range)) {\n        throw new TypeError('a Range is required');\n      }\n\n      return this.set.some(function (thisComparators) {\n        return isSatisfiable(thisComparators, options) && range.set.some(function (rangeComparators) {\n          return isSatisfiable(rangeComparators, options) && thisComparators.every(function (thisComparator) {\n            return rangeComparators.every(function (rangeComparator) {\n              return thisComparator.intersects(rangeComparator, options);\n            });\n          });\n        });\n      });\n    } // if ANY of the sets match ALL of its comparators, then pass\n\n  }, {\n    key: \"test\",\n    value: function test(version) {\n      if (!version) {\n        return false;\n      }\n\n      if (typeof version === 'string') {\n        try {\n          version = new SemVer(version, this.options);\n        } catch (er) {\n          return false;\n        }\n      }\n\n      for (var i = 0; i < this.set.length; i++) {\n        if (testSet(this.set[i], version, this.options)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return Range;\n}();\n\nmodule.exports = Range;\n\nvar LRU = require('lru-cache');\n\nvar cache = new LRU({\n  max: 1000\n});\n\nvar parseOptions = require('../internal/parse-options');\n\nvar Comparator = require('./comparator');\n\nvar debug = require('../internal/debug');\n\nvar SemVer = require('./semver');\n\nvar _require = require('../internal/re'),\n    re = _require.re,\n    t = _require.t,\n    comparatorTrimReplace = _require.comparatorTrimReplace,\n    tildeTrimReplace = _require.tildeTrimReplace,\n    caretTrimReplace = _require.caretTrimReplace;\n\nvar isNullSet = function isNullSet(c) {\n  return c.value === '<0.0.0-0';\n};\n\nvar isAny = function isAny(c) {\n  return c.value === '';\n}; // take a set of comparators and determine whether there\n// exists a version which can satisfy it\n\n\nvar isSatisfiable = function isSatisfiable(comparators, options) {\n  var result = true;\n  var remainingComparators = comparators.slice();\n  var testComparator = remainingComparators.pop();\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every(function (otherComparator) {\n      return testComparator.intersects(otherComparator, options);\n    });\n    testComparator = remainingComparators.pop();\n  }\n\n  return result;\n}; // comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\n\n\nvar parseComparator = function parseComparator(comp, options) {\n  debug('comp', comp, options);\n  comp = replaceCarets(comp, options);\n  debug('caret', comp);\n  comp = replaceTildes(comp, options);\n  debug('tildes', comp);\n  comp = replaceXRanges(comp, options);\n  debug('xrange', comp);\n  comp = replaceStars(comp, options);\n  debug('stars', comp);\n  return comp;\n};\n\nvar isX = function isX(id) {\n  return !id || id.toLowerCase() === 'x' || id === '*';\n}; // ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n\n\nvar replaceTildes = function replaceTildes(comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceTilde(comp, options);\n  }).join(' ');\n};\n\nvar replaceTilde = function replaceTilde(comp, options) {\n  var r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('tilde', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = \">=\".concat(M, \".0.0 <\").concat(+M + 1, \".0.0-0\");\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = \">=\".concat(M, \".\").concat(m, \".0 <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    } else if (pr) {\n      debug('replaceTilde pr', pr);\n      ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    }\n\n    debug('tilde return', ret);\n    return ret;\n  });\n}; // ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\n\n\nvar replaceCarets = function replaceCarets(comp, options) {\n  return comp.trim().split(/\\s+/).map(function (comp) {\n    return replaceCaret(comp, options);\n  }).join(' ');\n};\n\nvar replaceCaret = function replaceCaret(comp, options) {\n  debug('caret', comp, options);\n  var r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];\n  var z = options.includePrerelease ? '-0' : '';\n  return comp.replace(r, function (_, M, m, p, pr) {\n    debug('caret', comp, _, M, m, p, pr);\n    var ret;\n\n    if (isX(M)) {\n      ret = '';\n    } else if (isX(m)) {\n      ret = \">=\".concat(M, \".0.0\").concat(z, \" <\").concat(+M + 1, \".0.0-0\");\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = \">=\".concat(M, \".\").concat(m, \".0\").concat(z, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n      } else {\n        ret = \">=\".concat(M, \".\").concat(m, \".0\").concat(z, \" <\").concat(+M + 1, \".0.0-0\");\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr);\n\n      if (M === '0') {\n        if (m === '0') {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(M, \".\").concat(m, \".\").concat(+p + 1, \"-0\");\n        } else {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n        }\n      } else {\n        ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \"-\").concat(pr, \" <\").concat(+M + 1, \".0.0-0\");\n      }\n    } else {\n      debug('no pr');\n\n      if (M === '0') {\n        if (m === '0') {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p).concat(z, \" <\").concat(M, \".\").concat(m, \".\").concat(+p + 1, \"-0\");\n        } else {\n          ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p).concat(z, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n        }\n      } else {\n        ret = \">=\".concat(M, \".\").concat(m, \".\").concat(p, \" <\").concat(+M + 1, \".0.0-0\");\n      }\n    }\n\n    debug('caret return', ret);\n    return ret;\n  });\n};\n\nvar replaceXRanges = function replaceXRanges(comp, options) {\n  debug('replaceXRanges', comp, options);\n  return comp.split(/\\s+/).map(function (comp) {\n    return replaceXRange(comp, options);\n  }).join(' ');\n};\n\nvar replaceXRange = function replaceXRange(comp, options) {\n  comp = comp.trim();\n  var r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];\n  return comp.replace(r, function (ret, gtlt, M, m, p, pr) {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n    var xM = isX(M);\n    var xm = xM || isX(m);\n    var xp = xm || isX(p);\n    var anyX = xp;\n\n    if (gtlt === '=' && anyX) {\n      gtlt = '';\n    } // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n\n\n    pr = options.includePrerelease ? '-0' : '';\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0';\n      } else {\n        // nothing is forbidden\n        ret = '*';\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0;\n      }\n\n      p = 0;\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>=';\n\n        if (xm) {\n          M = +M + 1;\n          m = 0;\n          p = 0;\n        } else {\n          m = +m + 1;\n          p = 0;\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<';\n\n        if (xm) {\n          M = +M + 1;\n        } else {\n          m = +m + 1;\n        }\n      }\n\n      if (gtlt === '<') pr = '-0';\n      ret = \"\".concat(gtlt + M, \".\").concat(m, \".\").concat(p).concat(pr);\n    } else if (xm) {\n      ret = \">=\".concat(M, \".0.0\").concat(pr, \" <\").concat(+M + 1, \".0.0-0\");\n    } else if (xp) {\n      ret = \">=\".concat(M, \".\").concat(m, \".0\").concat(pr, \" <\").concat(M, \".\").concat(+m + 1, \".0-0\");\n    }\n\n    debug('xRange return', ret);\n    return ret;\n  });\n}; // Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\n\n\nvar replaceStars = function replaceStars(comp, options) {\n  debug('replaceStars', comp, options); // Looseness is ignored here.  star is always as loose as it gets!\n\n  return comp.trim().replace(re[t.STAR], '');\n};\n\nvar replaceGTE0 = function replaceGTE0(comp, options) {\n  debug('replaceGTE0', comp, options);\n  return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '');\n}; // This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\n\n\nvar hyphenReplace = function hyphenReplace(incPr) {\n  return function ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {\n    if (isX(fM)) {\n      from = '';\n    } else if (isX(fm)) {\n      from = \">=\".concat(fM, \".0.0\").concat(incPr ? '-0' : '');\n    } else if (isX(fp)) {\n      from = \">=\".concat(fM, \".\").concat(fm, \".0\").concat(incPr ? '-0' : '');\n    } else if (fpr) {\n      from = \">=\".concat(from);\n    } else {\n      from = \">=\".concat(from).concat(incPr ? '-0' : '');\n    }\n\n    if (isX(tM)) {\n      to = '';\n    } else if (isX(tm)) {\n      to = \"<\".concat(+tM + 1, \".0.0-0\");\n    } else if (isX(tp)) {\n      to = \"<\".concat(tM, \".\").concat(+tm + 1, \".0-0\");\n    } else if (tpr) {\n      to = \"<=\".concat(tM, \".\").concat(tm, \".\").concat(tp, \"-\").concat(tpr);\n    } else if (incPr) {\n      to = \"<\".concat(tM, \".\").concat(tm, \".\").concat(+tp + 1, \"-0\");\n    } else {\n      to = \"<=\".concat(to);\n    }\n\n    return \"\".concat(from, \" \").concat(to).trim();\n  };\n};\n\nvar testSet = function testSet(set, version, options) {\n  for (var i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false;\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (var _i = 0; _i < set.length; _i++) {\n      debug(set[_i].semver);\n\n      if (set[_i].semver === Comparator.ANY) {\n        continue;\n      }\n\n      if (set[_i].semver.prerelease.length > 0) {\n        var allowed = set[_i].semver;\n\n        if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {\n          return true;\n        }\n      }\n    } // Version has a -pre, but it's not one of the ones we like.\n\n\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"names":["Range","range","options","parseOptions","loose","includePrerelease","raw","Comparator","value","set","format","split","map","parseRange","trim","filter","c","length","TypeError","first","isNullSet","isAny","comps","join","memoOpts","Object","keys","memoKey","cached","cache","get","hr","re","t","HYPHENRANGELOOSE","HYPHENRANGE","replace","hyphenReplace","debug","COMPARATORTRIM","comparatorTrimReplace","TILDETRIM","tildeTrimReplace","CARETTRIM","caretTrimReplace","compRe","COMPARATORLOOSE","COMPARATOR","rangeList","comp","parseComparator","replaceGTE0","match","l","rangeMap","Map","size","has","delete","result","values","some","thisComparators","isSatisfiable","rangeComparators","every","thisComparator","rangeComparator","intersects","version","SemVer","er","i","testSet","module","exports","LRU","require","max","comparators","remainingComparators","slice","testComparator","pop","otherComparator","replaceCarets","replaceTildes","replaceXRanges","replaceStars","isX","id","toLowerCase","replaceTilde","r","TILDELOOSE","TILDE","_","M","m","p","pr","ret","replaceCaret","CARETLOOSE","CARET","z","replaceXRange","XRANGELOOSE","XRANGE","gtlt","xM","xm","xp","anyX","STAR","GTE0PRE","GTE0","incPr","$0","from","fM","fm","fp","fpr","fb","to","tM","tm","tp","tpr","tb","test","prerelease","semver","ANY","allowed","major","minor","patch"],"sources":["/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@ledgerhq/devices/node_modules/semver/classes/range.js"],"sourcesContent":["// hoisted class for cyclic dependency\nclass Range {\n  constructor (range, options) {\n    options = parseOptions(options)\n\n    if (range instanceof Range) {\n      if (\n        range.loose === !!options.loose &&\n        range.includePrerelease === !!options.includePrerelease\n      ) {\n        return range\n      } else {\n        return new Range(range.raw, options)\n      }\n    }\n\n    if (range instanceof Comparator) {\n      // just put it in the set and return\n      this.raw = range.value\n      this.set = [[range]]\n      this.format()\n      return this\n    }\n\n    this.options = options\n    this.loose = !!options.loose\n    this.includePrerelease = !!options.includePrerelease\n\n    // First, split based on boolean or ||\n    this.raw = range\n    this.set = range\n      .split(/\\s*\\|\\|\\s*/)\n      // map the range to a 2d array of comparators\n      .map(range => this.parseRange(range.trim()))\n      // throw out any comparator lists that are empty\n      // this generally means that it was not a valid range, which is allowed\n      // in loose mode, but will still throw if the WHOLE range is invalid.\n      .filter(c => c.length)\n\n    if (!this.set.length) {\n      throw new TypeError(`Invalid SemVer Range: ${range}`)\n    }\n\n    // if we have any that are not the null set, throw out null sets.\n    if (this.set.length > 1) {\n      // keep the first one, in case they're all null sets\n      const first = this.set[0]\n      this.set = this.set.filter(c => !isNullSet(c[0]))\n      if (this.set.length === 0)\n        this.set = [first]\n      else if (this.set.length > 1) {\n        // if we have any that are *, then the range is just *\n        for (const c of this.set) {\n          if (c.length === 1 && isAny(c[0])) {\n            this.set = [c]\n            break\n          }\n        }\n      }\n    }\n\n    this.format()\n  }\n\n  format () {\n    this.range = this.set\n      .map((comps) => {\n        return comps.join(' ').trim()\n      })\n      .join('||')\n      .trim()\n    return this.range\n  }\n\n  toString () {\n    return this.range\n  }\n\n  parseRange (range) {\n    range = range.trim()\n\n    // memoize range parsing for performance.\n    // this is a very hot path, and fully deterministic.\n    const memoOpts = Object.keys(this.options).join(',')\n    const memoKey = `parseRange:${memoOpts}:${range}`\n    const cached = cache.get(memoKey)\n    if (cached)\n      return cached\n\n    const loose = this.options.loose\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]\n    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))\n    debug('hyphen replace', range)\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)\n    debug('comparator trim', range, re[t.COMPARATORTRIM])\n\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)\n\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(re[t.CARETTRIM], caretTrimReplace)\n\n    // normalize spaces\n    range = range.split(/\\s+/).join(' ')\n\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n\n    const compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]\n    const rangeList = range\n      .split(' ')\n      .map(comp => parseComparator(comp, this.options))\n      .join(' ')\n      .split(/\\s+/)\n      // >=0.0.0 is equivalent to *\n      .map(comp => replaceGTE0(comp, this.options))\n      // in loose mode, throw out any that are not valid comparators\n      .filter(this.options.loose ? comp => !!comp.match(compRe) : () => true)\n      .map(comp => new Comparator(comp, this.options))\n\n    // if any comparators are the null set, then replace with JUST null set\n    // if more than one comparator, remove any * comparators\n    // also, don't include the same comparator more than once\n    const l = rangeList.length\n    const rangeMap = new Map()\n    for (const comp of rangeList) {\n      if (isNullSet(comp))\n        return [comp]\n      rangeMap.set(comp.value, comp)\n    }\n    if (rangeMap.size > 1 && rangeMap.has(''))\n      rangeMap.delete('')\n\n    const result = [...rangeMap.values()]\n    cache.set(memoKey, result)\n    return result\n  }\n\n  intersects (range, options) {\n    if (!(range instanceof Range)) {\n      throw new TypeError('a Range is required')\n    }\n\n    return this.set.some((thisComparators) => {\n      return (\n        isSatisfiable(thisComparators, options) &&\n        range.set.some((rangeComparators) => {\n          return (\n            isSatisfiable(rangeComparators, options) &&\n            thisComparators.every((thisComparator) => {\n              return rangeComparators.every((rangeComparator) => {\n                return thisComparator.intersects(rangeComparator, options)\n              })\n            })\n          )\n        })\n      )\n    })\n  }\n\n  // if ANY of the sets match ALL of its comparators, then pass\n  test (version) {\n    if (!version) {\n      return false\n    }\n\n    if (typeof version === 'string') {\n      try {\n        version = new SemVer(version, this.options)\n      } catch (er) {\n        return false\n      }\n    }\n\n    for (let i = 0; i < this.set.length; i++) {\n      if (testSet(this.set[i], version, this.options)) {\n        return true\n      }\n    }\n    return false\n  }\n}\nmodule.exports = Range\n\nconst LRU = require('lru-cache')\nconst cache = new LRU({ max: 1000 })\n\nconst parseOptions = require('../internal/parse-options')\nconst Comparator = require('./comparator')\nconst debug = require('../internal/debug')\nconst SemVer = require('./semver')\nconst {\n  re,\n  t,\n  comparatorTrimReplace,\n  tildeTrimReplace,\n  caretTrimReplace\n} = require('../internal/re')\n\nconst isNullSet = c => c.value === '<0.0.0-0'\nconst isAny = c => c.value === ''\n\n// take a set of comparators and determine whether there\n// exists a version which can satisfy it\nconst isSatisfiable = (comparators, options) => {\n  let result = true\n  const remainingComparators = comparators.slice()\n  let testComparator = remainingComparators.pop()\n\n  while (result && remainingComparators.length) {\n    result = remainingComparators.every((otherComparator) => {\n      return testComparator.intersects(otherComparator, options)\n    })\n\n    testComparator = remainingComparators.pop()\n  }\n\n  return result\n}\n\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nconst parseComparator = (comp, options) => {\n  debug('comp', comp, options)\n  comp = replaceCarets(comp, options)\n  debug('caret', comp)\n  comp = replaceTildes(comp, options)\n  debug('tildes', comp)\n  comp = replaceXRanges(comp, options)\n  debug('xrange', comp)\n  comp = replaceStars(comp, options)\n  debug('stars', comp)\n  return comp\n}\n\nconst isX = id => !id || id.toLowerCase() === 'x' || id === '*'\n\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\nconst replaceTildes = (comp, options) =>\n  comp.trim().split(/\\s+/).map((comp) => {\n    return replaceTilde(comp, options)\n  }).join(' ')\n\nconst replaceTilde = (comp, options) => {\n  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('tilde', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      // ~1.2 == >=1.2.0 <1.3.0-0\n      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`\n    } else if (pr) {\n      debug('replaceTilde pr', pr)\n      ret = `>=${M}.${m}.${p}-${pr\n      } <${M}.${+m + 1}.0-0`\n    } else {\n      // ~1.2.3 == >=1.2.3 <1.3.0-0\n      ret = `>=${M}.${m}.${p\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('tilde return', ret)\n    return ret\n  })\n}\n\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n// ^1.2.3 --> >=1.2.3 <2.0.0-0\n// ^1.2.0 --> >=1.2.0 <2.0.0-0\nconst replaceCarets = (comp, options) =>\n  comp.trim().split(/\\s+/).map((comp) => {\n    return replaceCaret(comp, options)\n  }).join(' ')\n\nconst replaceCaret = (comp, options) => {\n  debug('caret', comp, options)\n  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]\n  const z = options.includePrerelease ? '-0' : ''\n  return comp.replace(r, (_, M, m, p, pr) => {\n    debug('caret', comp, _, M, m, p, pr)\n    let ret\n\n    if (isX(M)) {\n      ret = ''\n    } else if (isX(m)) {\n      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`\n    } else if (isX(p)) {\n      if (M === '0') {\n        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`\n      } else {\n        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`\n      }\n    } else if (pr) {\n      debug('replaceCaret pr', pr)\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p}-${pr\n          } <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p}-${pr\n        } <${+M + 1}.0.0-0`\n      }\n    } else {\n      debug('no pr')\n      if (M === '0') {\n        if (m === '0') {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${m}.${+p + 1}-0`\n        } else {\n          ret = `>=${M}.${m}.${p\n          }${z} <${M}.${+m + 1}.0-0`\n        }\n      } else {\n        ret = `>=${M}.${m}.${p\n        } <${+M + 1}.0.0-0`\n      }\n    }\n\n    debug('caret return', ret)\n    return ret\n  })\n}\n\nconst replaceXRanges = (comp, options) => {\n  debug('replaceXRanges', comp, options)\n  return comp.split(/\\s+/).map((comp) => {\n    return replaceXRange(comp, options)\n  }).join(' ')\n}\n\nconst replaceXRange = (comp, options) => {\n  comp = comp.trim()\n  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]\n  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n    debug('xRange', comp, ret, gtlt, M, m, p, pr)\n    const xM = isX(M)\n    const xm = xM || isX(m)\n    const xp = xm || isX(p)\n    const anyX = xp\n\n    if (gtlt === '=' && anyX) {\n      gtlt = ''\n    }\n\n    // if we're including prereleases in the match, then we need\n    // to fix this to -0, the lowest possible prerelease value\n    pr = options.includePrerelease ? '-0' : ''\n\n    if (xM) {\n      if (gtlt === '>' || gtlt === '<') {\n        // nothing is allowed\n        ret = '<0.0.0-0'\n      } else {\n        // nothing is forbidden\n        ret = '*'\n      }\n    } else if (gtlt && anyX) {\n      // we know patch is an x, because we have any x at all.\n      // replace X with 0\n      if (xm) {\n        m = 0\n      }\n      p = 0\n\n      if (gtlt === '>') {\n        // >1 => >=2.0.0\n        // >1.2 => >=1.3.0\n        gtlt = '>='\n        if (xm) {\n          M = +M + 1\n          m = 0\n          p = 0\n        } else {\n          m = +m + 1\n          p = 0\n        }\n      } else if (gtlt === '<=') {\n        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n        gtlt = '<'\n        if (xm) {\n          M = +M + 1\n        } else {\n          m = +m + 1\n        }\n      }\n\n      if (gtlt === '<')\n        pr = '-0'\n\n      ret = `${gtlt + M}.${m}.${p}${pr}`\n    } else if (xm) {\n      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`\n    } else if (xp) {\n      ret = `>=${M}.${m}.0${pr\n      } <${M}.${+m + 1}.0-0`\n    }\n\n    debug('xRange return', ret)\n\n    return ret\n  })\n}\n\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nconst replaceStars = (comp, options) => {\n  debug('replaceStars', comp, options)\n  // Looseness is ignored here.  star is always as loose as it gets!\n  return comp.trim().replace(re[t.STAR], '')\n}\n\nconst replaceGTE0 = (comp, options) => {\n  debug('replaceGTE0', comp, options)\n  return comp.trim()\n    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n}\n\n// This function is passed to string.replace(re[t.HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\nconst hyphenReplace = incPr => ($0,\n  from, fM, fm, fp, fpr, fb,\n  to, tM, tm, tp, tpr, tb) => {\n  if (isX(fM)) {\n    from = ''\n  } else if (isX(fm)) {\n    from = `>=${fM}.0.0${incPr ? '-0' : ''}`\n  } else if (isX(fp)) {\n    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`\n  } else if (fpr) {\n    from = `>=${from}`\n  } else {\n    from = `>=${from}${incPr ? '-0' : ''}`\n  }\n\n  if (isX(tM)) {\n    to = ''\n  } else if (isX(tm)) {\n    to = `<${+tM + 1}.0.0-0`\n  } else if (isX(tp)) {\n    to = `<${tM}.${+tm + 1}.0-0`\n  } else if (tpr) {\n    to = `<=${tM}.${tm}.${tp}-${tpr}`\n  } else if (incPr) {\n    to = `<${tM}.${tm}.${+tp + 1}-0`\n  } else {\n    to = `<=${to}`\n  }\n\n  return (`${from} ${to}`).trim()\n}\n\nconst testSet = (set, version, options) => {\n  for (let i = 0; i < set.length; i++) {\n    if (!set[i].test(version)) {\n      return false\n    }\n  }\n\n  if (version.prerelease.length && !options.includePrerelease) {\n    // Find the set of versions that are allowed to have prereleases\n    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n    // That should allow `1.2.3-pr.2` to pass.\n    // However, `1.2.4-alpha.notready` should NOT be allowed,\n    // even though it's within the range set by the comparators.\n    for (let i = 0; i < set.length; i++) {\n      debug(set[i].semver)\n      if (set[i].semver === Comparator.ANY) {\n        continue\n      }\n\n      if (set[i].semver.prerelease.length > 0) {\n        const allowed = set[i].semver\n        if (allowed.major === version.major &&\n            allowed.minor === version.minor &&\n            allowed.patch === version.patch) {\n          return true\n        }\n      }\n    }\n\n    // Version has a -pre, but it's not one of the ones we like.\n    return false\n  }\n\n  return true\n}\n"],"mappings":";;;;;;;;AAAA;IACMA,K;;;EACJ,eAAaC,KAAb,EAAoBC,OAApB,EAA6B;IAAA;;IAAA;;IAC3BA,OAAO,GAAGC,YAAY,CAACD,OAAD,CAAtB;;IAEA,IAAID,KAAK,YAAYD,KAArB,EAA4B;MAC1B,IACEC,KAAK,CAACG,KAAN,KAAgB,CAAC,CAACF,OAAO,CAACE,KAA1B,IACAH,KAAK,CAACI,iBAAN,KAA4B,CAAC,CAACH,OAAO,CAACG,iBAFxC,EAGE;QACA,OAAOJ,KAAP;MACD,CALD,MAKO;QACL,OAAO,IAAID,KAAJ,CAAUC,KAAK,CAACK,GAAhB,EAAqBJ,OAArB,CAAP;MACD;IACF;;IAED,IAAID,KAAK,YAAYM,UAArB,EAAiC;MAC/B;MACA,KAAKD,GAAL,GAAWL,KAAK,CAACO,KAAjB;MACA,KAAKC,GAAL,GAAW,CAAC,CAACR,KAAD,CAAD,CAAX;MACA,KAAKS,MAAL;MACA,OAAO,IAAP;IACD;;IAED,KAAKR,OAAL,GAAeA,OAAf;IACA,KAAKE,KAAL,GAAa,CAAC,CAACF,OAAO,CAACE,KAAvB;IACA,KAAKC,iBAAL,GAAyB,CAAC,CAACH,OAAO,CAACG,iBAAnC,CAxB2B,CA0B3B;;IACA,KAAKC,GAAL,GAAWL,KAAX;IACA,KAAKQ,GAAL,GAAWR,KAAK,CACbU,KADQ,CACF,YADE,EAET;IAFS,CAGRC,GAHQ,CAGJ,UAAAX,KAAK;MAAA,OAAI,KAAI,CAACY,UAAL,CAAgBZ,KAAK,CAACa,IAAN,EAAhB,CAAJ;IAAA,CAHD,EAIT;IACA;IACA;IANS,CAORC,MAPQ,CAOD,UAAAC,CAAC;MAAA,OAAIA,CAAC,CAACC,MAAN;IAAA,CAPA,CAAX;;IASA,IAAI,CAAC,KAAKR,GAAL,CAASQ,MAAd,EAAsB;MACpB,MAAM,IAAIC,SAAJ,iCAAuCjB,KAAvC,EAAN;IACD,CAvC0B,CAyC3B;;;IACA,IAAI,KAAKQ,GAAL,CAASQ,MAAT,GAAkB,CAAtB,EAAyB;MACvB;MACA,IAAME,KAAK,GAAG,KAAKV,GAAL,CAAS,CAAT,CAAd;MACA,KAAKA,GAAL,GAAW,KAAKA,GAAL,CAASM,MAAT,CAAgB,UAAAC,CAAC;QAAA,OAAI,CAACI,SAAS,CAACJ,CAAC,CAAC,CAAD,CAAF,CAAd;MAAA,CAAjB,CAAX;MACA,IAAI,KAAKP,GAAL,CAASQ,MAAT,KAAoB,CAAxB,EACE,KAAKR,GAAL,GAAW,CAACU,KAAD,CAAX,CADF,KAEK,IAAI,KAAKV,GAAL,CAASQ,MAAT,GAAkB,CAAtB,EAAyB;QAC5B;QAD4B,2CAEZ,KAAKR,GAFO;QAAA;;QAAA;UAE5B,oDAA0B;YAAA,IAAfO,CAAe;;YACxB,IAAIA,CAAC,CAACC,MAAF,KAAa,CAAb,IAAkBI,KAAK,CAACL,CAAC,CAAC,CAAD,CAAF,CAA3B,EAAmC;cACjC,KAAKP,GAAL,GAAW,CAACO,CAAD,CAAX;cACA;YACD;UACF;QAP2B;UAAA;QAAA;UAAA;QAAA;MAQ7B;IACF;;IAED,KAAKN,MAAL;EACD;;;;WAED,kBAAU;MACR,KAAKT,KAAL,GAAa,KAAKQ,GAAL,CACVG,GADU,CACN,UAACU,KAAD,EAAW;QACd,OAAOA,KAAK,CAACC,IAAN,CAAW,GAAX,EAAgBT,IAAhB,EAAP;MACD,CAHU,EAIVS,IAJU,CAIL,IAJK,EAKVT,IALU,EAAb;MAMA,OAAO,KAAKb,KAAZ;IACD;;;WAED,oBAAY;MACV,OAAO,KAAKA,KAAZ;IACD;;;WAED,oBAAYA,KAAZ,EAAmB;MAAA;;MACjBA,KAAK,GAAGA,KAAK,CAACa,IAAN,EAAR,CADiB,CAGjB;MACA;;MACA,IAAMU,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKxB,OAAjB,EAA0BqB,IAA1B,CAA+B,GAA/B,CAAjB;MACA,IAAMI,OAAO,wBAAiBH,QAAjB,cAA6BvB,KAA7B,CAAb;MACA,IAAM2B,MAAM,GAAGC,KAAK,CAACC,GAAN,CAAUH,OAAV,CAAf;MACA,IAAIC,MAAJ,EACE,OAAOA,MAAP;MAEF,IAAMxB,KAAK,GAAG,KAAKF,OAAL,CAAaE,KAA3B,CAXiB,CAYjB;;MACA,IAAM2B,EAAE,GAAG3B,KAAK,GAAG4B,EAAE,CAACC,CAAC,CAACC,gBAAH,CAAL,GAA4BF,EAAE,CAACC,CAAC,CAACE,WAAH,CAA9C;MACAlC,KAAK,GAAGA,KAAK,CAACmC,OAAN,CAAcL,EAAd,EAAkBM,aAAa,CAAC,KAAKnC,OAAL,CAAaG,iBAAd,CAA/B,CAAR;MACAiC,KAAK,CAAC,gBAAD,EAAmBrC,KAAnB,CAAL,CAfiB,CAgBjB;;MACAA,KAAK,GAAGA,KAAK,CAACmC,OAAN,CAAcJ,EAAE,CAACC,CAAC,CAACM,cAAH,CAAhB,EAAoCC,qBAApC,CAAR;MACAF,KAAK,CAAC,iBAAD,EAAoBrC,KAApB,EAA2B+B,EAAE,CAACC,CAAC,CAACM,cAAH,CAA7B,CAAL,CAlBiB,CAoBjB;;MACAtC,KAAK,GAAGA,KAAK,CAACmC,OAAN,CAAcJ,EAAE,CAACC,CAAC,CAACQ,SAAH,CAAhB,EAA+BC,gBAA/B,CAAR,CArBiB,CAuBjB;;MACAzC,KAAK,GAAGA,KAAK,CAACmC,OAAN,CAAcJ,EAAE,CAACC,CAAC,CAACU,SAAH,CAAhB,EAA+BC,gBAA/B,CAAR,CAxBiB,CA0BjB;;MACA3C,KAAK,GAAGA,KAAK,CAACU,KAAN,CAAY,KAAZ,EAAmBY,IAAnB,CAAwB,GAAxB,CAAR,CA3BiB,CA6BjB;MACA;;MAEA,IAAMsB,MAAM,GAAGzC,KAAK,GAAG4B,EAAE,CAACC,CAAC,CAACa,eAAH,CAAL,GAA2Bd,EAAE,CAACC,CAAC,CAACc,UAAH,CAAjD;MACA,IAAMC,SAAS,GAAG/C,KAAK,CACpBU,KADe,CACT,GADS,EAEfC,GAFe,CAEX,UAAAqC,IAAI;QAAA,OAAIC,eAAe,CAACD,IAAD,EAAO,MAAI,CAAC/C,OAAZ,CAAnB;MAAA,CAFO,EAGfqB,IAHe,CAGV,GAHU,EAIfZ,KAJe,CAIT,KAJS,EAKhB;MALgB,CAMfC,GANe,CAMX,UAAAqC,IAAI;QAAA,OAAIE,WAAW,CAACF,IAAD,EAAO,MAAI,CAAC/C,OAAZ,CAAf;MAAA,CANO,EAOhB;MAPgB,CAQfa,MARe,CAQR,KAAKb,OAAL,CAAaE,KAAb,GAAqB,UAAA6C,IAAI;QAAA,OAAI,CAAC,CAACA,IAAI,CAACG,KAAL,CAAWP,MAAX,CAAN;MAAA,CAAzB,GAAoD;QAAA,OAAM,IAAN;MAAA,CAR5C,EASfjC,GATe,CASX,UAAAqC,IAAI;QAAA,OAAI,IAAI1C,UAAJ,CAAe0C,IAAf,EAAqB,MAAI,CAAC/C,OAA1B,CAAJ;MAAA,CATO,CAAlB,CAjCiB,CA4CjB;MACA;MACA;;MACA,IAAMmD,CAAC,GAAGL,SAAS,CAAC/B,MAApB;MACA,IAAMqC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;;MAhDiB,4CAiDEP,SAjDF;MAAA;;MAAA;QAiDjB,uDAA8B;UAAA,IAAnBC,IAAmB;UAC5B,IAAI7B,SAAS,CAAC6B,IAAD,CAAb,EACE,OAAO,CAACA,IAAD,CAAP;UACFK,QAAQ,CAAC7C,GAAT,CAAawC,IAAI,CAACzC,KAAlB,EAAyByC,IAAzB;QACD;MArDgB;QAAA;MAAA;QAAA;MAAA;;MAsDjB,IAAIK,QAAQ,CAACE,IAAT,GAAgB,CAAhB,IAAqBF,QAAQ,CAACG,GAAT,CAAa,EAAb,CAAzB,EACEH,QAAQ,CAACI,MAAT,CAAgB,EAAhB;;MAEF,IAAMC,MAAM,sBAAOL,QAAQ,CAACM,MAAT,EAAP,CAAZ;;MACA/B,KAAK,CAACpB,GAAN,CAAUkB,OAAV,EAAmBgC,MAAnB;MACA,OAAOA,MAAP;IACD;;;WAED,oBAAY1D,KAAZ,EAAmBC,OAAnB,EAA4B;MAC1B,IAAI,EAAED,KAAK,YAAYD,KAAnB,CAAJ,EAA+B;QAC7B,MAAM,IAAIkB,SAAJ,CAAc,qBAAd,CAAN;MACD;;MAED,OAAO,KAAKT,GAAL,CAASoD,IAAT,CAAc,UAACC,eAAD,EAAqB;QACxC,OACEC,aAAa,CAACD,eAAD,EAAkB5D,OAAlB,CAAb,IACAD,KAAK,CAACQ,GAAN,CAAUoD,IAAV,CAAe,UAACG,gBAAD,EAAsB;UACnC,OACED,aAAa,CAACC,gBAAD,EAAmB9D,OAAnB,CAAb,IACA4D,eAAe,CAACG,KAAhB,CAAsB,UAACC,cAAD,EAAoB;YACxC,OAAOF,gBAAgB,CAACC,KAAjB,CAAuB,UAACE,eAAD,EAAqB;cACjD,OAAOD,cAAc,CAACE,UAAf,CAA0BD,eAA1B,EAA2CjE,OAA3C,CAAP;YACD,CAFM,CAAP;UAGD,CAJD,CAFF;QAQD,CATD,CAFF;MAaD,CAdM,CAAP;IAeD,C,CAED;;;;WACA,cAAMmE,OAAN,EAAe;MACb,IAAI,CAACA,OAAL,EAAc;QACZ,OAAO,KAAP;MACD;;MAED,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC;QAC/B,IAAI;UACFA,OAAO,GAAG,IAAIC,MAAJ,CAAWD,OAAX,EAAoB,KAAKnE,OAAzB,CAAV;QACD,CAFD,CAEE,OAAOqE,EAAP,EAAW;UACX,OAAO,KAAP;QACD;MACF;;MAED,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK/D,GAAL,CAASQ,MAA7B,EAAqCuD,CAAC,EAAtC,EAA0C;QACxC,IAAIC,OAAO,CAAC,KAAKhE,GAAL,CAAS+D,CAAT,CAAD,EAAcH,OAAd,EAAuB,KAAKnE,OAA5B,CAAX,EAAiD;UAC/C,OAAO,IAAP;QACD;MACF;;MACD,OAAO,KAAP;IACD;;;;;;AAEHwE,MAAM,CAACC,OAAP,GAAiB3E,KAAjB;;AAEA,IAAM4E,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB;;AACA,IAAMhD,KAAK,GAAG,IAAI+C,GAAJ,CAAQ;EAAEE,GAAG,EAAE;AAAP,CAAR,CAAd;;AAEA,IAAM3E,YAAY,GAAG0E,OAAO,CAAC,2BAAD,CAA5B;;AACA,IAAMtE,UAAU,GAAGsE,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAMvC,KAAK,GAAGuC,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAMP,MAAM,GAAGO,OAAO,CAAC,UAAD,CAAtB;;AACA,eAMIA,OAAO,CAAC,gBAAD,CANX;AAAA,IACE7C,EADF,YACEA,EADF;AAAA,IAEEC,CAFF,YAEEA,CAFF;AAAA,IAGEO,qBAHF,YAGEA,qBAHF;AAAA,IAIEE,gBAJF,YAIEA,gBAJF;AAAA,IAKEE,gBALF,YAKEA,gBALF;;AAQA,IAAMxB,SAAS,GAAG,SAAZA,SAAY,CAAAJ,CAAC;EAAA,OAAIA,CAAC,CAACR,KAAF,KAAY,UAAhB;AAAA,CAAnB;;AACA,IAAMa,KAAK,GAAG,SAARA,KAAQ,CAAAL,CAAC;EAAA,OAAIA,CAAC,CAACR,KAAF,KAAY,EAAhB;AAAA,CAAf,C,CAEA;AACA;;;AACA,IAAMuD,aAAa,GAAG,SAAhBA,aAAgB,CAACgB,WAAD,EAAc7E,OAAd,EAA0B;EAC9C,IAAIyD,MAAM,GAAG,IAAb;EACA,IAAMqB,oBAAoB,GAAGD,WAAW,CAACE,KAAZ,EAA7B;EACA,IAAIC,cAAc,GAAGF,oBAAoB,CAACG,GAArB,EAArB;;EAEA,OAAOxB,MAAM,IAAIqB,oBAAoB,CAAC/D,MAAtC,EAA8C;IAC5C0C,MAAM,GAAGqB,oBAAoB,CAACf,KAArB,CAA2B,UAACmB,eAAD,EAAqB;MACvD,OAAOF,cAAc,CAACd,UAAf,CAA0BgB,eAA1B,EAA2ClF,OAA3C,CAAP;IACD,CAFQ,CAAT;IAIAgF,cAAc,GAAGF,oBAAoB,CAACG,GAArB,EAAjB;EACD;;EAED,OAAOxB,MAAP;AACD,CAdD,C,CAgBA;AACA;AACA;;;AACA,IAAMT,eAAe,GAAG,SAAlBA,eAAkB,CAACD,IAAD,EAAO/C,OAAP,EAAmB;EACzCoC,KAAK,CAAC,MAAD,EAASW,IAAT,EAAe/C,OAAf,CAAL;EACA+C,IAAI,GAAGoC,aAAa,CAACpC,IAAD,EAAO/C,OAAP,CAApB;EACAoC,KAAK,CAAC,OAAD,EAAUW,IAAV,CAAL;EACAA,IAAI,GAAGqC,aAAa,CAACrC,IAAD,EAAO/C,OAAP,CAApB;EACAoC,KAAK,CAAC,QAAD,EAAWW,IAAX,CAAL;EACAA,IAAI,GAAGsC,cAAc,CAACtC,IAAD,EAAO/C,OAAP,CAArB;EACAoC,KAAK,CAAC,QAAD,EAAWW,IAAX,CAAL;EACAA,IAAI,GAAGuC,YAAY,CAACvC,IAAD,EAAO/C,OAAP,CAAnB;EACAoC,KAAK,CAAC,OAAD,EAAUW,IAAV,CAAL;EACA,OAAOA,IAAP;AACD,CAXD;;AAaA,IAAMwC,GAAG,GAAG,SAANA,GAAM,CAAAC,EAAE;EAAA,OAAI,CAACA,EAAD,IAAOA,EAAE,CAACC,WAAH,OAAqB,GAA5B,IAAmCD,EAAE,KAAK,GAA9C;AAAA,CAAd,C,CAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMJ,aAAa,GAAG,SAAhBA,aAAgB,CAACrC,IAAD,EAAO/C,OAAP;EAAA,OACpB+C,IAAI,CAACnC,IAAL,GAAYH,KAAZ,CAAkB,KAAlB,EAAyBC,GAAzB,CAA6B,UAACqC,IAAD,EAAU;IACrC,OAAO2C,YAAY,CAAC3C,IAAD,EAAO/C,OAAP,CAAnB;EACD,CAFD,EAEGqB,IAFH,CAEQ,GAFR,CADoB;AAAA,CAAtB;;AAKA,IAAMqE,YAAY,GAAG,SAAfA,YAAe,CAAC3C,IAAD,EAAO/C,OAAP,EAAmB;EACtC,IAAM2F,CAAC,GAAG3F,OAAO,CAACE,KAAR,GAAgB4B,EAAE,CAACC,CAAC,CAAC6D,UAAH,CAAlB,GAAmC9D,EAAE,CAACC,CAAC,CAAC8D,KAAH,CAA/C;EACA,OAAO9C,IAAI,CAACb,OAAL,CAAayD,CAAb,EAAgB,UAACG,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,EAAb,EAAoB;IACzC9D,KAAK,CAAC,OAAD,EAAUW,IAAV,EAAgB+C,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BC,EAA5B,CAAL;IACA,IAAIC,GAAJ;;IAEA,IAAIZ,GAAG,CAACQ,CAAD,CAAP,EAAY;MACVI,GAAG,GAAG,EAAN;IACD,CAFD,MAEO,IAAIZ,GAAG,CAACS,CAAD,CAAP,EAAY;MACjBG,GAAG,eAAQJ,CAAR,mBAAkB,CAACA,CAAD,GAAK,CAAvB,WAAH;IACD,CAFM,MAEA,IAAIR,GAAG,CAACU,CAAD,CAAP,EAAY;MACjB;MACAE,GAAG,eAAQJ,CAAR,cAAaC,CAAb,iBAAqBD,CAArB,cAA0B,CAACC,CAAD,GAAK,CAA/B,SAAH;IACD,CAHM,MAGA,IAAIE,EAAJ,EAAQ;MACb9D,KAAK,CAAC,iBAAD,EAAoB8D,EAApB,CAAL;MACAC,GAAG,eAAQJ,CAAR,cAAaC,CAAb,cAAkBC,CAAlB,cAAuBC,EAAvB,eACEH,CADF,cACO,CAACC,CAAD,GAAK,CADZ,SAAH;IAED,CAJM,MAIA;MACL;MACAG,GAAG,eAAQJ,CAAR,cAAaC,CAAb,cAAkBC,CAAlB,eACEF,CADF,cACO,CAACC,CAAD,GAAK,CADZ,SAAH;IAED;;IAED5D,KAAK,CAAC,cAAD,EAAiB+D,GAAjB,CAAL;IACA,OAAOA,GAAP;EACD,CAvBM,CAAP;AAwBD,CA1BD,C,CA4BA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMhB,aAAa,GAAG,SAAhBA,aAAgB,CAACpC,IAAD,EAAO/C,OAAP;EAAA,OACpB+C,IAAI,CAACnC,IAAL,GAAYH,KAAZ,CAAkB,KAAlB,EAAyBC,GAAzB,CAA6B,UAACqC,IAAD,EAAU;IACrC,OAAOqD,YAAY,CAACrD,IAAD,EAAO/C,OAAP,CAAnB;EACD,CAFD,EAEGqB,IAFH,CAEQ,GAFR,CADoB;AAAA,CAAtB;;AAKA,IAAM+E,YAAY,GAAG,SAAfA,YAAe,CAACrD,IAAD,EAAO/C,OAAP,EAAmB;EACtCoC,KAAK,CAAC,OAAD,EAAUW,IAAV,EAAgB/C,OAAhB,CAAL;EACA,IAAM2F,CAAC,GAAG3F,OAAO,CAACE,KAAR,GAAgB4B,EAAE,CAACC,CAAC,CAACsE,UAAH,CAAlB,GAAmCvE,EAAE,CAACC,CAAC,CAACuE,KAAH,CAA/C;EACA,IAAMC,CAAC,GAAGvG,OAAO,CAACG,iBAAR,GAA4B,IAA5B,GAAmC,EAA7C;EACA,OAAO4C,IAAI,CAACb,OAAL,CAAayD,CAAb,EAAgB,UAACG,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,EAAaC,EAAb,EAAoB;IACzC9D,KAAK,CAAC,OAAD,EAAUW,IAAV,EAAgB+C,CAAhB,EAAmBC,CAAnB,EAAsBC,CAAtB,EAAyBC,CAAzB,EAA4BC,EAA5B,CAAL;IACA,IAAIC,GAAJ;;IAEA,IAAIZ,GAAG,CAACQ,CAAD,CAAP,EAAY;MACVI,GAAG,GAAG,EAAN;IACD,CAFD,MAEO,IAAIZ,GAAG,CAACS,CAAD,CAAP,EAAY;MACjBG,GAAG,eAAQJ,CAAR,iBAAgBQ,CAAhB,eAAsB,CAACR,CAAD,GAAK,CAA3B,WAAH;IACD,CAFM,MAEA,IAAIR,GAAG,CAACU,CAAD,CAAP,EAAY;MACjB,IAAIF,CAAC,KAAK,GAAV,EAAe;QACbI,GAAG,eAAQJ,CAAR,cAAaC,CAAb,eAAmBO,CAAnB,eAAyBR,CAAzB,cAA8B,CAACC,CAAD,GAAK,CAAnC,SAAH;MACD,CAFD,MAEO;QACLG,GAAG,eAAQJ,CAAR,cAAaC,CAAb,eAAmBO,CAAnB,eAAyB,CAACR,CAAD,GAAK,CAA9B,WAAH;MACD;IACF,CANM,MAMA,IAAIG,EAAJ,EAAQ;MACb9D,KAAK,CAAC,iBAAD,EAAoB8D,EAApB,CAAL;;MACA,IAAIH,CAAC,KAAK,GAAV,EAAe;QACb,IAAIC,CAAC,KAAK,GAAV,EAAe;UACbG,GAAG,eAAQJ,CAAR,cAAaC,CAAb,cAAkBC,CAAlB,cAAuBC,EAAvB,eACEH,CADF,cACOC,CADP,cACY,CAACC,CAAD,GAAK,CADjB,OAAH;QAED,CAHD,MAGO;UACLE,GAAG,eAAQJ,CAAR,cAAaC,CAAb,cAAkBC,CAAlB,cAAuBC,EAAvB,eACEH,CADF,cACO,CAACC,CAAD,GAAK,CADZ,SAAH;QAED;MACF,CARD,MAQO;QACLG,GAAG,eAAQJ,CAAR,cAAaC,CAAb,cAAkBC,CAAlB,cAAuBC,EAAvB,eACE,CAACH,CAAD,GAAK,CADP,WAAH;MAED;IACF,CAdM,MAcA;MACL3D,KAAK,CAAC,OAAD,CAAL;;MACA,IAAI2D,CAAC,KAAK,GAAV,EAAe;QACb,IAAIC,CAAC,KAAK,GAAV,EAAe;UACbG,GAAG,eAAQJ,CAAR,cAAaC,CAAb,cAAkBC,CAAlB,SACAM,CADA,eACMR,CADN,cACWC,CADX,cACgB,CAACC,CAAD,GAAK,CADrB,OAAH;QAED,CAHD,MAGO;UACLE,GAAG,eAAQJ,CAAR,cAAaC,CAAb,cAAkBC,CAAlB,SACAM,CADA,eACMR,CADN,cACW,CAACC,CAAD,GAAK,CADhB,SAAH;QAED;MACF,CARD,MAQO;QACLG,GAAG,eAAQJ,CAAR,cAAaC,CAAb,cAAkBC,CAAlB,eACE,CAACF,CAAD,GAAK,CADP,WAAH;MAED;IACF;;IAED3D,KAAK,CAAC,cAAD,EAAiB+D,GAAjB,CAAL;IACA,OAAOA,GAAP;EACD,CA9CM,CAAP;AA+CD,CAnDD;;AAqDA,IAAMd,cAAc,GAAG,SAAjBA,cAAiB,CAACtC,IAAD,EAAO/C,OAAP,EAAmB;EACxCoC,KAAK,CAAC,gBAAD,EAAmBW,IAAnB,EAAyB/C,OAAzB,CAAL;EACA,OAAO+C,IAAI,CAACtC,KAAL,CAAW,KAAX,EAAkBC,GAAlB,CAAsB,UAACqC,IAAD,EAAU;IACrC,OAAOyD,aAAa,CAACzD,IAAD,EAAO/C,OAAP,CAApB;EACD,CAFM,EAEJqB,IAFI,CAEC,GAFD,CAAP;AAGD,CALD;;AAOA,IAAMmF,aAAa,GAAG,SAAhBA,aAAgB,CAACzD,IAAD,EAAO/C,OAAP,EAAmB;EACvC+C,IAAI,GAAGA,IAAI,CAACnC,IAAL,EAAP;EACA,IAAM+E,CAAC,GAAG3F,OAAO,CAACE,KAAR,GAAgB4B,EAAE,CAACC,CAAC,CAAC0E,WAAH,CAAlB,GAAoC3E,EAAE,CAACC,CAAC,CAAC2E,MAAH,CAAhD;EACA,OAAO3D,IAAI,CAACb,OAAL,CAAayD,CAAb,EAAgB,UAACQ,GAAD,EAAMQ,IAAN,EAAYZ,CAAZ,EAAeC,CAAf,EAAkBC,CAAlB,EAAqBC,EAArB,EAA4B;IACjD9D,KAAK,CAAC,QAAD,EAAWW,IAAX,EAAiBoD,GAAjB,EAAsBQ,IAAtB,EAA4BZ,CAA5B,EAA+BC,CAA/B,EAAkCC,CAAlC,EAAqCC,EAArC,CAAL;IACA,IAAMU,EAAE,GAAGrB,GAAG,CAACQ,CAAD,CAAd;IACA,IAAMc,EAAE,GAAGD,EAAE,IAAIrB,GAAG,CAACS,CAAD,CAApB;IACA,IAAMc,EAAE,GAAGD,EAAE,IAAItB,GAAG,CAACU,CAAD,CAApB;IACA,IAAMc,IAAI,GAAGD,EAAb;;IAEA,IAAIH,IAAI,KAAK,GAAT,IAAgBI,IAApB,EAA0B;MACxBJ,IAAI,GAAG,EAAP;IACD,CATgD,CAWjD;IACA;;;IACAT,EAAE,GAAGlG,OAAO,CAACG,iBAAR,GAA4B,IAA5B,GAAmC,EAAxC;;IAEA,IAAIyG,EAAJ,EAAQ;MACN,IAAID,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,GAA7B,EAAkC;QAChC;QACAR,GAAG,GAAG,UAAN;MACD,CAHD,MAGO;QACL;QACAA,GAAG,GAAG,GAAN;MACD;IACF,CARD,MAQO,IAAIQ,IAAI,IAAII,IAAZ,EAAkB;MACvB;MACA;MACA,IAAIF,EAAJ,EAAQ;QACNb,CAAC,GAAG,CAAJ;MACD;;MACDC,CAAC,GAAG,CAAJ;;MAEA,IAAIU,IAAI,KAAK,GAAb,EAAkB;QAChB;QACA;QACAA,IAAI,GAAG,IAAP;;QACA,IAAIE,EAAJ,EAAQ;UACNd,CAAC,GAAG,CAACA,CAAD,GAAK,CAAT;UACAC,CAAC,GAAG,CAAJ;UACAC,CAAC,GAAG,CAAJ;QACD,CAJD,MAIO;UACLD,CAAC,GAAG,CAACA,CAAD,GAAK,CAAT;UACAC,CAAC,GAAG,CAAJ;QACD;MACF,CAZD,MAYO,IAAIU,IAAI,KAAK,IAAb,EAAmB;QACxB;QACA;QACAA,IAAI,GAAG,GAAP;;QACA,IAAIE,EAAJ,EAAQ;UACNd,CAAC,GAAG,CAACA,CAAD,GAAK,CAAT;QACD,CAFD,MAEO;UACLC,CAAC,GAAG,CAACA,CAAD,GAAK,CAAT;QACD;MACF;;MAED,IAAIW,IAAI,KAAK,GAAb,EACET,EAAE,GAAG,IAAL;MAEFC,GAAG,aAAMQ,IAAI,GAAGZ,CAAb,cAAkBC,CAAlB,cAAuBC,CAAvB,SAA2BC,EAA3B,CAAH;IACD,CAnCM,MAmCA,IAAIW,EAAJ,EAAQ;MACbV,GAAG,eAAQJ,CAAR,iBAAgBG,EAAhB,eAAuB,CAACH,CAAD,GAAK,CAA5B,WAAH;IACD,CAFM,MAEA,IAAIe,EAAJ,EAAQ;MACbX,GAAG,eAAQJ,CAAR,cAAaC,CAAb,eAAmBE,EAAnB,eACEH,CADF,cACO,CAACC,CAAD,GAAK,CADZ,SAAH;IAED;;IAED5D,KAAK,CAAC,eAAD,EAAkB+D,GAAlB,CAAL;IAEA,OAAOA,GAAP;EACD,CApEM,CAAP;AAqED,CAxED,C,CA0EA;AACA;;;AACA,IAAMb,YAAY,GAAG,SAAfA,YAAe,CAACvC,IAAD,EAAO/C,OAAP,EAAmB;EACtCoC,KAAK,CAAC,cAAD,EAAiBW,IAAjB,EAAuB/C,OAAvB,CAAL,CADsC,CAEtC;;EACA,OAAO+C,IAAI,CAACnC,IAAL,GAAYsB,OAAZ,CAAoBJ,EAAE,CAACC,CAAC,CAACiF,IAAH,CAAtB,EAAgC,EAAhC,CAAP;AACD,CAJD;;AAMA,IAAM/D,WAAW,GAAG,SAAdA,WAAc,CAACF,IAAD,EAAO/C,OAAP,EAAmB;EACrCoC,KAAK,CAAC,aAAD,EAAgBW,IAAhB,EAAsB/C,OAAtB,CAAL;EACA,OAAO+C,IAAI,CAACnC,IAAL,GACJsB,OADI,CACIJ,EAAE,CAAC9B,OAAO,CAACG,iBAAR,GAA4B4B,CAAC,CAACkF,OAA9B,GAAwClF,CAAC,CAACmF,IAA3C,CADN,EACwD,EADxD,CAAP;AAED,CAJD,C,CAMA;AACA;AACA;AACA;AACA;;;AACA,IAAM/E,aAAa,GAAG,SAAhBA,aAAgB,CAAAgF,KAAK;EAAA,OAAI,UAACC,EAAD,EAC7BC,IAD6B,EACvBC,EADuB,EACnBC,EADmB,EACfC,EADe,EACXC,GADW,EACNC,EADM,EAE7BC,EAF6B,EAEzBC,EAFyB,EAErBC,EAFqB,EAEjBC,EAFiB,EAEbC,GAFa,EAERC,EAFQ,EAED;IAC5B,IAAIzC,GAAG,CAAC+B,EAAD,CAAP,EAAa;MACXD,IAAI,GAAG,EAAP;IACD,CAFD,MAEO,IAAI9B,GAAG,CAACgC,EAAD,CAAP,EAAa;MAClBF,IAAI,eAAQC,EAAR,iBAAiBH,KAAK,GAAG,IAAH,GAAU,EAAhC,CAAJ;IACD,CAFM,MAEA,IAAI5B,GAAG,CAACiC,EAAD,CAAP,EAAa;MAClBH,IAAI,eAAQC,EAAR,cAAcC,EAAd,eAAqBJ,KAAK,GAAG,IAAH,GAAU,EAApC,CAAJ;IACD,CAFM,MAEA,IAAIM,GAAJ,EAAS;MACdJ,IAAI,eAAQA,IAAR,CAAJ;IACD,CAFM,MAEA;MACLA,IAAI,eAAQA,IAAR,SAAeF,KAAK,GAAG,IAAH,GAAU,EAA9B,CAAJ;IACD;;IAED,IAAI5B,GAAG,CAACqC,EAAD,CAAP,EAAa;MACXD,EAAE,GAAG,EAAL;IACD,CAFD,MAEO,IAAIpC,GAAG,CAACsC,EAAD,CAAP,EAAa;MAClBF,EAAE,cAAO,CAACC,EAAD,GAAM,CAAb,WAAF;IACD,CAFM,MAEA,IAAIrC,GAAG,CAACuC,EAAD,CAAP,EAAa;MAClBH,EAAE,cAAOC,EAAP,cAAa,CAACC,EAAD,GAAM,CAAnB,SAAF;IACD,CAFM,MAEA,IAAIE,GAAJ,EAAS;MACdJ,EAAE,eAAQC,EAAR,cAAcC,EAAd,cAAoBC,EAApB,cAA0BC,GAA1B,CAAF;IACD,CAFM,MAEA,IAAIZ,KAAJ,EAAW;MAChBQ,EAAE,cAAOC,EAAP,cAAaC,EAAb,cAAmB,CAACC,EAAD,GAAM,CAAzB,OAAF;IACD,CAFM,MAEA;MACLH,EAAE,eAAQA,EAAR,CAAF;IACD;;IAED,OAAO,UAAIN,IAAJ,cAAYM,EAAZ,EAAkB/G,IAAlB,EAAP;EACD,CA9B0B;AAAA,CAA3B;;AAgCA,IAAM2D,OAAO,GAAG,SAAVA,OAAU,CAAChE,GAAD,EAAM4D,OAAN,EAAenE,OAAf,EAA2B;EACzC,KAAK,IAAIsE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/D,GAAG,CAACQ,MAAxB,EAAgCuD,CAAC,EAAjC,EAAqC;IACnC,IAAI,CAAC/D,GAAG,CAAC+D,CAAD,CAAH,CAAO2D,IAAP,CAAY9D,OAAZ,CAAL,EAA2B;MACzB,OAAO,KAAP;IACD;EACF;;EAED,IAAIA,OAAO,CAAC+D,UAAR,CAAmBnH,MAAnB,IAA6B,CAACf,OAAO,CAACG,iBAA1C,EAA6D;IAC3D;IACA;IACA;IACA;IACA;IACA,KAAK,IAAImE,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG/D,GAAG,CAACQ,MAAxB,EAAgCuD,EAAC,EAAjC,EAAqC;MACnClC,KAAK,CAAC7B,GAAG,CAAC+D,EAAD,CAAH,CAAO6D,MAAR,CAAL;;MACA,IAAI5H,GAAG,CAAC+D,EAAD,CAAH,CAAO6D,MAAP,KAAkB9H,UAAU,CAAC+H,GAAjC,EAAsC;QACpC;MACD;;MAED,IAAI7H,GAAG,CAAC+D,EAAD,CAAH,CAAO6D,MAAP,CAAcD,UAAd,CAAyBnH,MAAzB,GAAkC,CAAtC,EAAyC;QACvC,IAAMsH,OAAO,GAAG9H,GAAG,CAAC+D,EAAD,CAAH,CAAO6D,MAAvB;;QACA,IAAIE,OAAO,CAACC,KAAR,KAAkBnE,OAAO,CAACmE,KAA1B,IACAD,OAAO,CAACE,KAAR,KAAkBpE,OAAO,CAACoE,KAD1B,IAEAF,OAAO,CAACG,KAAR,KAAkBrE,OAAO,CAACqE,KAF9B,EAEqC;UACnC,OAAO,IAAP;QACD;MACF;IACF,CApB0D,CAsB3D;;;IACA,OAAO,KAAP;EACD;;EAED,OAAO,IAAP;AACD,CAlCD"},"metadata":{},"sourceType":"script"}