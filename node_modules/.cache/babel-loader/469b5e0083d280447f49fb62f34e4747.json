{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { WalletNotConnectedError, WalletNotReadyError } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nconst initialState = {\n  wallet: null,\n  adapter: null,\n  ready: false,\n  publicKey: null,\n  connected: false\n};\nexport const WalletProvider = _ref => {\n  let {\n    children,\n    wallets,\n    autoConnect = false,\n    onError: _onError = error => console.error(error),\n    localStorageKey = 'walletName'\n  } = _ref;\n  const [name, setName] = useLocalStorage(localStorageKey, null);\n  const [{\n    wallet,\n    adapter,\n    ready,\n    publicKey,\n    connected\n  }, setState] = useState(initialState);\n  const [connecting, setConnecting] = useState(false);\n  const [disconnecting, setDisconnecting] = useState(false);\n  const isConnecting = useRef(false);\n  const isDisconnecting = useRef(false);\n  const isUnloading = useRef(false); // Map of wallet names to wallets\n\n  const walletsByName = useMemo(() => wallets.reduce((walletsByName, wallet) => {\n    walletsByName[wallet.name] = wallet;\n    return walletsByName;\n  }, {}), [wallets]); // When the selected wallet changes, initialize the state\n\n  useEffect(() => {\n    const wallet = name && walletsByName[name] || null;\n    const adapter = wallet && wallet.adapter();\n\n    if (adapter) {\n      const {\n        ready,\n        publicKey,\n        connected\n      } = adapter;\n      setState({\n        wallet,\n        adapter,\n        connected,\n        publicKey,\n        ready\n      });\n    } else {\n      setState(initialState);\n    }\n  }, [name, walletsByName, setState]); // If autoConnect is enabled, try to connect when the adapter changes and is ready\n\n  useEffect(() => {\n    if (isConnecting.current || connecting || connected || !autoConnect || !adapter || !ready) return;\n\n    (function () {\n      return __awaiter(this, void 0, void 0, function* () {\n        isConnecting.current = true;\n        setConnecting(true);\n\n        try {\n          yield adapter.connect();\n        } catch (error) {\n          // Clear the selected wallet\n          setName(null); // Don't throw error, but onError will still be called\n        } finally {\n          setConnecting(false);\n          isConnecting.current = false;\n        }\n      });\n    })();\n  }, [isConnecting, connecting, connected, autoConnect, adapter, ready, setConnecting, setName]); // If the window is closing or reloading, ignore disconnect and error events from the adapter\n\n  useEffect(() => {\n    function listener() {\n      isUnloading.current = true;\n    }\n\n    window.addEventListener('beforeunload', listener);\n    return () => window.removeEventListener('beforeunload', listener);\n  }, [isUnloading]); // Select a wallet by name\n\n  const select = useCallback(newName => __awaiter(void 0, void 0, void 0, function* () {\n    if (name === newName) return;\n    if (adapter) yield adapter.disconnect();\n    setName(newName);\n  }), [name, adapter, setName]); // Handle the adapter's ready event\n\n  const onReady = useCallback(() => setState(state => Object.assign(Object.assign({}, state), {\n    ready: true\n  })), [setState]); // Handle the adapter's connect event\n\n  const onConnect = useCallback(() => {\n    if (!adapter) return;\n    const {\n      connected,\n      publicKey,\n      ready\n    } = adapter;\n    setState(state => Object.assign(Object.assign({}, state), {\n      connected,\n      publicKey,\n      ready\n    }));\n  }, [adapter, setState]); // Handle the adapter's disconnect event\n\n  const onDisconnect = useCallback(() => {\n    // Clear the selected wallet unless the window is unloading\n    if (!isUnloading.current) setName(null);\n  }, [isUnloading, setName]); // Handle the adapter's error event, and local errors\n\n  const onError = useCallback(error => {\n    // Call the provided error handler unless the window is unloading\n    if (!isUnloading.current) _onError(error);\n    return error;\n  }, [isUnloading, _onError]); // Connect the adapter to the wallet\n\n  const connect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (isConnecting.current || connecting || disconnecting || connected) return;\n    if (!wallet || !adapter) throw onError(new WalletNotSelectedError());\n\n    if (!ready) {\n      // Clear the selected wallet\n      setName(null);\n\n      if (typeof window !== 'undefined') {\n        window.open(wallet.url, '_blank');\n      }\n\n      throw onError(new WalletNotReadyError());\n    }\n\n    isConnecting.current = true;\n    setConnecting(true);\n\n    try {\n      yield adapter.connect();\n    } catch (error) {\n      // Clear the selected wallet\n      setName(null); // Rethrow the error, and onError will also be called\n\n      throw error;\n    } finally {\n      setConnecting(false);\n      isConnecting.current = false;\n    }\n  }), [isConnecting, connecting, disconnecting, connected, wallet, adapter, onError, ready, setConnecting, setName]); // Disconnect the adapter from the wallet\n\n  const disconnect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n    if (isDisconnecting.current || disconnecting) return;\n    if (!adapter) return setName(null);\n    isDisconnecting.current = true;\n    setDisconnecting(true);\n\n    try {\n      yield adapter.disconnect();\n    } catch (error) {\n      // Clear the selected wallet\n      setName(null); // Rethrow the error, and onError will also be called\n\n      throw error;\n    } finally {\n      setDisconnecting(false);\n      isDisconnecting.current = false;\n    }\n  }), [isDisconnecting, disconnecting, adapter, setDisconnecting, setName]); // Send a transaction using the provided connection\n\n  const sendTransaction = useCallback((transaction, connection, options) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!adapter) throw onError(new WalletNotSelectedError());\n    if (!connected) throw onError(new WalletNotConnectedError());\n    return yield adapter.sendTransaction(transaction, connection, options);\n  }), [adapter, onError, connected]); // Sign a transaction if the wallet supports it\n\n  const signTransaction = useMemo(() => adapter && 'signTransaction' in adapter ? transaction => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) throw onError(new WalletNotConnectedError());\n    return yield adapter.signTransaction(transaction);\n  }) : undefined, [adapter, onError, connected]); // Sign multiple transactions if the wallet supports it\n\n  const signAllTransactions = useMemo(() => adapter && 'signAllTransactions' in adapter ? transactions => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) throw onError(new WalletNotConnectedError());\n    return yield adapter.signAllTransactions(transactions);\n  }) : undefined, [adapter, onError, connected]); // Sign an arbitrary message if the wallet supports it\n\n  const signMessage = useMemo(() => adapter && 'signMessage' in adapter ? message => __awaiter(void 0, void 0, void 0, function* () {\n    if (!connected) throw onError(new WalletNotConnectedError());\n    return yield adapter.signMessage(message);\n  }) : undefined, [adapter, onError, connected]); // Setup and teardown event listeners when the adapter changes\n\n  useEffect(() => {\n    if (adapter) {\n      adapter.on('ready', onReady);\n      adapter.on('connect', onConnect);\n      adapter.on('disconnect', onDisconnect);\n      adapter.on('error', onError);\n      return () => {\n        adapter.off('ready', onReady);\n        adapter.off('connect', onConnect);\n        adapter.off('disconnect', onDisconnect);\n        adapter.off('error', onError);\n      };\n    }\n  }, [adapter, onReady, onConnect, onDisconnect, onError]);\n  return React.createElement(WalletContext.Provider, {\n    value: {\n      wallets,\n      autoConnect,\n      wallet,\n      adapter,\n      publicKey,\n      ready,\n      connected,\n      connecting,\n      disconnecting,\n      select,\n      connect,\n      disconnect,\n      sendTransaction,\n      signTransaction,\n      signAllTransactions,\n      signMessage\n    }\n  }, children);\n};","map":{"version":3,"sources":["../src/WalletProvider.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { WalletNotConnectedError, WalletNotReadyError, } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nconst initialState = {\n    wallet: null,\n    adapter: null,\n    ready: false,\n    publicKey: null,\n    connected: false,\n};\nexport const WalletProvider = ({ children, wallets, autoConnect = false, onError: _onError = (error) => console.error(error), localStorageKey = 'walletName', }) => {\n    const [name, setName] = useLocalStorage(localStorageKey, null);\n    const [{ wallet, adapter, ready, publicKey, connected }, setState] = useState(initialState);\n    const [connecting, setConnecting] = useState(false);\n    const [disconnecting, setDisconnecting] = useState(false);\n    const isConnecting = useRef(false);\n    const isDisconnecting = useRef(false);\n    const isUnloading = useRef(false);\n    // Map of wallet names to wallets\n    const walletsByName = useMemo(() => wallets.reduce((walletsByName, wallet) => {\n        walletsByName[wallet.name] = wallet;\n        return walletsByName;\n    }, {}), [wallets]);\n    // When the selected wallet changes, initialize the state\n    useEffect(() => {\n        const wallet = (name && walletsByName[name]) || null;\n        const adapter = wallet && wallet.adapter();\n        if (adapter) {\n            const { ready, publicKey, connected } = adapter;\n            setState({ wallet, adapter, connected, publicKey, ready });\n        }\n        else {\n            setState(initialState);\n        }\n    }, [name, walletsByName, setState]);\n    // If autoConnect is enabled, try to connect when the adapter changes and is ready\n    useEffect(() => {\n        if (isConnecting.current || connecting || connected || !autoConnect || !adapter || !ready)\n            return;\n        (function () {\n            return __awaiter(this, void 0, void 0, function* () {\n                isConnecting.current = true;\n                setConnecting(true);\n                try {\n                    yield adapter.connect();\n                }\n                catch (error) {\n                    // Clear the selected wallet\n                    setName(null);\n                    // Don't throw error, but onError will still be called\n                }\n                finally {\n                    setConnecting(false);\n                    isConnecting.current = false;\n                }\n            });\n        })();\n    }, [isConnecting, connecting, connected, autoConnect, adapter, ready, setConnecting, setName]);\n    // If the window is closing or reloading, ignore disconnect and error events from the adapter\n    useEffect(() => {\n        function listener() {\n            isUnloading.current = true;\n        }\n        window.addEventListener('beforeunload', listener);\n        return () => window.removeEventListener('beforeunload', listener);\n    }, [isUnloading]);\n    // Select a wallet by name\n    const select = useCallback((newName) => __awaiter(void 0, void 0, void 0, function* () {\n        if (name === newName)\n            return;\n        if (adapter)\n            yield adapter.disconnect();\n        setName(newName);\n    }), [name, adapter, setName]);\n    // Handle the adapter's ready event\n    const onReady = useCallback(() => setState((state) => (Object.assign(Object.assign({}, state), { ready: true }))), [setState]);\n    // Handle the adapter's connect event\n    const onConnect = useCallback(() => {\n        if (!adapter)\n            return;\n        const { connected, publicKey, ready } = adapter;\n        setState((state) => (Object.assign(Object.assign({}, state), { connected,\n            publicKey,\n            ready })));\n    }, [adapter, setState]);\n    // Handle the adapter's disconnect event\n    const onDisconnect = useCallback(() => {\n        // Clear the selected wallet unless the window is unloading\n        if (!isUnloading.current)\n            setName(null);\n    }, [isUnloading, setName]);\n    // Handle the adapter's error event, and local errors\n    const onError = useCallback((error) => {\n        // Call the provided error handler unless the window is unloading\n        if (!isUnloading.current)\n            _onError(error);\n        return error;\n    }, [isUnloading, _onError]);\n    // Connect the adapter to the wallet\n    const connect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        if (isConnecting.current || connecting || disconnecting || connected)\n            return;\n        if (!wallet || !adapter)\n            throw onError(new WalletNotSelectedError());\n        if (!ready) {\n            // Clear the selected wallet\n            setName(null);\n            if (typeof window !== 'undefined') {\n                window.open(wallet.url, '_blank');\n            }\n            throw onError(new WalletNotReadyError());\n        }\n        isConnecting.current = true;\n        setConnecting(true);\n        try {\n            yield adapter.connect();\n        }\n        catch (error) {\n            // Clear the selected wallet\n            setName(null);\n            // Rethrow the error, and onError will also be called\n            throw error;\n        }\n        finally {\n            setConnecting(false);\n            isConnecting.current = false;\n        }\n    }), [isConnecting, connecting, disconnecting, connected, wallet, adapter, onError, ready, setConnecting, setName]);\n    // Disconnect the adapter from the wallet\n    const disconnect = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {\n        if (isDisconnecting.current || disconnecting)\n            return;\n        if (!adapter)\n            return setName(null);\n        isDisconnecting.current = true;\n        setDisconnecting(true);\n        try {\n            yield adapter.disconnect();\n        }\n        catch (error) {\n            // Clear the selected wallet\n            setName(null);\n            // Rethrow the error, and onError will also be called\n            throw error;\n        }\n        finally {\n            setDisconnecting(false);\n            isDisconnecting.current = false;\n        }\n    }), [isDisconnecting, disconnecting, adapter, setDisconnecting, setName]);\n    // Send a transaction using the provided connection\n    const sendTransaction = useCallback((transaction, connection, options) => __awaiter(void 0, void 0, void 0, function* () {\n        if (!adapter)\n            throw onError(new WalletNotSelectedError());\n        if (!connected)\n            throw onError(new WalletNotConnectedError());\n        return yield adapter.sendTransaction(transaction, connection, options);\n    }), [adapter, onError, connected]);\n    // Sign a transaction if the wallet supports it\n    const signTransaction = useMemo(() => adapter && 'signTransaction' in adapter\n        ? (transaction) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected)\n                throw onError(new WalletNotConnectedError());\n            return yield adapter.signTransaction(transaction);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Sign multiple transactions if the wallet supports it\n    const signAllTransactions = useMemo(() => adapter && 'signAllTransactions' in adapter\n        ? (transactions) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected)\n                throw onError(new WalletNotConnectedError());\n            return yield adapter.signAllTransactions(transactions);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Sign an arbitrary message if the wallet supports it\n    const signMessage = useMemo(() => adapter && 'signMessage' in adapter\n        ? (message) => __awaiter(void 0, void 0, void 0, function* () {\n            if (!connected)\n                throw onError(new WalletNotConnectedError());\n            return yield adapter.signMessage(message);\n        })\n        : undefined, [adapter, onError, connected]);\n    // Setup and teardown event listeners when the adapter changes\n    useEffect(() => {\n        if (adapter) {\n            adapter.on('ready', onReady);\n            adapter.on('connect', onConnect);\n            adapter.on('disconnect', onDisconnect);\n            adapter.on('error', onError);\n            return () => {\n                adapter.off('ready', onReady);\n                adapter.off('connect', onConnect);\n                adapter.off('disconnect', onDisconnect);\n                adapter.off('error', onError);\n            };\n        }\n    }, [adapter, onReady, onConnect, onDisconnect, onError]);\n    return (React.createElement(WalletContext.Provider, { value: {\n            wallets,\n            autoConnect,\n            wallet,\n            adapter,\n            publicKey,\n            ready,\n            connected,\n            connecting,\n            disconnecting,\n            select,\n            connect,\n            disconnect,\n            sendTransaction,\n            signTransaction,\n            signAllTransactions,\n            signMessage,\n        } }, children));\n};\n//# sourceMappingURL=WalletProvider.js.map"]},"metadata":{},"sourceType":"module"}