{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reducer = void 0;\n\nconst react_1 = require(\"react\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst types_1 = require(\"../types\");\n\nconst config_1 = require(\"../config\");\n\nconst utils_1 = require(\"../useReducer/utils\");\n\nconst gatewayStatusToCivicPassAction = {\n  [types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP]: types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP,\n  [types_1.GatewayStatus.IN_REVIEW]: types_1.CivicPassMessageAction.TOKEN_IN_REVIEW,\n  [types_1.GatewayStatus.ERROR]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.ACTIVE]: types_1.CivicPassMessageAction.TOKEN_ACTIVE,\n  [types_1.GatewayStatus.REVOKED]: types_1.CivicPassMessageAction.TOKEN_REVOKED,\n  [types_1.GatewayStatus.FROZEN]: types_1.CivicPassMessageAction.TOKEN_FROZEN,\n  [types_1.GatewayStatus.REJECTED]: types_1.CivicPassMessageAction.TOKEN_REJECTED,\n  [types_1.GatewayStatus.LOCATION_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_IP_CHECK,\n  [types_1.GatewayStatus.VPN_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_VPN_CHECK,\n  [types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED]: types_1.CivicPassMessageAction.REFRESH,\n  [types_1.GatewayStatus.CHECKING]: types_1.CivicPassMessageAction.STATUS,\n  [types_1.GatewayStatus.NOT_REQUESTED]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.COLLECTING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.VALIDATING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.USER_INFORMATION_VALIDATED]: types_1.CivicPassMessageAction.ISSUANCE,\n  [types_1.GatewayStatus.USER_INFORMATION_REJECTED]: types_1.CivicPassMessageAction.ISSUANCE\n};\nconst validationProcessToGatewayStatus = {\n  [types_1.ValidationStatus.COLLECTING]: types_1.GatewayStatus.COLLECTING_USER_INFORMATION,\n  [types_1.ValidationStatus.PROCESSING]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n  [types_1.ValidationStatus.IN_REVIEW]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n  [types_1.ValidationStatus.FAILED]: types_1.GatewayStatus.USER_INFORMATION_REJECTED,\n  [types_1.ValidationStatus.NOT_FOUND]: types_1.GatewayStatus.NOT_REQUESTED,\n  [types_1.ValidationStatus.COMPLETED]: types_1.GatewayStatus.USER_INFORMATION_VALIDATED\n};\n\nconst logDebug = function (message) {\n  let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger_1.default.debug(`[useCivicPass] ${message}`, obj);\n};\n\nconst logError = function (message) {\n  let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return logger_1.default.error(`[useCivicPass] ${message}`, obj);\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\n\nconst getCivicPassSrcUrl = (state, status) => {\n  const {\n    redirectUrl,\n    gatekeeperNetworkAddress,\n    stage,\n    walletAddress,\n    civicPass,\n    chainType\n  } = state;\n\n  if (!gatekeeperNetworkAddress || !walletAddress) {\n    logError('Required properties not present', {\n      gatekeeperNetworkAddress,\n      walletAddress\n    });\n    throw new Error(`Required properties not present ${{\n      gatekeeperNetworkAddress,\n      walletAddress\n    }}`);\n  }\n\n  const civicPassSrcUrl = (0, config_1.getCivicPassEndpoint)(stage);\n  const url = new URL(civicPassSrcUrl);\n  const action = gatewayStatusToCivicPassAction[status];\n  const searchParams = new URLSearchParams(Object.assign(Object.assign({}, civicPass.requestPayload), {\n    redirectUrl,\n    networkAddress: gatekeeperNetworkAddress,\n    action,\n    wallet: walletAddress,\n    chain: chainType\n  }));\n  logDebug('Civic pass query params', {\n    searchParams: searchParams.toString(),\n    gatewayStatus: types_1.GatewayStatus[status]\n  });\n  return `${url.href}?${searchParams.toString()}`;\n};\n\nconst reducer = (state, action) => {\n  var _a;\n\n  switch (action.type) {\n    case 'civicPass_check_token_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: !((_a = state.options) === null || _a === void 0 ? void 0 : _a.autoShowModal),\n          renderIframe: true,\n          iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ? state.iframeSrcUrl : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token))\n        });\n      }\n\n    case 'civicPass_check_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: true,\n          gatewayStatus: types_1.GatewayStatus.CHECKING,\n          iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.CHECKING)\n        });\n      }\n\n    case 'civicPass_check_status_complete':\n      {\n        const {\n          payload\n        } = action.payload;\n        const {\n          status\n        } = payload;\n        const gatewayStatus = validationProcessToGatewayStatus[status];\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: false,\n          gatewayStatus\n        });\n      }\n\n    case 'userInteraction_check_gatewayToken_status':\n      {\n        return Object.assign(Object.assign({}, state), {\n          iframeMinimized: false,\n          renderIframe: true,\n          iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ? state.iframeSrcUrl : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token))\n        });\n      }\n\n    case 'civicPass_close':\n      {\n        const {\n          gatewayStatus\n        } = state;\n        const requiresRefresh = gatewayStatus === types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED || gatewayStatus === types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP;\n        return Object.assign({}, state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED ? Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: true\n        }) : Object.assign(Object.assign({}, state), {\n          iframeMinimized: true,\n          renderIframe: false,\n          refreshTokenState: requiresRefresh ? state.refreshTokenState : types_1.RefreshTokenState.COMPLETED\n        }));\n      }\n\n    case 'civicPass_in_progress':\n      {\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus: types_1.GatewayStatus.COLLECTING_USER_INFORMATION,\n          renderIframe: true,\n          iframeMinimized: false,\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            status: types_1.CivicPassIssuanceStatus.REQUESTED\n          })\n        });\n      }\n\n    case 'civicPass_issuance_success':\n      {\n        const {\n          ownerSigns\n        } = state;\n        const {\n          payload,\n          requiresProofOfWalletOwnership\n        } = action.payload;\n        const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n        const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus,\n          renderIframe: !ownerSigns,\n          iframeMinimized: ownerSigns,\n          powoRequested: 'solana',\n          iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus),\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            status: types_1.CivicPassIssuanceStatus.VERIFIED,\n            responsePayload: {\n              [types_1.CivicPassMessageAction.ISSUANCE]: {\n                payload,\n                requiresProofOfWalletOwnership: shouldRequestPowo\n              }\n            }\n          })\n        });\n      }\n\n    case 'civicPass_issuance_failure':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        gatewayStatus: types_1.GatewayStatus.ERROR\n      });\n\n    case 'civicPass_issuance_cancelled':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED\n      });\n\n    case 'civicPass_refresh_success':\n      {\n        const {\n          ownerSigns\n        } = state;\n        const {\n          payload,\n          requiresProofOfWalletOwnership\n        } = action.payload;\n        const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n        const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n        return Object.assign(Object.assign({}, state), {\n          gatewayStatus,\n          renderIframe: !ownerSigns,\n          iframeMinimized: ownerSigns,\n          iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus),\n          refreshTokenState: types_1.RefreshTokenState.IN_PROGRESS,\n          civicPass: Object.assign(Object.assign({}, state.civicPass), {\n            responsePayload: {\n              [types_1.CivicPassMessageAction.REFRESH]: {\n                payload,\n                requiresProofOfWalletOwnership: shouldRequestPowo\n              }\n            }\n          })\n        });\n      }\n\n    case 'civicPass_refresh_cancelled':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        refreshTokenState: types_1.RefreshTokenState.CANCELLED,\n        gatewayStatus: types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED\n      });\n\n    case 'civicPass_refresh_failure':\n      return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), {\n        refreshTokenState: types_1.RefreshTokenState.FAILED,\n        gatewayStatus: types_1.GatewayStatus.ERROR,\n        civicPass: Object.assign(Object.assign({}, state.civicPass), {\n          responsePayload: undefined\n        })\n      });\n\n    case 'civicPass_location_not_supported':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: true,\n        renderIframe: false,\n        gatewayStatus: state.gatewayStatus,\n        refreshTokenState: state.gatekeeperRecordState === types_1.GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED ? types_1.RefreshTokenState.REQUIRES_POWO : state.refreshTokenState\n      });\n\n    case 'civicPass_vpn_not_supported':\n      return Object.assign(Object.assign({}, state), {\n        iframeMinimized: true,\n        renderIframe: false,\n        gatewayStatus: state.gatewayStatus\n      });\n\n    default:\n      return state;\n  }\n};\n\nexports.reducer = reducer;\n\nconst useCivicPass = (_ref, state, dispatch) => {\n  let {\n    wallet\n  } = _ref;\n  const {\n    gatekeeperRecordState\n  } = state;\n\n  const getActionForIssuanceResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_issuance_success',\n        payload: response\n      },\n      [types_1.CivicPassMessageEventResult.FAILURE]: {\n        type: 'civicPass_issuance_failure'\n      },\n      [types_1.CivicPassMessageEventResult.CANCELLED]: {\n        type: 'civicPass_issuance_cancelled'\n      },\n      [types_1.CivicPassMessageEventResult.IN_PROGRESS]: {\n        type: 'civicPass_in_progress'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForRefreshResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_refresh_success',\n        payload: response\n      },\n      [types_1.CivicPassMessageEventResult.CANCELLED]: {\n        type: 'civicPass_refresh_cancelled'\n      },\n      [types_1.CivicPassMessageEventResult.FAILURE]: {\n        type: 'civicPass_refresh_failure'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForPowoResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'powoComplete'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForLocationNotSupportedResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_location_not_supported'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForVpnNotSupportedResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_vpn_not_supported'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForStaticResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_close'\n      }\n    };\n    return actions[response.event];\n  };\n\n  const getActionForStatusResponse = response => {\n    const actions = {\n      [types_1.CivicPassMessageEventResult.SUCCESS]: {\n        type: 'civicPass_check_status_complete',\n        payload: response\n      }\n    };\n    return actions[response.event];\n  };\n\n  const dispatchComplianceEventResult = response => {\n    const actions = {\n      [types_1.CivicPassMessageAction.ISSUANCE]: getActionForIssuanceResponse(response),\n      [types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP]: getActionForPowoResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_IN_REVIEW]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_ACTIVE]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_FROZEN]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_REJECTED]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.TOKEN_REVOKED]: getActionForStaticResponse(response),\n      [types_1.CivicPassMessageAction.FAILED_IP_CHECK]: getActionForLocationNotSupportedResponse(response),\n      [types_1.CivicPassMessageAction.FAILED_VPN_CHECK]: getActionForVpnNotSupportedResponse(response),\n      [types_1.CivicPassMessageAction.REFRESH]: getActionForRefreshResponse(response),\n      [types_1.CivicPassMessageAction.STATUS]: getActionForStatusResponse(response)\n    };\n    const action = actions[response.action];\n\n    if (action) {\n      logDebug('Successfully processed compliance event with action', action);\n      dispatch(action);\n    }\n  };\n  /**\n   * Listen for post messages from the compliance iframe and dispatch events\n   * based on the event type\n   */\n\n\n  (0, react_1.useEffect)(() => {\n    if (wallet && wallet.publicKey) {\n      logDebug('Current state', state);\n\n      const handler = async response => {\n        dispatchComplianceEventResult(response.data);\n      };\n\n      window.addEventListener('message', handler);\n      return () => {\n        logDebug('Removing event listener for compliance');\n        return window.removeEventListener('message', handler);\n      };\n    }\n\n    return () => {};\n  }, []);\n  /**\n   * We do not have a token and user is connecting from an unsupported country,\n   * so we show the country not supported screen\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (gatekeeperRecordState === types_1.GatekeeperRecordState.LOCATION_NOT_SUPPORTED || gatekeeperRecordState === types_1.GatekeeperRecordState.VPN_NOT_SUPPORTED) {\n      dispatch({\n        type: 'civicPass_check_token_status'\n      });\n    }\n  }, [gatekeeperRecordState]);\n  /**\n   * Check for the ongoing KYC status\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (gatekeeperRecordState === types_1.GatekeeperRecordState.NOT_REQUESTED) {\n      dispatch({\n        type: 'civicPass_check_status'\n      });\n    }\n  }, [gatekeeperRecordState]);\n  return {\n    dispatchComplianceEventResult\n  };\n};\n\nexports.default = useCivicPass;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","reducer","react_1","require","logger_1","types_1","config_1","utils_1","gatewayStatusToCivicPassAction","GatewayStatus","PROOF_OF_WALLET_OWNERSHIP","CivicPassMessageAction","IN_REVIEW","TOKEN_IN_REVIEW","ERROR","ISSUANCE","ACTIVE","TOKEN_ACTIVE","REVOKED","TOKEN_REVOKED","FROZEN","TOKEN_FROZEN","REJECTED","TOKEN_REJECTED","LOCATION_NOT_SUPPORTED","FAILED_IP_CHECK","VPN_NOT_SUPPORTED","FAILED_VPN_CHECK","REFRESH_TOKEN_REQUIRED","REFRESH","CHECKING","STATUS","NOT_REQUESTED","COLLECTING_USER_INFORMATION","VALIDATING_USER_INFORMATION","USER_INFORMATION_VALIDATED","USER_INFORMATION_REJECTED","validationProcessToGatewayStatus","ValidationStatus","COLLECTING","PROCESSING","FAILED","NOT_FOUND","COMPLETED","logDebug","message","obj","default","debug","logError","error","getCivicPassSrcUrl","state","status","redirectUrl","gatekeeperNetworkAddress","stage","walletAddress","civicPass","chainType","Error","civicPassSrcUrl","getCivicPassEndpoint","url","URL","action","searchParams","URLSearchParams","assign","requestPayload","networkAddress","wallet","chain","toString","gatewayStatus","href","_a","type","iframeMinimized","options","autoShowModal","renderIframe","iframeSrcUrl","CivicPassIssuanceStatus","REQUESTED","statusFromToken","token","payload","requiresRefresh","refreshTokenState","RefreshTokenState","ownerSigns","requiresProofOfWalletOwnership","shouldRequestPowo","powoRequested","VERIFIED","responsePayload","resetState","IN_PROGRESS","CANCELLED","undefined","gatekeeperRecordState","GatekeeperRecordState","ISSUED_LOCATION_NOT_SUPPORTED","REQUIRES_POWO","useCivicPass","dispatch","getActionForIssuanceResponse","response","actions","CivicPassMessageEventResult","SUCCESS","FAILURE","event","getActionForRefreshResponse","getActionForPowoResponse","getActionForLocationNotSupportedResponse","getActionForVpnNotSupportedResponse","getActionForStaticResponse","getActionForStatusResponse","dispatchComplianceEventResult","useEffect","publicKey","handler","data","window","addEventListener","removeEventListener"],"sources":["/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useCivicPass.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.reducer = void 0;\nconst react_1 = require(\"react\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst types_1 = require(\"../types\");\nconst config_1 = require(\"../config\");\nconst utils_1 = require(\"../useReducer/utils\");\nconst gatewayStatusToCivicPassAction = {\n    [types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP]: types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP,\n    [types_1.GatewayStatus.IN_REVIEW]: types_1.CivicPassMessageAction.TOKEN_IN_REVIEW,\n    [types_1.GatewayStatus.ERROR]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.ACTIVE]: types_1.CivicPassMessageAction.TOKEN_ACTIVE,\n    [types_1.GatewayStatus.REVOKED]: types_1.CivicPassMessageAction.TOKEN_REVOKED,\n    [types_1.GatewayStatus.FROZEN]: types_1.CivicPassMessageAction.TOKEN_FROZEN,\n    [types_1.GatewayStatus.REJECTED]: types_1.CivicPassMessageAction.TOKEN_REJECTED,\n    [types_1.GatewayStatus.LOCATION_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_IP_CHECK,\n    [types_1.GatewayStatus.VPN_NOT_SUPPORTED]: types_1.CivicPassMessageAction.FAILED_VPN_CHECK,\n    [types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED]: types_1.CivicPassMessageAction.REFRESH,\n    [types_1.GatewayStatus.CHECKING]: types_1.CivicPassMessageAction.STATUS,\n    [types_1.GatewayStatus.NOT_REQUESTED]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.COLLECTING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.VALIDATING_USER_INFORMATION]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.USER_INFORMATION_VALIDATED]: types_1.CivicPassMessageAction.ISSUANCE,\n    [types_1.GatewayStatus.USER_INFORMATION_REJECTED]: types_1.CivicPassMessageAction.ISSUANCE,\n};\nconst validationProcessToGatewayStatus = {\n    [types_1.ValidationStatus.COLLECTING]: types_1.GatewayStatus.COLLECTING_USER_INFORMATION,\n    [types_1.ValidationStatus.PROCESSING]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n    [types_1.ValidationStatus.IN_REVIEW]: types_1.GatewayStatus.VALIDATING_USER_INFORMATION,\n    [types_1.ValidationStatus.FAILED]: types_1.GatewayStatus.USER_INFORMATION_REJECTED,\n    [types_1.ValidationStatus.NOT_FOUND]: types_1.GatewayStatus.NOT_REQUESTED,\n    [types_1.ValidationStatus.COMPLETED]: types_1.GatewayStatus.USER_INFORMATION_VALIDATED,\n};\nconst logDebug = (message, obj = null) => logger_1.default.debug(`[useCivicPass] ${message}`, obj);\nconst logError = (message, obj = null) => logger_1.default.error(`[useCivicPass] ${message}`, obj);\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nconst getCivicPassSrcUrl = (state, status) => {\n    const { redirectUrl, gatekeeperNetworkAddress, stage, walletAddress, civicPass, chainType } = state;\n    if (!gatekeeperNetworkAddress || !walletAddress) {\n        logError('Required properties not present', { gatekeeperNetworkAddress, walletAddress });\n        throw new Error(`Required properties not present ${{ gatekeeperNetworkAddress, walletAddress }}`);\n    }\n    const civicPassSrcUrl = (0, config_1.getCivicPassEndpoint)(stage);\n    const url = new URL(civicPassSrcUrl);\n    const action = gatewayStatusToCivicPassAction[status];\n    const searchParams = new URLSearchParams(Object.assign(Object.assign({}, civicPass.requestPayload), { redirectUrl, networkAddress: gatekeeperNetworkAddress, action, wallet: walletAddress, chain: chainType }));\n    logDebug('Civic pass query params', { searchParams: searchParams.toString(), gatewayStatus: types_1.GatewayStatus[status] });\n    return `${url.href}?${searchParams.toString()}`;\n};\nconst reducer = (state, action) => {\n    var _a;\n    switch (action.type) {\n        case 'civicPass_check_token_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: !((_a = state.options) === null || _a === void 0 ? void 0 : _a.autoShowModal), renderIframe: true, iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED\n                    ? state.iframeSrcUrl\n                    : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token)) });\n        }\n        case 'civicPass_check_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: true, gatewayStatus: types_1.GatewayStatus.CHECKING, iframeSrcUrl: getCivicPassSrcUrl(state, types_1.GatewayStatus.CHECKING) });\n        }\n        case 'civicPass_check_status_complete': {\n            const { payload } = action.payload;\n            const { status } = payload;\n            const gatewayStatus = validationProcessToGatewayStatus[status];\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus });\n        }\n        case 'userInteraction_check_gatewayToken_status': {\n            return Object.assign(Object.assign({}, state), { iframeMinimized: false, renderIframe: true, iframeSrcUrl: state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED\n                    ? state.iframeSrcUrl\n                    : getCivicPassSrcUrl(state, (0, utils_1.statusFromToken)(state, action.token)) });\n        }\n        case 'civicPass_close': {\n            const { gatewayStatus } = state;\n            const requiresRefresh = gatewayStatus === types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED ||\n                gatewayStatus === types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP;\n            return Object.assign({}, (state.civicPass.status === types_1.CivicPassIssuanceStatus.REQUESTED\n                ? Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: true }) : Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, refreshTokenState: requiresRefresh ? state.refreshTokenState : types_1.RefreshTokenState.COMPLETED })));\n        }\n        case 'civicPass_in_progress': {\n            return Object.assign(Object.assign({}, state), { gatewayStatus: types_1.GatewayStatus.COLLECTING_USER_INFORMATION, renderIframe: true, iframeMinimized: false, civicPass: Object.assign(Object.assign({}, state.civicPass), { status: types_1.CivicPassIssuanceStatus.REQUESTED }) });\n        }\n        case 'civicPass_issuance_success': {\n            const { ownerSigns } = state;\n            const { payload, requiresProofOfWalletOwnership } = action.payload;\n            const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n            const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n            return Object.assign(Object.assign({}, state), { gatewayStatus, renderIframe: !ownerSigns, iframeMinimized: ownerSigns, powoRequested: 'solana', iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus), civicPass: Object.assign(Object.assign({}, state.civicPass), { status: types_1.CivicPassIssuanceStatus.VERIFIED, responsePayload: {\n                        [types_1.CivicPassMessageAction.ISSUANCE]: {\n                            payload,\n                            requiresProofOfWalletOwnership: shouldRequestPowo,\n                        },\n                    } }) });\n        }\n        case 'civicPass_issuance_failure':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { gatewayStatus: types_1.GatewayStatus.ERROR });\n        case 'civicPass_issuance_cancelled':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { gatewayStatus: types_1.GatewayStatus.NOT_REQUESTED });\n        case 'civicPass_refresh_success': {\n            const { ownerSigns } = state;\n            const { payload, requiresProofOfWalletOwnership } = action.payload;\n            const shouldRequestPowo = ownerSigns ? false : requiresProofOfWalletOwnership;\n            const gatewayStatus = shouldRequestPowo ? types_1.GatewayStatus.PROOF_OF_WALLET_OWNERSHIP : types_1.GatewayStatus.IN_REVIEW;\n            return Object.assign(Object.assign({}, state), { gatewayStatus, renderIframe: !ownerSigns, iframeMinimized: ownerSigns, iframeSrcUrl: getCivicPassSrcUrl(state, gatewayStatus), refreshTokenState: types_1.RefreshTokenState.IN_PROGRESS, civicPass: Object.assign(Object.assign({}, state.civicPass), { responsePayload: {\n                        [types_1.CivicPassMessageAction.REFRESH]: {\n                            payload,\n                            requiresProofOfWalletOwnership: shouldRequestPowo,\n                        },\n                    } }) });\n        }\n        case 'civicPass_refresh_cancelled':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { refreshTokenState: types_1.RefreshTokenState.CANCELLED, gatewayStatus: types_1.GatewayStatus.REFRESH_TOKEN_REQUIRED });\n        case 'civicPass_refresh_failure':\n            return Object.assign(Object.assign({}, (0, utils_1.resetState)(state)), { refreshTokenState: types_1.RefreshTokenState.FAILED, gatewayStatus: types_1.GatewayStatus.ERROR, civicPass: Object.assign(Object.assign({}, state.civicPass), { responsePayload: undefined }) });\n        case 'civicPass_location_not_supported':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus: state.gatewayStatus, refreshTokenState: state.gatekeeperRecordState === types_1.GatekeeperRecordState.ISSUED_LOCATION_NOT_SUPPORTED\n                    ? types_1.RefreshTokenState.REQUIRES_POWO\n                    : state.refreshTokenState });\n        case 'civicPass_vpn_not_supported':\n            return Object.assign(Object.assign({}, state), { iframeMinimized: true, renderIframe: false, gatewayStatus: state.gatewayStatus });\n        default:\n            return state;\n    }\n};\nexports.reducer = reducer;\nconst useCivicPass = ({ wallet }, state, dispatch) => {\n    const { gatekeeperRecordState } = state;\n    const getActionForIssuanceResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_issuance_success',\n                payload: response,\n            },\n            [types_1.CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_issuance_failure',\n            },\n            [types_1.CivicPassMessageEventResult.CANCELLED]: {\n                type: 'civicPass_issuance_cancelled',\n            },\n            [types_1.CivicPassMessageEventResult.IN_PROGRESS]: {\n                type: 'civicPass_in_progress',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForRefreshResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_refresh_success',\n                payload: response,\n            },\n            [types_1.CivicPassMessageEventResult.CANCELLED]: {\n                type: 'civicPass_refresh_cancelled',\n            },\n            [types_1.CivicPassMessageEventResult.FAILURE]: {\n                type: 'civicPass_refresh_failure',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForPowoResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'powoComplete',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForLocationNotSupportedResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_location_not_supported',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForVpnNotSupportedResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_vpn_not_supported',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForStaticResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_close',\n            },\n        };\n        return actions[response.event];\n    };\n    const getActionForStatusResponse = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageEventResult.SUCCESS]: {\n                type: 'civicPass_check_status_complete',\n                payload: response,\n            },\n        };\n        return actions[response.event];\n    };\n    const dispatchComplianceEventResult = (response) => {\n        const actions = {\n            [types_1.CivicPassMessageAction.ISSUANCE]: getActionForIssuanceResponse(response),\n            [types_1.CivicPassMessageAction.PROOF_OF_WALLET_OWNERSHIP]: getActionForPowoResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_IN_REVIEW]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_ACTIVE]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_FROZEN]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_REJECTED]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.TOKEN_REVOKED]: getActionForStaticResponse(response),\n            [types_1.CivicPassMessageAction.FAILED_IP_CHECK]: getActionForLocationNotSupportedResponse(response),\n            [types_1.CivicPassMessageAction.FAILED_VPN_CHECK]: getActionForVpnNotSupportedResponse(response),\n            [types_1.CivicPassMessageAction.REFRESH]: getActionForRefreshResponse(response),\n            [types_1.CivicPassMessageAction.STATUS]: getActionForStatusResponse(response),\n        };\n        const action = actions[response.action];\n        if (action) {\n            logDebug('Successfully processed compliance event with action', action);\n            dispatch(action);\n        }\n    };\n    /**\n     * Listen for post messages from the compliance iframe and dispatch events\n     * based on the event type\n     */\n    (0, react_1.useEffect)(() => {\n        if (wallet && wallet.publicKey) {\n            logDebug('Current state', state);\n            const handler = async (response) => {\n                dispatchComplianceEventResult(response.data);\n            };\n            window.addEventListener('message', handler);\n            return () => {\n                logDebug('Removing event listener for compliance');\n                return window.removeEventListener('message', handler);\n            };\n        }\n        return () => { };\n    }, []);\n    /**\n     * We do not have a token and user is connecting from an unsupported country,\n     * so we show the country not supported screen\n     */\n    (0, react_1.useEffect)(() => {\n        if (gatekeeperRecordState === types_1.GatekeeperRecordState.LOCATION_NOT_SUPPORTED ||\n            gatekeeperRecordState === types_1.GatekeeperRecordState.VPN_NOT_SUPPORTED) {\n            dispatch({ type: 'civicPass_check_token_status' });\n        }\n    }, [gatekeeperRecordState]);\n    /**\n     * Check for the ongoing KYC status\n     */\n    (0, react_1.useEffect)(() => {\n        if (gatekeeperRecordState === types_1.GatekeeperRecordState.NOT_REQUESTED) {\n            dispatch({ type: 'civicPass_check_status' });\n        }\n    }, [gatekeeperRecordState]);\n    return { dispatchComplianceEventResult };\n};\nexports.default = useCivicPass;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}