{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Enum = exports.Assignable = exports.SCHEMA = void 0;\n\nconst borsh_1 = require(\"borsh\");\n\nexports.SCHEMA = new Map(); // Class wrapping a plain object\n\nclass Assignable {\n  constructor(properties) {\n    Object.keys(properties).forEach(key => {\n      // this is probably possible in Typescript,\n      // but requires (keyof this) which is not possible in the the constructor\n      // @ts-ignore\n      this[key] = properties[key];\n    });\n  }\n\n  encode() {\n    return Buffer.from((0, borsh_1.serialize)(exports.SCHEMA, this));\n  }\n\n  static decode(data) {\n    return (0, borsh_1.deserialize)(exports.SCHEMA, this, data);\n  }\n\n}\n\nexports.Assignable = Assignable; // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\nclass Enum extends Assignable {\n  constructor(properties) {\n    super(properties);\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error(\"Enum can only take single value\");\n    }\n\n    this.enum = \"\";\n    Object.keys(properties).forEach(key => {\n      this.enum = key;\n    });\n  }\n\n}\n\nexports.Enum = Enum;","map":{"version":3,"sources":["../../src/lib/solanaBorsh.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEa,OAAA,CAAA,MAAA,GAAiB,IAAI,GAAJ,EAAjB,C,CAEb;;AACA,MAAsB,UAAtB,CAAgC;EAC9B,WAAA,CAAY,UAAZ,EAA8C;IAC5C,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,OAAxB,CAAiC,GAAD,IAAgB;MAC9C;MACA;MACA;MACA,KAAK,GAAL,IAAY,UAAU,CAAC,GAAD,CAAtB;IACD,CALD;EAMD;;EAED,MAAM,GAAA;IACJ,OAAO,MAAM,CAAC,IAAP,CAAY,CAAA,GAAA,OAAA,CAAA,SAAA,EAAU,OAAA,CAAA,MAAV,EAAkB,IAAlB,CAAZ,CAAP;EACD;;EAEY,OAAN,MAAM,CAAuB,IAAvB,EAAmC;IAC9C,OAAO,CAAA,GAAA,OAAA,CAAA,WAAA,EAAY,OAAA,CAAA,MAAZ,EAAoB,IAApB,EAA0B,IAA1B,CAAP;EACD;;AAhB6B;;AAAhC,OAAA,CAAA,UAAA,GAAA,UAAA,C,CAmBA;AACA;;AACA,MAAsB,IAAtB,SAAmC,UAAnC,CAA6C;EAG3C,WAAA,CAAY,UAAZ,EAA2B;IACzB,MAAM,UAAN;;IACA,IAAI,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,MAAxB,KAAmC,CAAvC,EAA0C;MACxC,MAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;IACD;;IACD,KAAK,IAAL,GAAY,EAAZ;IACA,MAAM,CAAC,IAAP,CAAY,UAAZ,EAAwB,OAAxB,CAAiC,GAAD,IAAQ;MACtC,KAAK,IAAL,GAAY,GAAZ;IACD,CAFD;EAGD;;AAZ0C;;AAA7C,OAAA,CAAA,IAAA,GAAA,IAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Enum = exports.Assignable = exports.SCHEMA = void 0;\nconst borsh_1 = require(\"borsh\");\nexports.SCHEMA = new Map();\n// Class wrapping a plain object\nclass Assignable {\n    constructor(properties) {\n        Object.keys(properties).forEach((key) => {\n            // this is probably possible in Typescript,\n            // but requires (keyof this) which is not possible in the the constructor\n            // @ts-ignore\n            this[key] = properties[key];\n        });\n    }\n    encode() {\n        return Buffer.from((0, borsh_1.serialize)(exports.SCHEMA, this));\n    }\n    static decode(data) {\n        return (0, borsh_1.deserialize)(exports.SCHEMA, this, data);\n    }\n}\nexports.Assignable = Assignable;\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nclass Enum extends Assignable {\n    constructor(properties) {\n        super(properties);\n        if (Object.keys(properties).length !== 1) {\n            throw new Error(\"Enum can only take single value\");\n        }\n        this.enum = \"\";\n        Object.keys(properties).forEach((key) => {\n            this.enum = key;\n        });\n    }\n}\nexports.Enum = Enum;\n//# sourceMappingURL=solanaBorsh.js.map"]},"metadata":{},"sourceType":"script"}