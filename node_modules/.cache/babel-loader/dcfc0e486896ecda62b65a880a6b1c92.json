{"ast":null,"code":"import _asyncToGenerator from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/regenerator/index.js\";\nimport { PublicKey } from \"@solana/web3.js\";\nvar TOKEN_PROGRAM_ID = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\nvar ASSOCIATED_PROGRAM_ID = new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\nexport function associatedAddress(_x) {\n  return _associatedAddress.apply(this, arguments);\n}\n\nfunction _associatedAddress() {\n  _associatedAddress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var mint, owner;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            mint = _ref.mint, owner = _ref.owner;\n            _context.next = 3;\n            return PublicKey.findProgramAddress([owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], ASSOCIATED_PROGRAM_ID);\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent[0]);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _associatedAddress.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../src/utils/token.ts"],"names":[],"mappings":";;AAAA,SAAS,SAAT,QAA0B,iBAA1B;AAEA,IAAM,gBAAgB,GAAG,IAAI,SAAJ,CACvB,6CADuB,CAAzB;AAGA,IAAM,qBAAqB,GAAG,IAAI,SAAJ,CAC5B,8CAD4B,CAA9B;AAIA,gBAAsB,iBAAtB;EAAA;AAAA;;;gFAAO;IAAA;IAAA;MAAA;QAAA;UAAA;YACL,IADK,QACL,IADK,EAEL,KAFK,QAEL,KAFK;YAAA;YAAA,OAQG,SAAS,CAAC,kBAAV,CACJ,CAAC,KAAK,CAAC,QAAN,EAAD,EAAmB,gBAAgB,CAAC,QAAjB,EAAnB,EAAgD,IAAI,CAAC,QAAL,EAAhD,CADI,EAEJ,qBAFI,CARH;;UAAA;YAAA,+CAYH,CAZG;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C","sourceRoot":"","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nconst TOKEN_PROGRAM_ID = new PublicKey(\"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\");\nconst ASSOCIATED_PROGRAM_ID = new PublicKey(\"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\");\nexport async function associatedAddress({ mint, owner, }) {\n    return (await PublicKey.findProgramAddress([owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()], ASSOCIATED_PROGRAM_ID))[0];\n}\n//# sourceMappingURL=token.js.map"]},"metadata":{},"sourceType":"module"}