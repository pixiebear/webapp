{"ast":null,"code":"import { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\nexport default class SimulateFactory {\n  static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n    const simulate = async function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const tx = txFn(...args);\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      let resp = undefined;\n\n      try {\n        resp = await provider.simulate(tx, ctx.signers, ctx.options);\n      } catch (err) {\n        console.log(\"Translating error\", err);\n        let translatedErr = ProgramError.parse(err, idlErrors);\n\n        if (translatedErr === null) {\n          throw err;\n        }\n\n        throw translatedErr;\n      }\n\n      if (resp === undefined) {\n        throw new Error(\"Unable to simulate transaction\");\n      }\n\n      if (resp.value.err) {\n        throw new Error(`Simulate error: ${resp.value.err.toString()}`);\n      }\n\n      const logs = resp.value.logs;\n\n      if (!logs) {\n        throw new Error(\"Simulated logs not found\");\n      }\n\n      const events = [];\n\n      if (idl.events) {\n        let parser = new EventParser(programId, coder);\n        parser.parseLogs(logs, event => {\n          events.push(event);\n        });\n      }\n\n      return {\n        events,\n        raw: logs\n      };\n    };\n\n    return simulate;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/program/namespace/simulate.ts"],"names":[],"mappings":"AAOA,SAAS,eAAT,QAAgC,YAAhC;AAEA,SAAS,WAAT,QAAmC,UAAnC;AAGA,SAAS,YAAT,QAA6B,aAA7B;AAEA,eAAc,MAAO,eAAP,CAAsB;EACf,OAAL,KAAK,CACjB,KADiB,EAEjB,IAFiB,EAGjB,SAHiB,EAIjB,QAJiB,EAKjB,KALiB,EAMjB,SANiB,EAOjB,GAPiB,EAOT;IAER,MAAM,QAAQ,GAAG,kBAAoD;MAAA,kCAA1C,IAA0C;QAA1C,IAA0C;MAAA;;MACnE,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,IAAJ,CAAf;MACA,MAAM,GAAG,GAAH,IAAU,eAAe,CAAC,KAAD,EAAQ,CAAC,GAAG,IAAJ,CAAR,CAA/B;MACA,IAAI,IAAI,GAEQ,SAFhB;;MAGA,IAAI;QACF,IAAI,GAAG,MAAM,QAAQ,CAAC,QAAT,CAAkB,EAAlB,EAAsB,GAAG,CAAC,OAA1B,EAAmC,GAAG,CAAC,OAAvC,CAAb;MACD,CAFD,CAEE,OAAO,GAAP,EAAY;QACZ,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC,GAAjC;QACA,IAAI,aAAa,GAAG,YAAY,CAAC,KAAb,CAAmB,GAAnB,EAAwB,SAAxB,CAApB;;QACA,IAAI,aAAa,KAAK,IAAtB,EAA4B;UAC1B,MAAM,GAAN;QACD;;QACD,MAAM,aAAN;MACD;;MACD,IAAI,IAAI,KAAK,SAAb,EAAwB;QACtB,MAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;MACD;;MACD,IAAI,IAAI,CAAC,KAAL,CAAW,GAAf,EAAoB;QAClB,MAAM,IAAI,KAAJ,CAAU,mBAAmB,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,QAAf,EAAyB,EAAtD,CAAN;MACD;;MACD,MAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAxB;;MACA,IAAI,CAAC,IAAL,EAAW;QACT,MAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;MACD;;MAED,MAAM,MAAM,GAAY,EAAxB;;MACA,IAAI,GAAG,CAAC,MAAR,EAAgB;QACd,IAAI,MAAM,GAAG,IAAI,WAAJ,CAAgB,SAAhB,EAA2B,KAA3B,CAAb;QACA,MAAM,CAAC,SAAP,CAAiB,IAAjB,EAAwB,KAAD,IAAU;UAC/B,MAAM,CAAC,IAAP,CAAY,KAAZ;QACD,CAFD;MAGD;;MACD,OAAO;QAAE,MAAF;QAAU,GAAG,EAAE;MAAf,CAAP;IACD,CAnCD;;IAqCA,OAAO,QAAP;EACD;;AAhDiC","sourceRoot":"","sourcesContent":["import { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\nexport default class SimulateFactory {\n    static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n        const simulate = async (...args) => {\n            const tx = txFn(...args);\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            let resp = undefined;\n            try {\n                resp = await provider.simulate(tx, ctx.signers, ctx.options);\n            }\n            catch (err) {\n                console.log(\"Translating error\", err);\n                let translatedErr = ProgramError.parse(err, idlErrors);\n                if (translatedErr === null) {\n                    throw err;\n                }\n                throw translatedErr;\n            }\n            if (resp === undefined) {\n                throw new Error(\"Unable to simulate transaction\");\n            }\n            if (resp.value.err) {\n                throw new Error(`Simulate error: ${resp.value.err.toString()}`);\n            }\n            const logs = resp.value.logs;\n            if (!logs) {\n                throw new Error(\"Simulated logs not found\");\n            }\n            const events = [];\n            if (idl.events) {\n                let parser = new EventParser(programId, coder);\n                parser.parseLogs(logs, (event) => {\n                    events.push(event);\n                });\n            }\n            return { events, raw: logs };\n        };\n        return simulate;\n    }\n}\n//# sourceMappingURL=simulate.js.map"]},"metadata":{},"sourceType":"module"}