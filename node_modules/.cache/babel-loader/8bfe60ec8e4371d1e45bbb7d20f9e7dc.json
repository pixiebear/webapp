{"ast":null,"code":"import _toConsumableArray from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { TransactionInstruction } from \"@solana/web3.js\";\nimport { IdlError } from \"../../error\";\nimport { toInstruction, validateAccounts, translateAddress } from \"../common\";\nimport { splitArgsAndCtx } from \"../context\";\n\nvar InstructionNamespaceFactory = /*#__PURE__*/function () {\n  function InstructionNamespaceFactory() {\n    _classCallCheck(this, InstructionNamespaceFactory);\n  }\n\n  _createClass(InstructionNamespaceFactory, null, [{\n    key: \"build\",\n    value: function build(idlIx, encodeFn, programId) {\n      if (idlIx.name === \"_inner\") {\n        throw new IdlError(\"the _inner name is reserved\");\n      }\n\n      var ix = function ix() {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        var _splitArgsAndCtx = splitArgsAndCtx(idlIx, [].concat(args)),\n            _splitArgsAndCtx2 = _slicedToArray(_splitArgsAndCtx, 2),\n            ixArgs = _splitArgsAndCtx2[0],\n            ctx = _splitArgsAndCtx2[1];\n\n        validateAccounts(idlIx.accounts, ctx.accounts);\n        validateInstruction.apply(void 0, [idlIx].concat(args));\n        var keys = ix.accounts(ctx.accounts);\n\n        if (ctx.remainingAccounts !== undefined) {\n          keys.push.apply(keys, _toConsumableArray(ctx.remainingAccounts));\n        }\n\n        if (ctx.__private && ctx.__private.logAccounts) {\n          console.log(\"Outgoing account metas:\", keys);\n        }\n\n        return new TransactionInstruction({\n          keys: keys,\n          programId: programId,\n          data: encodeFn(idlIx.name, toInstruction.apply(void 0, [idlIx].concat(_toConsumableArray(ixArgs))))\n        });\n      }; // Utility fn for ordering the accounts for this instruction.\n\n\n      ix[\"accounts\"] = function () {\n        var accs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts);\n      };\n\n      return ix;\n    }\n  }, {\n    key: \"accountsArray\",\n    value: function accountsArray(ctx, accounts) {\n      return accounts.map(function (acc) {\n        // Nested accounts.\n        var nestedAccounts = \"accounts\" in acc ? acc.accounts : undefined;\n\n        if (nestedAccounts !== undefined) {\n          var rpcAccs = ctx[acc.name];\n          return InstructionNamespaceFactory.accountsArray(rpcAccs, nestedAccounts).flat();\n        } else {\n          var account = acc;\n          return {\n            pubkey: translateAddress(ctx[acc.name]),\n            isWritable: account.isMut,\n            isSigner: account.isSigner\n          };\n        }\n      }).flat();\n    }\n  }]);\n\n  return InstructionNamespaceFactory;\n}(); // Throws error if any argument required for the `ix` is not given.\n\n\nexport { InstructionNamespaceFactory as default };\n\nfunction validateInstruction(ix) {// todo\n}","map":{"version":3,"sources":["../../../../src/program/namespace/instruction.ts"],"names":[],"mappings":";;;;AAAA,SAGE,sBAHF,QAIO,iBAJP;AAMA,SAAS,QAAT,QAAyB,aAAzB;AACA,SACE,aADF,EAEE,gBAFF,EAGE,gBAHF,QAKO,WALP;AAMA,SAAmB,eAAnB,QAA0C,YAA1C;;IAEqB,2B;;;;;;;WACZ,eACL,KADK,EAEL,QAFK,EAGL,SAHK,EAGe;MAEpB,IAAI,KAAK,CAAC,IAAN,KAAe,QAAnB,EAA6B;QAC3B,MAAM,IAAI,QAAJ,CAAa,6BAAb,CAAN;MACD;;MAED,IAAM,EAAE,GAAG,SAAL,EAAK,GAA2C;QAAA,kCAAvC,IAAuC;UAAvC,IAAuC;QAAA;;QACpD,uBAAsB,eAAe,CAAC,KAAD,YAAY,IAAZ,EAArC;QAAA;QAAA,IAAO,MAAP;QAAA,IAAe,GAAf;;QACA,gBAAgB,CAAC,KAAK,CAAC,QAAP,EAAiB,GAAG,CAAC,QAArB,CAAhB;QACA,mBAAmB,MAAnB,UAAoB,KAApB,SAA8B,IAA9B;QAEA,IAAM,IAAI,GAAG,EAAE,CAAC,QAAH,CAAY,GAAG,CAAC,QAAhB,CAAb;;QAEA,IAAI,GAAG,CAAC,iBAAJ,KAA0B,SAA9B,EAAyC;UACvC,IAAI,CAAC,IAAL,OAAA,IAAI,qBAAS,GAAG,CAAC,iBAAb,EAAJ;QACD;;QAED,IAAI,GAAG,CAAC,SAAJ,IAAiB,GAAG,CAAC,SAAJ,CAAc,WAAnC,EAAgD;UAC9C,OAAO,CAAC,GAAR,CAAY,yBAAZ,EAAuC,IAAvC;QACD;;QACD,OAAO,IAAI,sBAAJ,CAA2B;UAChC,IAAI,EAAJ,IADgC;UAEhC,SAAS,EAAT,SAFgC;UAGhC,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,IAAP,EAAa,aAAa,MAAb,UAAc,KAAd,4BAAwB,MAAxB,GAAb;QAHkB,CAA3B,CAAP;MAKD,CAnBD,CANoB,CA2BpB;;;MACA,EAAE,CAAC,UAAD,CAAF,GAAiB,YAAwB;QAAA,IAAvB,IAAuB,uEAAN,EAAM;QACvC,OAAO,2BAA2B,CAAC,aAA5B,CAA0C,IAA1C,EAAgD,KAAK,CAAC,QAAtD,CAAP;MACD,CAFD;;MAIA,OAAO,EAAP;IACD;;;WAEM,uBACL,GADK,EAEL,QAFK,EAEqB;MAE1B,OAAO,QAAQ,CACZ,GADI,CACA,UAAC,GAAD,EAAwB;QAC3B;QACA,IAAM,cAAc,GAClB,cAAc,GAAd,GAAoB,GAAG,CAAC,QAAxB,GAAmC,SADrC;;QAEA,IAAI,cAAc,KAAK,SAAvB,EAAkC;UAChC,IAAM,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,IAAL,CAAnB;UACA,OAAO,2BAA2B,CAAC,aAA5B,CACL,OADK,EAEL,cAFK,EAGL,IAHK,EAAP;QAID,CAND,MAMO;UACL,IAAM,OAAO,GAAe,GAA5B;UACA,OAAO;YACL,MAAM,EAAE,gBAAgB,CAAC,GAAG,CAAC,GAAG,CAAC,IAAL,CAAJ,CADnB;YAEL,UAAU,EAAE,OAAO,CAAC,KAFf;YAGL,QAAQ,EAAE,OAAO,CAAC;UAHb,CAAP;QAKD;MACF,CAnBI,EAoBJ,IApBI,EAAP;IAqBD;;;;KAgDH;;;SAhHqB,2B;;AAiHrB,SAAS,mBAAT,CAA6B,EAA7B,EAA+D,CAC7D;AACD","sourceRoot":"","sourcesContent":["import { TransactionInstruction, } from \"@solana/web3.js\";\nimport { IdlError } from \"../../error\";\nimport { toInstruction, validateAccounts, translateAddress, } from \"../common\";\nimport { splitArgsAndCtx } from \"../context\";\nexport default class InstructionNamespaceFactory {\n    static build(idlIx, encodeFn, programId) {\n        if (idlIx.name === \"_inner\") {\n            throw new IdlError(\"the _inner name is reserved\");\n        }\n        const ix = (...args) => {\n            const [ixArgs, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            validateAccounts(idlIx.accounts, ctx.accounts);\n            validateInstruction(idlIx, ...args);\n            const keys = ix.accounts(ctx.accounts);\n            if (ctx.remainingAccounts !== undefined) {\n                keys.push(...ctx.remainingAccounts);\n            }\n            if (ctx.__private && ctx.__private.logAccounts) {\n                console.log(\"Outgoing account metas:\", keys);\n            }\n            return new TransactionInstruction({\n                keys,\n                programId,\n                data: encodeFn(idlIx.name, toInstruction(idlIx, ...ixArgs)),\n            });\n        };\n        // Utility fn for ordering the accounts for this instruction.\n        ix[\"accounts\"] = (accs = {}) => {\n            return InstructionNamespaceFactory.accountsArray(accs, idlIx.accounts);\n        };\n        return ix;\n    }\n    static accountsArray(ctx, accounts) {\n        return accounts\n            .map((acc) => {\n            // Nested accounts.\n            const nestedAccounts = \"accounts\" in acc ? acc.accounts : undefined;\n            if (nestedAccounts !== undefined) {\n                const rpcAccs = ctx[acc.name];\n                return InstructionNamespaceFactory.accountsArray(rpcAccs, nestedAccounts).flat();\n            }\n            else {\n                const account = acc;\n                return {\n                    pubkey: translateAddress(ctx[acc.name]),\n                    isWritable: account.isMut,\n                    isSigner: account.isSigner,\n                };\n            }\n        })\n            .flat();\n    }\n}\n// Throws error if any argument required for the `ix` is not given.\nfunction validateInstruction(ix, ...args) {\n    // todo\n}\n//# sourceMappingURL=instruction.js.map"]},"metadata":{},"sourceType":"module"}