{"ast":null,"code":"import { splitArgsAndCtx } from \"../context\";\nimport { ProgramError } from \"../../error\";\nexport default class RpcFactory {\n  static build(idlIx, txFn, idlErrors, provider) {\n    const rpc = async function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const tx = txFn(...args);\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n\n      try {\n        const txSig = await provider.send(tx, ctx.signers, ctx.options);\n        return txSig;\n      } catch (err) {\n        console.log(\"Translating error\", err);\n        let translatedErr = ProgramError.parse(err, idlErrors);\n\n        if (translatedErr === null) {\n          throw err;\n        }\n\n        throw translatedErr;\n      }\n    };\n\n    return rpc;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/program/namespace/rpc.ts"],"names":[],"mappings":"AAGA,SAAkB,eAAlB,QAAyC,YAAzC;AAEA,SAAS,YAAT,QAA6B,aAA7B;AAEA,eAAc,MAAO,UAAP,CAAiB;EACV,OAAL,KAAK,CACjB,KADiB,EAEjB,IAFiB,EAGjB,SAHiB,EAIjB,QAJiB,EAIC;IAElB,MAAM,GAAG,GAAG,kBAAwD;MAAA,kCAA9C,IAA8C;QAA9C,IAA8C;MAAA;;MAClE,MAAM,EAAE,GAAG,IAAI,CAAC,GAAG,IAAJ,CAAf;MACA,MAAM,GAAG,GAAH,IAAU,eAAe,CAAC,KAAD,EAAQ,CAAC,GAAG,IAAJ,CAAR,CAA/B;;MACA,IAAI;QACF,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,IAAT,CAAc,EAAd,EAAkB,GAAG,CAAC,OAAtB,EAA+B,GAAG,CAAC,OAAnC,CAApB;QACA,OAAO,KAAP;MACD,CAHD,CAGE,OAAO,GAAP,EAAY;QACZ,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC,GAAjC;QACA,IAAI,aAAa,GAAG,YAAY,CAAC,KAAb,CAAmB,GAAnB,EAAwB,SAAxB,CAApB;;QACA,IAAI,aAAa,KAAK,IAAtB,EAA4B;UAC1B,MAAM,GAAN;QACD;;QACD,MAAM,aAAN;MACD;IACF,CAdD;;IAgBA,OAAO,GAAP;EACD;;AAxB4B","sourceRoot":"","sourcesContent":["import { splitArgsAndCtx } from \"../context\";\nimport { ProgramError } from \"../../error\";\nexport default class RpcFactory {\n    static build(idlIx, txFn, idlErrors, provider) {\n        const rpc = async (...args) => {\n            const tx = txFn(...args);\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            try {\n                const txSig = await provider.send(tx, ctx.signers, ctx.options);\n                return txSig;\n            }\n            catch (err) {\n                console.log(\"Translating error\", err);\n                let translatedErr = ProgramError.parse(err, idlErrors);\n                if (translatedErr === null) {\n                    throw err;\n                }\n                throw translatedErr;\n            }\n        };\n        return rpc;\n    }\n}\n//# sourceMappingURL=rpc.js.map"]},"metadata":{},"sourceType":"module"}