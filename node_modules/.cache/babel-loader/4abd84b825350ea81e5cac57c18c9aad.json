{"ast":null,"code":"import * as base64 from \"base64-js\";\nimport { sha256 } from \"js-sha256\";\nimport { IdlCoder } from \"./idl\";\nexport class EventCoder {\n  constructor(idl) {\n    if (idl.events === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n\n    const layouts = idl.events.map(event => {\n      let eventTypeDef = {\n        name: event.name,\n        type: {\n          kind: \"struct\",\n          fields: event.fields.map(f => {\n            return {\n              name: f.name,\n              type: f.type\n            };\n          })\n        }\n      };\n      return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];\n    }); // @ts-ignore\n\n    this.layouts = new Map(layouts);\n    this.discriminators = new Map(idl.events === undefined ? [] : idl.events.map(e => [base64.fromByteArray(eventDiscriminator(e.name)), e.name]));\n  }\n\n  decode(log) {\n    let logArr; // This will throw if log length is not a multiple of 4.\n\n    try {\n      logArr = Buffer.from(base64.toByteArray(log));\n    } catch (e) {\n      return null;\n    }\n\n    const disc = base64.fromByteArray(logArr.slice(0, 8)); // Only deserialize if the discriminator implies a proper event.\n\n    const eventName = this.discriminators.get(disc);\n\n    if (eventName === undefined) {\n      return null;\n    }\n\n    const layout = this.layouts.get(eventName);\n\n    if (!layout) {\n      throw new Error(`Unknown event: ${eventName}`);\n    }\n\n    const data = layout.decode(logArr.slice(8));\n    return {\n      data,\n      name: eventName\n    };\n  }\n\n}\nexport function eventDiscriminator(name) {\n  return Buffer.from(sha256.digest(`event:${name}`)).slice(0, 8);\n}","map":{"version":3,"sources":["../../../src/coder/event.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAZ,MAAwB,WAAxB;AAEA,SAAS,MAAT,QAAuB,WAAvB;AAGA,SAAS,QAAT,QAAyB,OAAzB;AAEA,OAAM,MAAO,UAAP,CAAiB;EAWrB,WAAA,CAAmB,GAAnB,EAA2B;IACzB,IAAI,GAAG,CAAC,MAAJ,KAAe,SAAnB,EAA8B;MAC5B,KAAK,OAAL,GAAe,IAAI,GAAJ,EAAf;MACA;IACD;;IACD,MAAM,OAAO,GAAG,GAAG,CAAC,MAAJ,CAAW,GAAX,CAAgB,KAAD,IAAU;MACvC,IAAI,YAAY,GAAe;QAC7B,IAAI,EAAE,KAAK,CAAC,IADiB;QAE7B,IAAI,EAAE;UACJ,IAAI,EAAE,QADF;UAEJ,MAAM,EAAE,KAAK,CAAC,MAAN,CAAa,GAAb,CAAkB,CAAD,IAAM;YAC7B,OAAO;cAAE,IAAI,EAAE,CAAC,CAAC,IAAV;cAAgB,IAAI,EAAE,CAAC,CAAC;YAAxB,CAAP;UACD,CAFO;QAFJ;MAFuB,CAA/B;MASA,OAAO,CAAC,KAAK,CAAC,IAAP,EAAa,QAAQ,CAAC,aAAT,CAAuB,YAAvB,EAAqC,GAAG,CAAC,KAAzC,CAAb,CAAP;IACD,CAXe,CAAhB,CALyB,CAiBzB;;IACA,KAAK,OAAL,GAAe,IAAI,GAAJ,CAAQ,OAAR,CAAf;IAEA,KAAK,cAAL,GAAsB,IAAI,GAAJ,CACpB,GAAG,CAAC,MAAJ,KAAe,SAAf,GACI,EADJ,GAEI,GAAG,CAAC,MAAJ,CAAW,GAAX,CAAgB,CAAD,IAAO,CACpB,MAAM,CAAC,aAAP,CAAqB,kBAAkB,CAAC,CAAC,CAAC,IAAH,CAAvC,CADoB,EAEpB,CAAC,CAAC,IAFkB,CAAtB,CAHgB,CAAtB;EAQD;;EAEM,MAAM,CAA8B,GAA9B,EAAyC;IACpD,IAAI,MAAJ,CADoD,CAEpD;;IACA,IAAI;MACF,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,WAAP,CAAmB,GAAnB,CAAZ,CAAT;IACD,CAFD,CAEE,OAAO,CAAP,EAAU;MACV,OAAO,IAAP;IACD;;IACD,MAAM,IAAI,GAAG,MAAM,CAAC,aAAP,CAAqB,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAArB,CAAb,CARoD,CAUpD;;IACA,MAAM,SAAS,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,IAAxB,CAAlB;;IACA,IAAI,SAAS,KAAK,SAAlB,EAA6B;MAC3B,OAAO,IAAP;IACD;;IAED,MAAM,MAAM,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,SAAjB,CAAf;;IACA,IAAI,CAAC,MAAL,EAAa;MACX,MAAM,IAAI,KAAJ,CAAU,kBAAkB,SAAS,EAArC,CAAN;IACD;;IACD,MAAM,IAAI,GAAG,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,KAAP,CAAa,CAAb,CAAd,CAAb;IACA,OAAO;MAAE,IAAF;MAAQ,IAAI,EAAE;IAAd,CAAP;EACD;;AA/DoB;AAkEvB,OAAM,SAAU,kBAAV,CAA6B,IAA7B,EAAyC;EAC7C,OAAO,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,MAAP,CAAc,SAAS,IAAI,EAA3B,CAAZ,EAA4C,KAA5C,CAAkD,CAAlD,EAAqD,CAArD,CAAP;AACD","sourceRoot":"","sourcesContent":["import * as base64 from \"base64-js\";\nimport { sha256 } from \"js-sha256\";\nimport { IdlCoder } from \"./idl\";\nexport class EventCoder {\n    constructor(idl) {\n        if (idl.events === undefined) {\n            this.layouts = new Map();\n            return;\n        }\n        const layouts = idl.events.map((event) => {\n            let eventTypeDef = {\n                name: event.name,\n                type: {\n                    kind: \"struct\",\n                    fields: event.fields.map((f) => {\n                        return { name: f.name, type: f.type };\n                    }),\n                },\n            };\n            return [event.name, IdlCoder.typeDefLayout(eventTypeDef, idl.types)];\n        });\n        // @ts-ignore\n        this.layouts = new Map(layouts);\n        this.discriminators = new Map(idl.events === undefined\n            ? []\n            : idl.events.map((e) => [\n                base64.fromByteArray(eventDiscriminator(e.name)),\n                e.name,\n            ]));\n    }\n    decode(log) {\n        let logArr;\n        // This will throw if log length is not a multiple of 4.\n        try {\n            logArr = Buffer.from(base64.toByteArray(log));\n        }\n        catch (e) {\n            return null;\n        }\n        const disc = base64.fromByteArray(logArr.slice(0, 8));\n        // Only deserialize if the discriminator implies a proper event.\n        const eventName = this.discriminators.get(disc);\n        if (eventName === undefined) {\n            return null;\n        }\n        const layout = this.layouts.get(eventName);\n        if (!layout) {\n            throw new Error(`Unknown event: ${eventName}`);\n        }\n        const data = layout.decode(logArr.slice(8));\n        return { data, name: eventName };\n    }\n}\nexport function eventDiscriminator(name) {\n    return Buffer.from(sha256.digest(`event:${name}`)).slice(0, 8);\n}\n//# sourceMappingURL=event.js.map"]},"metadata":{},"sourceType":"module"}