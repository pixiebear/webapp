{"ast":null,"code":"/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Support for translating between Buffer instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n'use strict';\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\n\nvar _assertThisInitialized = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/assertThisInitialized.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _inherits = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/inherits.js\").default;\n\nvar _createSuper = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/createSuper.js\").default;\n\nvar _classCallCheck = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\nvar Layout = /*#__PURE__*/function () {\n  function Layout(span, property) {\n    _classCallCheck(this, Layout);\n\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n\n\n    this.span = span;\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n\n    this.property = property;\n  }\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n\n\n  _createClass(Layout, [{\n    key: \"makeDestinationObject\",\n    value: function makeDestinationObject() {\n      return {};\n    }\n    /**\n     * Decode from a Buffer into an JavaScript value.\n     *\n     * @param {Buffer} b - the buffer from which encoded data is read.\n     *\n     * @param {Number} [offset] - the offset at which the encoded data\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @returns {(Number|Array|Object)} - the value of the decoded data.\n     *\n     * @abstract\n     */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b, offset) {\n      throw new Error('Layout is abstract');\n    }\n    /**\n     * Encode a JavaScript value into a Buffer.\n     *\n     * @param {(Number|Array|Object)} src - the value to be encoded into\n     * the buffer.  The type accepted depends on the (sub-)type of {@link\n     * Layout}.\n     *\n     * @param {Buffer} b - the buffer into which encoded data will be\n     * written.\n     *\n     * @param {Number} [offset] - the offset at which the encoded data\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @returns {Number} - the number of bytes encoded, including the\n     * space skipped for internal padding, but excluding data such as\n     * {@link Sequence#count|lengths} when stored {@link\n     * ExternalLayout|externally}.  This is the adjustment to `offset`\n     * producing the offset where data for the next layout would be\n     * written.\n     *\n     * @abstract\n     */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      throw new Error('Layout is abstract');\n    }\n    /**\n     * Calculate the span of a specific instance of a layout.\n     *\n     * @param {Buffer} b - the buffer that contains an encoded instance.\n     *\n     * @param {Number} [offset] - the offset at which the encoded instance\n     * starts.  If absent a zero offset is inferred.\n     *\n     * @return {Number} - the number of bytes covered by the layout\n     * instance.  If this method is not overridden in a subclass the\n     * definition-time constant {@link Layout#span|span} will be\n     * returned.\n     *\n     * @throws {RangeError} - if the length of the value cannot be\n     * determined.\n     */\n\n  }, {\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      if (0 > this.span) {\n        throw new RangeError('indeterminate span');\n      }\n\n      return this.span;\n    }\n    /**\n     * Replicate the layout using a new property.\n     *\n     * This function must be used to get a structurally-equivalent layout\n     * with a different name since all {@link Layout} instances are\n     * immutable.\n     *\n     * **NOTE** This is a shallow copy.  All fields except {@link\n     * Layout#property|property} are strictly equal to the origin layout.\n     *\n     * @param {String} property - the value for {@link\n     * Layout#property|property} in the replica.\n     *\n     * @returns {Layout} - the copy with {@link Layout#property|property}\n     * set to `property`.\n     */\n\n  }, {\n    key: \"replicate\",\n    value: function replicate(property) {\n      var rv = Object.create(this.constructor.prototype);\n      Object.assign(rv, this);\n      rv.property = property;\n      return rv;\n    }\n    /**\n     * Create an object from layout properties and an array of values.\n     *\n     * **NOTE** This function returns `undefined` if invoked on a layout\n     * that does not return its value as an Object.  Objects are\n     * returned for things that are a {@link Structure}, which includes\n     * {@link VariantLayout|variant layouts} if they are structures, and\n     * excludes {@link Union}s.  If you want this feature for a union\n     * you must use {@link Union.getVariant|getVariant} to select the\n     * desired layout.\n     *\n     * @param {Array} values - an array of values that correspond to the\n     * default order for properties.  As with {@link Layout#decode|decode}\n     * layout elements that have no property name are skipped when\n     * iterating over the array values.  Only the top-level properties are\n     * assigned; arguments are not assigned to properties of contained\n     * layouts.  Any unused values are ignored.\n     *\n     * @return {(Object|undefined)}\n     */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      return undefined;\n    }\n  }]);\n\n  return Layout;\n}();\n\nexports.Layout = Layout;\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\n\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n\n  return name;\n}\n\nexports.nameWithProperty = nameWithProperty;\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\n\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n\n  if (Class.hasOwnProperty('layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n\n  if (!(layout && layout instanceof Layout)) {\n    throw new TypeError('layout must be a Layout');\n  }\n\n  if (layout.hasOwnProperty('boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n\n  layout.makeDestinationObject = function () {\n    return new Class();\n  };\n\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function value(b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function value(b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true\n  });\n}\n\nexports.bindConstructorLayout = bindConstructorLayout;\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\n\nvar ExternalLayout = /*#__PURE__*/function (_Layout) {\n  _inherits(ExternalLayout, _Layout);\n\n  var _super = _createSuper(ExternalLayout);\n\n  function ExternalLayout() {\n    _classCallCheck(this, ExternalLayout);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ExternalLayout, [{\n    key: \"isCount\",\n    value:\n    /**\n     * Return `true` iff the external layout decodes to an unsigned\n     * integer layout.\n     *\n     * In that case it can be used as the source of {@link\n     * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n     * or as {@link UnionLayoutDiscriminator#layout|external union\n     * discriminators}.\n     *\n     * @abstract\n     */\n    function isCount() {\n      throw new Error('ExternalLayout is abstract');\n    }\n  }]);\n\n  return ExternalLayout;\n}(Layout);\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\n\n\nvar GreedyCount = /*#__PURE__*/function (_ExternalLayout) {\n  _inherits(GreedyCount, _ExternalLayout);\n\n  var _super2 = _createSuper(GreedyCount);\n\n  function GreedyCount(elementSpan, property) {\n    var _this;\n\n    _classCallCheck(this, GreedyCount);\n\n    if (undefined === elementSpan) {\n      elementSpan = 1;\n    }\n\n    if (!Number.isInteger(elementSpan) || 0 >= elementSpan) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n\n    _this = _super2.call(this, -1, property);\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n\n    _this.elementSpan = elementSpan;\n    return _this;\n  }\n  /** @override */\n\n\n  _createClass(GreedyCount, [{\n    key: \"isCount\",\n    value: function isCount() {\n      return true;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var rem = b.length - offset;\n      return Math.floor(rem / this.elementSpan);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      return 0;\n    }\n  }]);\n\n  return GreedyCount;\n}(ExternalLayout);\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\n\n\nvar OffsetLayout = /*#__PURE__*/function (_ExternalLayout2) {\n  _inherits(OffsetLayout, _ExternalLayout2);\n\n  var _super3 = _createSuper(OffsetLayout);\n\n  function OffsetLayout(layout, offset, property) {\n    var _this2;\n\n    _classCallCheck(this, OffsetLayout);\n\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    } else if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n\n    _this2 = _super3.call(this, layout.span, property || layout.property);\n    /** The subordinated layout. */\n\n    _this2.layout = layout;\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Buffer\n     * being accessed.  */\n\n    _this2.offset = offset;\n    return _this2;\n  }\n  /** @override */\n\n\n  _createClass(OffsetLayout, [{\n    key: \"isCount\",\n    value: function isCount() {\n      return this.layout instanceof UInt || this.layout instanceof UIntBE;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      return this.layout.decode(b, offset + this.offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      return this.layout.encode(src, b, offset + this.offset);\n    }\n  }]);\n\n  return OffsetLayout;\n}(ExternalLayout);\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar UInt = /*#__PURE__*/function (_Layout2) {\n  _inherits(UInt, _Layout2);\n\n  var _super4 = _createSuper(UInt);\n\n  function UInt(span, property) {\n    var _this3;\n\n    _classCallCheck(this, UInt);\n\n    _this3 = _super4.call(this, span, property);\n\n    if (6 < _this3.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this3;\n  }\n  /** @override */\n\n\n  _createClass(UInt, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      return b.readUIntLE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      b.writeUIntLE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return UInt;\n}(Layout);\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar UIntBE = /*#__PURE__*/function (_Layout3) {\n  _inherits(UIntBE, _Layout3);\n\n  var _super5 = _createSuper(UIntBE);\n\n  function UIntBE(span, property) {\n    var _this4;\n\n    _classCallCheck(this, UIntBE);\n\n    _this4 = _super5.call(this, span, property);\n\n    if (6 < _this4.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this4;\n  }\n  /** @override */\n\n\n  _createClass(UIntBE, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      return b.readUIntBE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      b.writeUIntBE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return UIntBE;\n}(Layout);\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar Int = /*#__PURE__*/function (_Layout4) {\n  _inherits(Int, _Layout4);\n\n  var _super6 = _createSuper(Int);\n\n  function Int(span, property) {\n    var _this5;\n\n    _classCallCheck(this, Int);\n\n    _this5 = _super6.call(this, span, property);\n\n    if (6 < _this5.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this5;\n  }\n  /** @override */\n\n\n  _createClass(Int, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      return b.readIntLE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      b.writeIntLE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return Int;\n}(Layout);\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar IntBE = /*#__PURE__*/function (_Layout5) {\n  _inherits(IntBE, _Layout5);\n\n  var _super7 = _createSuper(IntBE);\n\n  function IntBE(span, property) {\n    var _this6;\n\n    _classCallCheck(this, IntBE);\n\n    _this6 = _super7.call(this, span, property);\n\n    if (6 < _this6.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n\n    return _this6;\n  }\n  /** @override */\n\n\n  _createClass(IntBE, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      return b.readIntBE(offset, this.span);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      b.writeIntBE(src, offset, this.span);\n      return this.span;\n    }\n  }]);\n\n  return IntBE;\n}(Layout);\n\nvar V2E32 = Math.pow(2, 32);\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\n\nfunction divmodInt64(src) {\n  var hi32 = Math.floor(src / V2E32);\n  var lo32 = src - hi32 * V2E32;\n  return {\n    hi32: hi32,\n    lo32: lo32\n  };\n}\n/* Reconstruct Number from quotient and non-negative remainder */\n\n\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\n\nvar NearUInt64 = /*#__PURE__*/function (_Layout6) {\n  _inherits(NearUInt64, _Layout6);\n\n  var _super8 = _createSuper(NearUInt64);\n\n  function NearUInt64(property) {\n    _classCallCheck(this, NearUInt64);\n\n    return _super8.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearUInt64, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var lo32 = b.readUInt32LE(offset);\n      var hi32 = b.readUInt32LE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var split = divmodInt64(src);\n      b.writeUInt32LE(split.lo32, offset);\n      b.writeUInt32LE(split.hi32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearUInt64;\n}(Layout);\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\n\nvar NearUInt64BE = /*#__PURE__*/function (_Layout7) {\n  _inherits(NearUInt64BE, _Layout7);\n\n  var _super9 = _createSuper(NearUInt64BE);\n\n  function NearUInt64BE(property) {\n    _classCallCheck(this, NearUInt64BE);\n\n    return _super9.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearUInt64BE, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var hi32 = b.readUInt32BE(offset);\n      var lo32 = b.readUInt32BE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var split = divmodInt64(src);\n      b.writeUInt32BE(split.hi32, offset);\n      b.writeUInt32BE(split.lo32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearUInt64BE;\n}(Layout);\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\n\nvar NearInt64 = /*#__PURE__*/function (_Layout8) {\n  _inherits(NearInt64, _Layout8);\n\n  var _super10 = _createSuper(NearInt64);\n\n  function NearInt64(property) {\n    _classCallCheck(this, NearInt64);\n\n    return _super10.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearInt64, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var lo32 = b.readUInt32LE(offset);\n      var hi32 = b.readInt32LE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var split = divmodInt64(src);\n      b.writeUInt32LE(split.lo32, offset);\n      b.writeInt32LE(split.hi32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearInt64;\n}(Layout);\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\n\n\nvar NearInt64BE = /*#__PURE__*/function (_Layout9) {\n  _inherits(NearInt64BE, _Layout9);\n\n  var _super11 = _createSuper(NearInt64BE);\n\n  function NearInt64BE(property) {\n    _classCallCheck(this, NearInt64BE);\n\n    return _super11.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(NearInt64BE, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var hi32 = b.readInt32BE(offset);\n      var lo32 = b.readUInt32BE(offset + 4);\n      return roundedInt64(hi32, lo32);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var split = divmodInt64(src);\n      b.writeInt32BE(split.hi32, offset);\n      b.writeUInt32BE(split.lo32, offset + 4);\n      return 8;\n    }\n  }]);\n\n  return NearInt64BE;\n}(Layout);\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar Float = /*#__PURE__*/function (_Layout10) {\n  _inherits(Float, _Layout10);\n\n  var _super12 = _createSuper(Float);\n\n  function Float(property) {\n    _classCallCheck(this, Float);\n\n    return _super12.call(this, 4, property);\n  }\n  /** @override */\n\n\n  _createClass(Float, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      return b.readFloatLE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      b.writeFloatLE(src, offset);\n      return 4;\n    }\n  }]);\n\n  return Float;\n}(Layout);\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar FloatBE = /*#__PURE__*/function (_Layout11) {\n  _inherits(FloatBE, _Layout11);\n\n  var _super13 = _createSuper(FloatBE);\n\n  function FloatBE(property) {\n    _classCallCheck(this, FloatBE);\n\n    return _super13.call(this, 4, property);\n  }\n  /** @override */\n\n\n  _createClass(FloatBE, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      return b.readFloatBE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      b.writeFloatBE(src, offset);\n      return 4;\n    }\n  }]);\n\n  return FloatBE;\n}(Layout);\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar Double = /*#__PURE__*/function (_Layout12) {\n  _inherits(Double, _Layout12);\n\n  var _super14 = _createSuper(Double);\n\n  function Double(property) {\n    _classCallCheck(this, Double);\n\n    return _super14.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(Double, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      return b.readDoubleLE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      b.writeDoubleLE(src, offset);\n      return 8;\n    }\n  }]);\n\n  return Double;\n}(Layout);\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar DoubleBE = /*#__PURE__*/function (_Layout13) {\n  _inherits(DoubleBE, _Layout13);\n\n  var _super15 = _createSuper(DoubleBE);\n\n  function DoubleBE(property) {\n    _classCallCheck(this, DoubleBE);\n\n    return _super15.call(this, 8, property);\n  }\n  /** @override */\n\n\n  _createClass(DoubleBE, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      return b.readDoubleBE(offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      b.writeDoubleBE(src, offset);\n      return 8;\n    }\n  }]);\n\n  return DoubleBE;\n}(Layout);\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar Sequence = /*#__PURE__*/function (_Layout14) {\n  _inherits(Sequence, _Layout14);\n\n  var _super16 = _createSuper(Sequence);\n\n  function Sequence(elementLayout, count, property) {\n    var _this7;\n\n    _classCallCheck(this, Sequence);\n\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n\n    if (!(count instanceof ExternalLayout && count.isCount() || Number.isInteger(count) && 0 <= count)) {\n      throw new TypeError('count must be non-negative integer ' + 'or an unsigned integer ExternalLayout');\n    }\n\n    var span = -1;\n\n    if (!(count instanceof ExternalLayout) && 0 < elementLayout.span) {\n      span = count * elementLayout.span;\n    }\n\n    _this7 = _super16.call(this, span, property);\n    /** The layout for individual elements of the sequence. */\n\n    _this7.elementLayout = elementLayout;\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n\n    _this7.count = count;\n    return _this7;\n  }\n  /** @override */\n\n\n  _createClass(Sequence, [{\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      if (0 <= this.span) {\n        return this.span;\n      }\n\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var span = 0;\n      var count = this.count;\n\n      if (count instanceof ExternalLayout) {\n        count = count.decode(b, offset);\n      }\n\n      if (0 < this.elementLayout.span) {\n        span = count * this.elementLayout.span;\n      } else {\n        var idx = 0;\n\n        while (idx < count) {\n          span += this.elementLayout.getSpan(b, offset + span);\n          ++idx;\n        }\n      }\n\n      return span;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var rv = [];\n      var i = 0;\n      var count = this.count;\n\n      if (count instanceof ExternalLayout) {\n        count = count.decode(b, offset);\n      }\n\n      while (i < count) {\n        rv.push(this.elementLayout.decode(b, offset));\n        offset += this.elementLayout.getSpan(b, offset);\n        i += 1;\n      }\n\n      return rv;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n     *\n     * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n     * the unused space in the buffer is left unchanged.  If `src` is\n     * longer than {@link Sequence#count|count} the unneeded elements are\n     * ignored.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var elo = this.elementLayout;\n      var span = src.reduce(function (span, v) {\n        return span + elo.encode(v, b, offset + span);\n      }, 0);\n\n      if (this.count instanceof ExternalLayout) {\n        this.count.encode(src.length, b, offset);\n      }\n\n      return span;\n    }\n  }]);\n\n  return Sequence;\n}(Layout);\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\n\n\nvar Structure = /*#__PURE__*/function (_Layout15) {\n  _inherits(Structure, _Layout15);\n\n  var _super17 = _createSuper(Structure);\n\n  function Structure(fields, property, decodePrefixes) {\n    var _this8;\n\n    _classCallCheck(this, Structure);\n\n    if (!(Array.isArray(fields) && fields.reduce(function (acc, v) {\n      return acc && v instanceof Layout;\n    }, true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n\n    if ('boolean' === typeof property && undefined === decodePrefixes) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n    /* Verify absence of unnamed variable-length fields. */\n\n\n    var _iterator = _createForOfIteratorHelper(fields),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var fd = _step.value;\n\n        if (0 > fd.span && undefined === fd.property) {\n          throw new Error('fields cannot contain unnamed variable-length layout');\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var span = -1;\n\n    try {\n      span = fields.reduce(function (span, fd) {\n        return span + fd.getSpan();\n      }, 0);\n    } catch (e) {}\n\n    _this8 = _super17.call(this, span, property);\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n\n    _this8.fields = fields;\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n\n    _this8.decodePrefixes = !!decodePrefixes;\n    return _this8;\n  }\n  /** @override */\n\n\n  _createClass(Structure, [{\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      if (0 <= this.span) {\n        return this.span;\n      }\n\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var span = 0;\n\n      try {\n        span = this.fields.reduce(function (span, fd) {\n          var fsp = fd.getSpan(b, offset);\n          offset += fsp;\n          return span + fsp;\n        }, 0);\n      } catch (e) {\n        throw new RangeError('indeterminate span');\n      }\n\n      return span;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var dest = this.makeDestinationObject();\n\n      var _iterator2 = _createForOfIteratorHelper(this.fields),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var fd = _step2.value;\n\n          if (undefined !== fd.property) {\n            dest[fd.property] = fd.decode(b, offset);\n          }\n\n          offset += fd.getSpan(b, offset);\n\n          if (this.decodePrefixes && b.length === offset) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Structure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the buffer is\n     * left unmodified. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var firstOffset = offset;\n      var lastOffset = 0;\n      var lastWrote = 0;\n\n      var _iterator3 = _createForOfIteratorHelper(this.fields),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var fd = _step3.value;\n          var span = fd.span;\n          lastWrote = 0 < span ? span : 0;\n\n          if (undefined !== fd.property) {\n            var fv = src[fd.property];\n\n            if (undefined !== fv) {\n              lastWrote = fd.encode(fv, b, offset);\n\n              if (0 > span) {\n                /* Read the as-encoded span, which is not necessarily the\n                 * same as what we wrote. */\n                span = fd.getSpan(b, offset);\n              }\n            }\n          }\n\n          lastOffset = offset;\n          offset += span;\n        }\n        /* Use (lastOffset + lastWrote) instead of offset because the last\n         * item may have had a dynamic length and we don't want to include\n         * the padding between it and the end of the space reserved for\n         * it. */\n\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return lastOffset + lastWrote - firstOffset;\n    }\n    /** @override */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      var dest = this.makeDestinationObject();\n\n      var _iterator4 = _createForOfIteratorHelper(this.fields),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var fd = _step4.value;\n\n          if (undefined !== fd.property && 0 < values.length) {\n            dest[fd.property] = values.shift();\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return dest;\n    }\n    /**\n     * Get access to the layout of a given property.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Layout} - the layout associated with `property`, or\n     * undefined if there is no such property.\n     */\n\n  }, {\n    key: \"layoutFor\",\n    value: function layoutFor(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(this.fields),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var fd = _step5.value;\n\n          if (fd.property === property) {\n            return fd;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n    /**\n     * Get the offset of a structure member.\n     *\n     * @param {String} property - the structure member of interest.\n     *\n     * @return {Number} - the offset in bytes to the start of `property`\n     * within the structure, or undefined if `property` is not a field\n     * within the structure.  If the property is a member but follows a\n     * variable-length structure member a negative number will be\n     * returned.\n     */\n\n  }, {\n    key: \"offsetOf\",\n    value: function offsetOf(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n\n      var offset = 0;\n\n      var _iterator6 = _createForOfIteratorHelper(this.fields),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var fd = _step6.value;\n\n          if (fd.property === property) {\n            return offset;\n          }\n\n          if (0 > fd.span) {\n            offset = -1;\n          } else if (0 <= offset) {\n            offset += fd.span;\n          }\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }]);\n\n  return Structure;\n}(Layout);\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\n\n\nvar UnionDiscriminator = /*#__PURE__*/function () {\n  function UnionDiscriminator(property) {\n    _classCallCheck(this, UnionDiscriminator);\n\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n\n\n  _createClass(UnionDiscriminator, [{\n    key: \"decode\",\n    value: function decode() {\n      throw new Error('UnionDiscriminator is abstract');\n    }\n    /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n     *\n     * The implementation of this method need not store the value if\n     * variant information is maintained through other means. */\n\n  }, {\n    key: \"encode\",\n    value: function encode() {\n      throw new Error('UnionDiscriminator is abstract');\n    }\n  }]);\n\n  return UnionDiscriminator;\n}();\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\n\n\nvar UnionLayoutDiscriminator = /*#__PURE__*/function (_UnionDiscriminator) {\n  _inherits(UnionLayoutDiscriminator, _UnionDiscriminator);\n\n  var _super18 = _createSuper(UnionLayoutDiscriminator);\n\n  function UnionLayoutDiscriminator(layout, property) {\n    var _this9;\n\n    _classCallCheck(this, UnionLayoutDiscriminator);\n\n    if (!(layout instanceof ExternalLayout && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n\n    _this9 = _super18.call(this, property || layout.property || 'variant');\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n\n    _this9.layout = layout;\n    return _this9;\n  }\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n\n\n  _createClass(UnionLayoutDiscriminator, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      return this.layout.decode(b, offset);\n    }\n    /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      return this.layout.encode(src, b, offset);\n    }\n  }]);\n\n  return UnionLayoutDiscriminator;\n}(UnionDiscriminator);\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar Union = /*#__PURE__*/function (_Layout16) {\n  _inherits(Union, _Layout16);\n\n  var _super19 = _createSuper(Union);\n\n  function Union(discr, defaultLayout, property) {\n    var _this10;\n\n    _classCallCheck(this, Union);\n\n    var upv = discr instanceof UInt || discr instanceof UIntBE;\n\n    if (upv) {\n      discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if (discr instanceof ExternalLayout && discr.isCount()) {\n      discr = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator ' + 'or an unsigned integer layout');\n    }\n\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n\n    if (!(null === defaultLayout || defaultLayout instanceof Layout)) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n\n\n    var span = -1;\n\n    if (defaultLayout) {\n      span = defaultLayout.span;\n\n      if (0 <= span && upv) {\n        span += discr.layout.span;\n      }\n    }\n\n    _this10 = _super19.call(this, span, property);\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n\n    _this10.discriminator = discr;\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n\n    _this10.usesPrefixDiscriminator = upv;\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n\n    _this10.defaultLayout = defaultLayout;\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n\n    _this10.registry = {};\n    /* Private variable used when invoking getSourceVariant */\n\n    var boundGetSourceVariant = _this10.defaultGetSourceVariant.bind(_assertThisInitialized(_this10));\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n\n\n    _this10.getSourceVariant = function (src) {\n      return boundGetSourceVariant(src);\n    };\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n\n\n    _this10.configGetSourceVariant = function (gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n\n    return _this10;\n  }\n  /** @override */\n\n\n  _createClass(Union, [{\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      if (0 <= this.span) {\n        return this.span;\n      }\n\n      if (undefined === offset) {\n        offset = 0;\n      }\n      /* Default layouts always have non-negative span, so we don't have\n       * one and we have to recognize the variant which will in turn\n       * determine the span. */\n\n\n      var vlo = this.getVariant(b, offset);\n\n      if (!vlo) {\n        throw new Error('unable to determine span for unrecognized variant');\n      }\n\n      return vlo.getSpan(b, offset);\n    }\n    /**\n     * Method to infer a registered Union variant compatible with `src`.\n     *\n     * The first satisified rule in the following sequence defines the\n     * return value:\n     * * If `src` has properties matching the Union discriminator and\n     *   the default layout, `undefined` is returned regardless of the\n     *   value of the discriminator property (this ensures the default\n     *   layout will be used);\n     * * If `src` has a property matching the Union discriminator, the\n     *   value of the discriminator identifies a registered variant, and\n     *   either (a) the variant has no layout, or (b) `src` has the\n     *   variant's property, then the variant is returned (because the\n     *   source satisfies the constraints of the variant it identifies);\n     * * If `src` does not have a property matching the Union\n     *   discriminator, but does have a property matching a registered\n     *   variant, then the variant is returned (because the source\n     *   matches a variant without an explicit conflict);\n     * * An error is thrown (because we either can't identify a variant,\n     *   or we were explicitly told the variant but can't satisfy it).\n     *\n     * @param {Object} src - an object presumed to be compatible with\n     * the content of the Union.\n     *\n     * @return {(undefined|VariantLayout)} - as described above.\n     *\n     * @throws {Error} - if `src` cannot be associated with a default or\n     * registered variant.\n     */\n\n  }, {\n    key: \"defaultGetSourceVariant\",\n    value: function defaultGetSourceVariant(src) {\n      if (src.hasOwnProperty(this.discriminator.property)) {\n        if (this.defaultLayout && src.hasOwnProperty(this.defaultLayout.property)) {\n          return undefined;\n        }\n\n        var vlo = this.registry[src[this.discriminator.property]];\n\n        if (vlo && (!vlo.layout || src.hasOwnProperty(vlo.property))) {\n          return vlo;\n        }\n      } else {\n        for (var tag in this.registry) {\n          var _vlo = this.registry[tag];\n\n          if (src.hasOwnProperty(_vlo.property)) {\n            return _vlo;\n          }\n        }\n      }\n\n      throw new Error('unable to infer src variant');\n    }\n    /** Implement {@link Layout#decode|decode} for {@link Union}.\n     *\n     * If the variant is {@link Union#addVariant|registered} the return\n     * value is an instance of that variant, with no explicit\n     * discriminator.  Otherwise the {@link Union#defaultLayout|default\n     * layout} is used to decode the content. */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var dest;\n      var dlo = this.discriminator;\n      var discr = dlo.decode(b, offset);\n      var clo = this.registry[discr];\n\n      if (undefined === clo) {\n        var contentOffset = 0;\n        clo = this.defaultLayout;\n\n        if (this.usesPrefixDiscriminator) {\n          contentOffset = dlo.layout.span;\n        }\n\n        dest = this.makeDestinationObject();\n        dest[dlo.property] = discr;\n        dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);\n      } else {\n        dest = clo.decode(b, offset);\n      }\n\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Union}.\n     *\n     * This API assumes the `src` object is consistent with the union's\n     * {@link Union#defaultLayout|default layout}.  To encode variants\n     * use the appropriate variant-specific {@link VariantLayout#encode}\n     * method. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var vlo = this.getSourceVariant(src);\n\n      if (undefined === vlo) {\n        var dlo = this.discriminator;\n        var clo = this.defaultLayout;\n        var contentOffset = 0;\n\n        if (this.usesPrefixDiscriminator) {\n          contentOffset = dlo.layout.span;\n        }\n\n        dlo.encode(src[dlo.property], b, offset);\n        return contentOffset + clo.encode(src[clo.property], b, offset + contentOffset);\n      }\n\n      return vlo.encode(src, b, offset);\n    }\n    /** Register a new variant structure within a union.  The newly\n     * created variant is returned.\n     *\n     * @param {Number} variant - initializer for {@link\n     * VariantLayout#variant|variant}.\n     *\n     * @param {Layout} layout - initializer for {@link\n     * VariantLayout#layout|layout}.\n     *\n     * @param {String} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {VariantLayout} */\n\n  }, {\n    key: \"addVariant\",\n    value: function addVariant(variant, layout, property) {\n      var rv = new VariantLayout(this, variant, layout, property);\n      this.registry[variant] = rv;\n      return rv;\n    }\n    /**\n     * Get the layout associated with a registered variant.\n     *\n     * If `vb` does not produce a registered variant the function returns\n     * `undefined`.\n     *\n     * @param {(Number|Buffer)} vb - either the variant number, or a\n     * buffer from which the discriminator is to be read.\n     *\n     * @param {Number} offset - offset into `vb` for the start of the\n     * union.  Used only when `vb` is an instance of {Buffer}.\n     *\n     * @return {({VariantLayout}|undefined)}\n     */\n\n  }, {\n    key: \"getVariant\",\n    value: function getVariant(vb, offset) {\n      var variant = vb;\n\n      if (Buffer.isBuffer(vb)) {\n        if (undefined === offset) {\n          offset = 0;\n        }\n\n        variant = this.discriminator.decode(vb, offset);\n      }\n\n      return this.registry[variant];\n    }\n  }]);\n\n  return Union;\n}(Layout);\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\n\n\nvar VariantLayout = /*#__PURE__*/function (_Layout17) {\n  _inherits(VariantLayout, _Layout17);\n\n  var _super20 = _createSuper(VariantLayout);\n\n  function VariantLayout(union, variant, layout, property) {\n    var _this11;\n\n    _classCallCheck(this, VariantLayout);\n\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n\n    if (!Number.isInteger(variant) || 0 > variant) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n\n    if ('string' === typeof layout && undefined === property) {\n      property = layout;\n      layout = null;\n    }\n\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n\n      if (null !== union.defaultLayout && 0 <= layout.span && layout.span > union.defaultLayout.span) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n\n    var span = union.span;\n\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n\n      if (0 <= span && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n\n    _this11 = _super20.call(this, span, property);\n    /** The {@link Union} to which this variant belongs. */\n\n    _this11.union = union;\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n\n    _this11.variant = variant;\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n\n    _this11.layout = layout || null;\n    return _this11;\n  }\n  /** @override */\n\n\n  _createClass(VariantLayout, [{\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      if (0 <= this.span) {\n        /* Will be equal to the containing union span if that is not\n         * variable. */\n        return this.span;\n      }\n\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var contentOffset = 0;\n\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n      /* Span is defined solely by the variant (and prefix discriminator) */\n\n\n      return contentOffset + this.layout.getSpan(b, offset + contentOffset);\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b, offset) {\n      var dest = this.makeDestinationObject();\n\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      if (this !== this.union.getVariant(b, offset)) {\n        throw new Error('variant mismatch');\n      }\n\n      var contentOffset = 0;\n\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n\n      if (this.layout) {\n        dest[this.property] = this.layout.decode(b, offset + contentOffset);\n      } else if (this.property) {\n        dest[this.property] = true;\n      } else if (this.union.usesPrefixDiscriminator) {\n        dest[this.union.discriminator.property] = this.variant;\n      }\n\n      return dest;\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var contentOffset = 0;\n\n      if (this.union.usesPrefixDiscriminator) {\n        contentOffset = this.union.discriminator.layout.span;\n      }\n\n      if (this.layout && !src.hasOwnProperty(this.property)) {\n        throw new TypeError('variant lacks property ' + this.property);\n      }\n\n      this.union.discriminator.encode(this.variant, b, offset);\n      var span = contentOffset;\n\n      if (this.layout) {\n        this.layout.encode(src[this.property], b, offset + contentOffset);\n        span += this.layout.getSpan(b, offset + contentOffset);\n\n        if (0 <= this.union.span && span > this.union.span) {\n          throw new Error('encoded variant overruns containing union');\n        }\n      }\n\n      return span;\n    }\n    /** Delegate {@link Layout#fromArray|fromArray} to {@link\n     * VariantLayout#layout|layout}. */\n\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(values) {\n      if (this.layout) {\n        return this.layout.fromArray(values);\n      }\n    }\n  }]);\n\n  return VariantLayout;\n}(Layout);\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\n\n\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n\n  return v;\n}\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar BitStructure = /*#__PURE__*/function (_Layout18) {\n  _inherits(BitStructure, _Layout18);\n\n  var _super21 = _createSuper(BitStructure);\n\n  function BitStructure(word, msb, property) {\n    var _this12;\n\n    _classCallCheck(this, BitStructure);\n\n    if (!(word instanceof UInt || word instanceof UIntBE)) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n\n    if ('string' === typeof msb && undefined === property) {\n      property = msb;\n      msb = undefined;\n    }\n\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n\n    _this12 = _super21.call(this, word.span, property);\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n\n    _this12.word = word;\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n\n    _this12.msb = !!msb;\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n\n    _this12.fields = [];\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n\n    var value = 0;\n\n    _this12._packedSetValue = function (v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n\n    _this12._packedGetValue = function () {\n      return value;\n    };\n\n    return _this12;\n  }\n  /** @override */\n\n\n  _createClass(BitStructure, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      var dest = this.makeDestinationObject();\n\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var value = this.word.decode(b, offset);\n\n      this._packedSetValue(value);\n\n      var _iterator7 = _createForOfIteratorHelper(this.fields),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var fd = _step7.value;\n\n          if (undefined !== fd.property) {\n            dest[fd.property] = fd.decode(value);\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return dest;\n    }\n    /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n     *\n     * If `src` is missing a property for a member with a defined {@link\n     * Layout#property|property} the corresponding region of the packed\n     * value is left unmodified.  Unused bits are also left unmodified. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var value = this.word.decode(b, offset);\n\n      this._packedSetValue(value);\n\n      var _iterator8 = _createForOfIteratorHelper(this.fields),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var fd = _step8.value;\n\n          if (undefined !== fd.property) {\n            var fv = src[fd.property];\n\n            if (undefined !== fv) {\n              fd.encode(fv);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      return this.word.encode(this._packedGetValue(), b, offset);\n    }\n    /** Register a new bitfield with a containing bit structure.  The\n     * resulting bitfield is returned.\n     *\n     * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {BitField} */\n\n  }, {\n    key: \"addField\",\n    value: function addField(bits, property) {\n      var bf = new BitField(this, bits, property);\n      this.fields.push(bf);\n      return bf;\n    }\n    /** As with {@link BitStructure#addField|addField} for single-bit\n     * fields with `boolean` value representation.\n     *\n     * @param {string} property - initializer for {@link\n     * Layout#property|property}.\n     *\n     * @return {Boolean} */\n\n  }, {\n    key: \"addBoolean\",\n    value: function addBoolean(property) {\n      // This is my Boolean, not the Javascript one.\n      // eslint-disable-next-line no-new-wrappers\n      var bf = new Boolean(this, property);\n      this.fields.push(bf);\n      return bf;\n    }\n    /**\n     * Get access to the bit field for a given property.\n     *\n     * @param {String} property - the bit field of interest.\n     *\n     * @return {BitField} - the field associated with `property`, or\n     * undefined if there is no such property.\n     */\n\n  }, {\n    key: \"fieldFor\",\n    value: function fieldFor(property) {\n      if ('string' !== typeof property) {\n        throw new TypeError('property must be string');\n      }\n\n      var _iterator9 = _createForOfIteratorHelper(this.fields),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var fd = _step9.value;\n\n          if (fd.property === property) {\n            return fd;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n    }\n  }]);\n\n  return BitStructure;\n}(Layout);\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\n\n\nvar BitField = /*#__PURE__*/function () {\n  function BitField(container, bits, property) {\n    _classCallCheck(this, BitField);\n\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n\n    if (!Number.isInteger(bits) || 0 >= bits) {\n      throw new TypeError('bits must be positive integer');\n    }\n\n    var totalBits = 8 * container.span;\n    var usedBits = container.fields.reduce(function (sum, fd) {\n      return sum + fd.bits;\n    }, 0);\n\n    if (bits + usedBits > totalBits) {\n      throw new Error('bits too long for span remainder (' + (totalBits - usedBits) + ' of ' + totalBits + ' remain)');\n    }\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n\n\n    this.container = container;\n    /** The span of this value in bits. */\n\n    this.bits = bits;\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n\n    this.valueMask = (1 << bits) - 1;\n\n    if (32 === bits) {\n      // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n\n\n    this.start = usedBits;\n\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n\n\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n\n    this.property = property;\n  }\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n\n\n  _createClass(BitField, [{\n    key: \"decode\",\n    value: function decode() {\n      var word = this.container._packedGetValue();\n\n      var wordValue = fixBitwiseResult(word & this.wordMask);\n      var value = wordValue >>> this.start;\n      return value;\n    }\n    /** Store a value into the corresponding subsequence of the containing\n     * bit field.\n     *\n     * **NOTE** This is not a specialization of {@link\n     * Layout#encode|Layout.encode} and there is no return value. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(value) {\n      if (!Number.isInteger(value) || value !== fixBitwiseResult(value & this.valueMask)) {\n        throw new TypeError(nameWithProperty('BitField.encode', this) + ' value must be integer not exceeding ' + this.valueMask);\n      }\n\n      var word = this.container._packedGetValue();\n\n      var wordValue = fixBitwiseResult(value << this.start);\n\n      this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask) | wordValue);\n    }\n  }]);\n\n  return BitField;\n}();\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n\n/* eslint-disable no-extend-native */\n\n\nvar Boolean = /*#__PURE__*/function (_BitField) {\n  _inherits(Boolean, _BitField);\n\n  var _super22 = _createSuper(Boolean);\n\n  function Boolean(container, property) {\n    _classCallCheck(this, Boolean);\n\n    return _super22.call(this, container, 1, property);\n  }\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n\n\n  _createClass(Boolean, [{\n    key: \"decode\",\n    value: function decode(b, offset) {\n      return !!BitField.prototype.decode.call(this, b, offset);\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(value) {\n      if ('boolean' === typeof value) {\n        // BitField requires integer values\n        value = +value;\n      }\n\n      return BitField.prototype.encode.call(this, value);\n    }\n  }]);\n\n  return Boolean;\n}(BitField);\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Buffer.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar Blob = /*#__PURE__*/function (_Layout19) {\n  _inherits(Blob, _Layout19);\n\n  var _super23 = _createSuper(Blob);\n\n  function Blob(length, property) {\n    var _this13;\n\n    _classCallCheck(this, Blob);\n\n    if (!(length instanceof ExternalLayout && length.isCount() || Number.isInteger(length) && 0 <= length)) {\n      throw new TypeError('length must be positive integer ' + 'or an unsigned integer ExternalLayout');\n    }\n\n    var span = -1;\n\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n\n    _this13 = _super23.call(this, span, property);\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n\n    _this13.length = length;\n    return _this13;\n  }\n  /** @override */\n\n\n  _createClass(Blob, [{\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      var span = this.span;\n\n      if (0 > span) {\n        span = this.length.decode(b, offset);\n      }\n\n      return span;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var span = this.span;\n\n      if (0 > span) {\n        span = this.length.decode(b, offset);\n      }\n\n      return b.slice(offset, offset + span);\n    }\n    /** Implement {@link Layout#encode|encode} for {@link Blob}.\n     *\n     * **NOTE** If {@link Layout#count|count} is an instance of {@link\n     * ExternalLayout} then the length of `src` will be encoded as the\n     * count after `src` is encoded. */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      var span = this.length;\n\n      if (this.length instanceof ExternalLayout) {\n        span = src.length;\n      }\n\n      if (!(Buffer.isBuffer(src) && span === src.length)) {\n        throw new TypeError(nameWithProperty('Blob.encode', this) + ' requires (length ' + span + ') Buffer as src');\n      }\n\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Buffer');\n      }\n\n      b.write(src.toString('hex'), offset, span, 'hex');\n\n      if (this.length instanceof ExternalLayout) {\n        this.length.encode(span, b, offset);\n      }\n\n      return span;\n    }\n  }]);\n\n  return Blob;\n}(Layout);\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar CString = /*#__PURE__*/function (_Layout20) {\n  _inherits(CString, _Layout20);\n\n  var _super24 = _createSuper(CString);\n\n  function CString(property) {\n    _classCallCheck(this, CString);\n\n    return _super24.call(this, -1, property);\n  }\n  /** @override */\n\n\n  _createClass(CString, [{\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      if (!Buffer.isBuffer(b)) {\n        throw new TypeError('b must be a Buffer');\n      }\n\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var idx = offset;\n\n      while (idx < b.length && 0 !== b[idx]) {\n        idx += 1;\n      }\n\n      return 1 + idx - offset;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b, offset, dest) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var span = this.getSpan(b, offset);\n      return b.slice(offset, offset + span - 1).toString('utf-8');\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n      /* Must force this to a string, lest it be a number and the\n       * \"utf8-encoding\" below actually allocate a buffer of length\n       * src */\n\n\n      if ('string' !== typeof src) {\n        src = src.toString();\n      }\n\n      var srcb = new Buffer(src, 'utf8');\n      var span = srcb.length;\n\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Buffer');\n      }\n\n      srcb.copy(b, offset);\n      b[offset + span] = 0;\n      return span + 1;\n    }\n  }]);\n\n  return CString;\n}(Layout);\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar UTF8 = /*#__PURE__*/function (_Layout21) {\n  _inherits(UTF8, _Layout21);\n\n  var _super25 = _createSuper(UTF8);\n\n  function UTF8(maxSpan, property) {\n    var _this14;\n\n    _classCallCheck(this, UTF8);\n\n    if ('string' === typeof maxSpan && undefined === property) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n\n    _this14 = _super25.call(this, -1, property);\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n\n    _this14.maxSpan = maxSpan;\n    return _this14;\n  }\n  /** @override */\n\n\n  _createClass(UTF8, [{\n    key: \"getSpan\",\n    value: function getSpan(b, offset) {\n      if (!Buffer.isBuffer(b)) {\n        throw new TypeError('b must be a Buffer');\n      }\n\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      return b.length - offset;\n    }\n    /** @override */\n\n  }, {\n    key: \"decode\",\n    value: function decode(b, offset, dest) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n\n      var span = this.getSpan(b, offset);\n\n      if (0 <= this.maxSpan && this.maxSpan < span) {\n        throw new RangeError('text length exceeds maxSpan');\n      }\n\n      return b.slice(offset, offset + span).toString('utf-8');\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n      /* Must force this to a string, lest it be a number and the\n       * \"utf8-encoding\" below actually allocate a buffer of length\n       * src */\n\n\n      if ('string' !== typeof src) {\n        src = src.toString();\n      }\n\n      var srcb = new Buffer(src, 'utf8');\n      var span = srcb.length;\n\n      if (0 <= this.maxSpan && this.maxSpan < span) {\n        throw new RangeError('text length exceeds maxSpan');\n      }\n\n      if (offset + span > b.length) {\n        throw new RangeError('encoding overruns Buffer');\n      }\n\n      srcb.copy(b, offset);\n      return span;\n    }\n  }]);\n\n  return UTF8;\n}(Layout);\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\n\n\nvar Constant = /*#__PURE__*/function (_Layout22) {\n  _inherits(Constant, _Layout22);\n\n  var _super26 = _createSuper(Constant);\n\n  function Constant(value, property) {\n    var _this15;\n\n    _classCallCheck(this, Constant);\n\n    _this15 = _super26.call(this, 0, property);\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n\n    _this15.value = value;\n    return _this15;\n  }\n  /** @override */\n\n\n  _createClass(Constant, [{\n    key: \"decode\",\n    value: function decode(b, offset, dest) {\n      return this.value;\n    }\n    /** @override */\n\n  }, {\n    key: \"encode\",\n    value: function encode(src, b, offset) {\n      /* Constants take no space */\n      return 0;\n    }\n  }]);\n\n  return Constant;\n}(Layout);\n\nexports.ExternalLayout = ExternalLayout;\nexports.GreedyCount = GreedyCount;\nexports.OffsetLayout = OffsetLayout;\nexports.UInt = UInt;\nexports.UIntBE = UIntBE;\nexports.Int = Int;\nexports.IntBE = IntBE;\nexports.Float = Float;\nexports.FloatBE = FloatBE;\nexports.Double = Double;\nexports.DoubleBE = DoubleBE;\nexports.Sequence = Sequence;\nexports.Structure = Structure;\nexports.UnionDiscriminator = UnionDiscriminator;\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\nexports.Union = Union;\nexports.VariantLayout = VariantLayout;\nexports.BitStructure = BitStructure;\nexports.BitField = BitField;\nexports.Boolean = Boolean;\nexports.Blob = Blob;\nexports.CString = CString;\nexports.UTF8 = UTF8;\nexports.Constant = Constant;\n/** Factory for {@link GreedyCount}. */\n\nexports.greedy = function (elementSpan, property) {\n  return new GreedyCount(elementSpan, property);\n};\n/** Factory for {@link OffsetLayout}. */\n\n\nexports.offset = function (layout, offset, property) {\n  return new OffsetLayout(layout, offset, property);\n};\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\n\n\nexports.u8 = function (property) {\n  return new UInt(1, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\n\n\nexports.u16 = function (property) {\n  return new UInt(2, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\n\n\nexports.u24 = function (property) {\n  return new UInt(3, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\n\n\nexports.u32 = function (property) {\n  return new UInt(4, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\n\n\nexports.u40 = function (property) {\n  return new UInt(5, property);\n};\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\n\n\nexports.u48 = function (property) {\n  return new UInt(6, property);\n};\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\n\n\nexports.nu64 = function (property) {\n  return new NearUInt64(property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\n\n\nexports.u16be = function (property) {\n  return new UIntBE(2, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\n\n\nexports.u24be = function (property) {\n  return new UIntBE(3, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\n\n\nexports.u32be = function (property) {\n  return new UIntBE(4, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\n\n\nexports.u40be = function (property) {\n  return new UIntBE(5, property);\n};\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\n\n\nexports.u48be = function (property) {\n  return new UIntBE(6, property);\n};\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\n\n\nexports.nu64be = function (property) {\n  return new NearUInt64BE(property);\n};\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\n\n\nexports.s8 = function (property) {\n  return new Int(1, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\n\n\nexports.s16 = function (property) {\n  return new Int(2, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\n\n\nexports.s24 = function (property) {\n  return new Int(3, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\n\n\nexports.s32 = function (property) {\n  return new Int(4, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\n\n\nexports.s40 = function (property) {\n  return new Int(5, property);\n};\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\n\n\nexports.s48 = function (property) {\n  return new Int(6, property);\n};\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\n\n\nexports.ns64 = function (property) {\n  return new NearInt64(property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\n\n\nexports.s16be = function (property) {\n  return new IntBE(2, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\n\n\nexports.s24be = function (property) {\n  return new IntBE(3, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\n\n\nexports.s32be = function (property) {\n  return new IntBE(4, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\n\n\nexports.s40be = function (property) {\n  return new IntBE(5, property);\n};\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\n\n\nexports.s48be = function (property) {\n  return new IntBE(6, property);\n};\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\n\n\nexports.ns64be = function (property) {\n  return new NearInt64BE(property);\n};\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\n\n\nexports.f32 = function (property) {\n  return new Float(property);\n};\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\n\n\nexports.f32be = function (property) {\n  return new FloatBE(property);\n};\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\n\n\nexports.f64 = function (property) {\n  return new Double(property);\n};\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\n\n\nexports.f64be = function (property) {\n  return new DoubleBE(property);\n};\n/** Factory for {@link Structure} values. */\n\n\nexports.struct = function (fields, property, decodePrefixes) {\n  return new Structure(fields, property, decodePrefixes);\n};\n/** Factory for {@link BitStructure} values. */\n\n\nexports.bits = function (word, msb, property) {\n  return new BitStructure(word, msb, property);\n};\n/** Factory for {@link Sequence} values. */\n\n\nexports.seq = function (elementLayout, count, property) {\n  return new Sequence(elementLayout, count, property);\n};\n/** Factory for {@link Union} values. */\n\n\nexports.union = function (discr, defaultLayout, property) {\n  return new Union(discr, defaultLayout, property);\n};\n/** Factory for {@link UnionLayoutDiscriminator} values. */\n\n\nexports.unionLayoutDiscriminator = function (layout, property) {\n  return new UnionLayoutDiscriminator(layout, property);\n};\n/** Factory for {@link Blob} values. */\n\n\nexports.blob = function (length, property) {\n  return new Blob(length, property);\n};\n/** Factory for {@link CString} values. */\n\n\nexports.cstr = function (property) {\n  return new CString(property);\n};\n/** Factory for {@link UTF8} values. */\n\n\nexports.utf8 = function (maxSpan, property) {\n  return new UTF8(maxSpan, property);\n};\n/** Factory for {@link Constant} values. */\n\n\nexports.const = function (value, property) {\n  return new Constant(value, property);\n};","map":{"version":3,"names":["Layout","span","property","Number","isInteger","TypeError","b","offset","Error","src","RangeError","rv","Object","create","constructor","prototype","assign","values","undefined","exports","nameWithProperty","name","lo","bindConstructorLayout","Class","layout","hasOwnProperty","layout_","boundConstructor_","makeDestinationObject","defineProperty","value","encode","writable","decode","ExternalLayout","GreedyCount","elementSpan","rem","length","Math","floor","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","isCount","idx","getSpan","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","shift","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","upv","replicate","discriminator","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","Buffer","isBuffer","union","fromArray","fixBitwiseResult","BitStructure","word","msb","_packedSetValue","_packedGetValue","bits","bf","BitField","Boolean","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","call","Blob","slice","write","toString","CString","srcb","copy","UTF8","maxSpan","Constant","greedy","u8","u16","u24","u32","u40","u48","nu64","u16be","u24be","u32be","u40be","u48be","nu64be","s8","s16","s24","s32","s40","s48","ns64","s16be","s24be","s32be","s40be","s48be","ns64be","f32","f32be","f64","f64be","struct","seq","unionLayoutDiscriminator","blob","cstr","utf8","const"],"sources":["/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/buffer-layout/lib/Layout.js"],"sourcesContent":["/* The MIT License (MIT)\n *\n * Copyright 2015-2018 Peter A. Bigot\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n/**\n * Support for translating between Buffer instances and JavaScript\n * native types.\n *\n * {@link module:Layout~Layout|Layout} is the basis of a class\n * hierarchy that associates property names with sequences of encoded\n * bytes.\n *\n * Layouts are supported for these scalar (numeric) types:\n * * {@link module:Layout~UInt|Unsigned integers in little-endian\n *   format} with {@link module:Layout.u8|8-bit}, {@link\n *   module:Layout.u16|16-bit}, {@link module:Layout.u24|24-bit},\n *   {@link module:Layout.u32|32-bit}, {@link\n *   module:Layout.u40|40-bit}, and {@link module:Layout.u48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~UIntBE|Unsigned integers in big-endian\n *   format} with {@link module:Layout.u16be|16-bit}, {@link\n *   module:Layout.u24be|24-bit}, {@link module:Layout.u32be|32-bit},\n *   {@link module:Layout.u40be|40-bit}, and {@link\n *   module:Layout.u48be|48-bit} representation ranges;\n * * {@link module:Layout~Int|Signed integers in little-endian\n *   format} with {@link module:Layout.s8|8-bit}, {@link\n *   module:Layout.s16|16-bit}, {@link module:Layout.s24|24-bit},\n *   {@link module:Layout.s32|32-bit}, {@link\n *   module:Layout.s40|40-bit}, and {@link module:Layout.s48|48-bit}\n *   representation ranges;\n * * {@link module:Layout~IntBE|Signed integers in big-endian format}\n *   with {@link module:Layout.s16be|16-bit}, {@link\n *   module:Layout.s24be|24-bit}, {@link module:Layout.s32be|32-bit},\n *   {@link module:Layout.s40be|40-bit}, and {@link\n *   module:Layout.s48be|48-bit} representation ranges;\n * * 64-bit integral values that decode to an exact (if magnitude is\n *   less than 2^53) or nearby integral Number in {@link\n *   module:Layout.nu64|unsigned little-endian}, {@link\n *   module:Layout.nu64be|unsigned big-endian}, {@link\n *   module:Layout.ns64|signed little-endian}, and {@link\n *   module:Layout.ns64be|unsigned big-endian} encodings;\n * * 32-bit floating point values with {@link\n *   module:Layout.f32|little-endian} and {@link\n *   module:Layout.f32be|big-endian} representations;\n * * 64-bit floating point values with {@link\n *   module:Layout.f64|little-endian} and {@link\n *   module:Layout.f64be|big-endian} representations;\n * * {@link module:Layout.const|Constants} that take no space in the\n *   encoded expression.\n *\n * and for these aggregate types:\n * * {@link module:Layout.seq|Sequence}s of instances of a {@link\n *   module:Layout~Layout|Layout}, with JavaScript representation as\n *   an Array and constant or data-dependent {@link\n *   module:Layout~Sequence#count|length};\n * * {@link module:Layout.struct|Structure}s that aggregate a\n *   heterogeneous sequence of {@link module:Layout~Layout|Layout}\n *   instances, with JavaScript representation as an Object;\n * * {@link module:Layout.union|Union}s that support multiple {@link\n *   module:Layout~VariantLayout|variant layouts} over a fixed\n *   (padded) or variable (not padded) span of bytes, using an\n *   unsigned integer at the start of the data or a separate {@link\n *   module:Layout.unionLayoutDiscriminator|layout element} to\n *   determine which layout to use when interpreting the buffer\n *   contents;\n * * {@link module:Layout.bits|BitStructure}s that contain a sequence\n *   of individual {@link\n *   module:Layout~BitStructure#addField|BitField}s packed into an 8,\n *   16, 24, or 32-bit unsigned integer starting at the least- or\n *   most-significant bit;\n * * {@link module:Layout.cstr|C strings} of varying length;\n * * {@link module:Layout.blob|Blobs} of fixed- or variable-{@link\n *   module:Layout~Blob#length|length} raw data.\n *\n * All {@link module:Layout~Layout|Layout} instances are immutable\n * after construction, to prevent internal state from becoming\n * inconsistent.\n *\n * @local Layout\n * @local ExternalLayout\n * @local GreedyCount\n * @local OffsetLayout\n * @local UInt\n * @local UIntBE\n * @local Int\n * @local IntBE\n * @local NearUInt64\n * @local NearUInt64BE\n * @local NearInt64\n * @local NearInt64BE\n * @local Float\n * @local FloatBE\n * @local Double\n * @local DoubleBE\n * @local Sequence\n * @local Structure\n * @local UnionDiscriminator\n * @local UnionLayoutDiscriminator\n * @local Union\n * @local VariantLayout\n * @local BitStructure\n * @local BitField\n * @local Boolean\n * @local Blob\n * @local CString\n * @local Constant\n * @local bindConstructorLayout\n * @module Layout\n * @license MIT\n * @author Peter A. Bigot\n * @see {@link https://github.com/pabigot/buffer-layout|buffer-layout on GitHub}\n */\n\n'use strict';\n\n/**\n * Base class for layout objects.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * Layout#encode|encode} or {@link Layout#decode|decode} functions.\n *\n * @param {Number} span - Initializer for {@link Layout#span|span}.  The\n * parameter must be an integer; a negative value signifies that the\n * span is {@link Layout#getSpan|value-specific}.\n *\n * @param {string} [property] - Initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n */\nclass Layout {\n  constructor(span, property) {\n    if (!Number.isInteger(span)) {\n      throw new TypeError('span must be an integer');\n    }\n\n    /** The span of the layout in bytes.\n     *\n     * Positive values are generally expected.\n     *\n     * Zero will only appear in {@link Constant}s and in {@link\n     * Sequence}s where the {@link Sequence#count|count} is zero.\n     *\n     * A negative value indicates that the span is value-specific, and\n     * must be obtained using {@link Layout#getSpan|getSpan}. */\n    this.span = span;\n\n    /** The property name used when this layout is represented in an\n     * Object.\n     *\n     * Used only for layouts that {@link Layout#decode|decode} to Object\n     * instances.  If left undefined the span of the unnamed layout will\n     * be treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Function to create an Object into which decoded properties will\n   * be written.\n   *\n   * Used only for layouts that {@link Layout#decode|decode} to Object\n   * instances, which means:\n   * * {@link Structure}\n   * * {@link Union}\n   * * {@link VariantLayout}\n   * * {@link BitStructure}\n   *\n   * If left undefined the JavaScript representation of these layouts\n   * will be Object instances.\n   *\n   * See {@link bindConstructorLayout}.\n   */\n  makeDestinationObject() {\n    return {};\n  }\n\n  /**\n   * Decode from a Buffer into an JavaScript value.\n   *\n   * @param {Buffer} b - the buffer from which encoded data is read.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {(Number|Array|Object)} - the value of the decoded data.\n   *\n   * @abstract\n   */\n  decode(b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Encode a JavaScript value into a Buffer.\n   *\n   * @param {(Number|Array|Object)} src - the value to be encoded into\n   * the buffer.  The type accepted depends on the (sub-)type of {@link\n   * Layout}.\n   *\n   * @param {Buffer} b - the buffer into which encoded data will be\n   * written.\n   *\n   * @param {Number} [offset] - the offset at which the encoded data\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @returns {Number} - the number of bytes encoded, including the\n   * space skipped for internal padding, but excluding data such as\n   * {@link Sequence#count|lengths} when stored {@link\n   * ExternalLayout|externally}.  This is the adjustment to `offset`\n   * producing the offset where data for the next layout would be\n   * written.\n   *\n   * @abstract\n   */\n  encode(src, b, offset) {\n    throw new Error('Layout is abstract');\n  }\n\n  /**\n   * Calculate the span of a specific instance of a layout.\n   *\n   * @param {Buffer} b - the buffer that contains an encoded instance.\n   *\n   * @param {Number} [offset] - the offset at which the encoded instance\n   * starts.  If absent a zero offset is inferred.\n   *\n   * @return {Number} - the number of bytes covered by the layout\n   * instance.  If this method is not overridden in a subclass the\n   * definition-time constant {@link Layout#span|span} will be\n   * returned.\n   *\n   * @throws {RangeError} - if the length of the value cannot be\n   * determined.\n   */\n  getSpan(b, offset) {\n    if (0 > this.span) {\n      throw new RangeError('indeterminate span');\n    }\n    return this.span;\n  }\n\n  /**\n   * Replicate the layout using a new property.\n   *\n   * This function must be used to get a structurally-equivalent layout\n   * with a different name since all {@link Layout} instances are\n   * immutable.\n   *\n   * **NOTE** This is a shallow copy.  All fields except {@link\n   * Layout#property|property} are strictly equal to the origin layout.\n   *\n   * @param {String} property - the value for {@link\n   * Layout#property|property} in the replica.\n   *\n   * @returns {Layout} - the copy with {@link Layout#property|property}\n   * set to `property`.\n   */\n  replicate(property) {\n    const rv = Object.create(this.constructor.prototype);\n    Object.assign(rv, this);\n    rv.property = property;\n    return rv;\n  }\n\n  /**\n   * Create an object from layout properties and an array of values.\n   *\n   * **NOTE** This function returns `undefined` if invoked on a layout\n   * that does not return its value as an Object.  Objects are\n   * returned for things that are a {@link Structure}, which includes\n   * {@link VariantLayout|variant layouts} if they are structures, and\n   * excludes {@link Union}s.  If you want this feature for a union\n   * you must use {@link Union.getVariant|getVariant} to select the\n   * desired layout.\n   *\n   * @param {Array} values - an array of values that correspond to the\n   * default order for properties.  As with {@link Layout#decode|decode}\n   * layout elements that have no property name are skipped when\n   * iterating over the array values.  Only the top-level properties are\n   * assigned; arguments are not assigned to properties of contained\n   * layouts.  Any unused values are ignored.\n   *\n   * @return {(Object|undefined)}\n   */\n  fromArray(values) {\n    return undefined;\n  }\n}\nexports.Layout = Layout;\n\n/* Provide text that carries a name (such as for a function that will\n * be throwing an error) annotated with the property of a given layout\n * (such as one for which the value was unacceptable).\n *\n * @ignore */\nfunction nameWithProperty(name, lo) {\n  if (lo.property) {\n    return name + '[' + lo.property + ']';\n  }\n  return name;\n}\nexports.nameWithProperty = nameWithProperty;\n\n/**\n * Augment a class so that instances can be encoded/decoded using a\n * given layout.\n *\n * Calling this function couples `Class` with `layout` in several ways:\n *\n * * `Class.layout_` becomes a static member property equal to `layout`;\n * * `layout.boundConstructor_` becomes a static member property equal\n *    to `Class`;\n * * The {@link Layout#makeDestinationObject|makeDestinationObject()}\n *   property of `layout` is set to a function that returns a `new\n *   Class()`;\n * * `Class.decode(b, offset)` becomes a static member function that\n *   delegates to {@link Layout#decode|layout.decode}.  The\n *   synthesized function may be captured and extended.\n * * `Class.prototype.encode(b, offset)` provides an instance member\n *   function that delegates to {@link Layout#encode|layout.encode}\n *   with `src` set to `this`.  The synthesized function may be\n *   captured and extended, but when the extension is invoked `this`\n *   must be explicitly bound to the instance.\n *\n * @param {class} Class - a JavaScript class with a nullary\n * constructor.\n *\n * @param {Layout} layout - the {@link Layout} instance used to encode\n * instances of `Class`.\n */\nfunction bindConstructorLayout(Class, layout) {\n  if ('function' !== typeof Class) {\n    throw new TypeError('Class must be constructor');\n  }\n  if (Class.hasOwnProperty('layout_')) {\n    throw new Error('Class is already bound to a layout');\n  }\n  if (!(layout && (layout instanceof Layout))) {\n    throw new TypeError('layout must be a Layout');\n  }\n  if (layout.hasOwnProperty('boundConstructor_')) {\n    throw new Error('layout is already bound to a constructor');\n  }\n  Class.layout_ = layout;\n  layout.boundConstructor_ = Class;\n  layout.makeDestinationObject = (() => new Class());\n  Object.defineProperty(Class.prototype, 'encode', {\n    value: function(b, offset) {\n      return layout.encode(this, b, offset);\n    },\n    writable: true,\n  });\n  Object.defineProperty(Class, 'decode', {\n    value: function(b, offset) {\n      return layout.decode(b, offset);\n    },\n    writable: true,\n  });\n}\nexports.bindConstructorLayout = bindConstructorLayout;\n\n/**\n * An object that behaves like a layout but does not consume space\n * within its containing layout.\n *\n * This is primarily used to obtain metadata about a member, such as a\n * {@link OffsetLayout} that can provide data about a {@link\n * Layout#getSpan|value-specific span}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support {@link\n * ExternalLayout#isCount|isCount} or other {@link Layout} functions.\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @abstract\n * @augments {Layout}\n */\nclass ExternalLayout extends Layout {\n  /**\n   * Return `true` iff the external layout decodes to an unsigned\n   * integer layout.\n   *\n   * In that case it can be used as the source of {@link\n   * Sequence#count|Sequence counts}, {@link Blob#length|Blob lengths},\n   * or as {@link UnionLayoutDiscriminator#layout|external union\n   * discriminators}.\n   *\n   * @abstract\n   */\n  isCount() {\n    throw new Error('ExternalLayout is abstract');\n  }\n}\n\n/**\n * An {@link ExternalLayout} that determines its {@link\n * Layout#decode|value} based on offset into and length of the buffer\n * on which it is invoked.\n *\n * *Factory*: {@link module:Layout.greedy|greedy}\n *\n * @param {Number} [elementSpan] - initializer for {@link\n * GreedyCount#elementSpan|elementSpan}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {ExternalLayout}\n */\nclass GreedyCount extends ExternalLayout {\n  constructor(elementSpan, property) {\n    if (undefined === elementSpan) {\n      elementSpan = 1;\n    }\n    if ((!Number.isInteger(elementSpan)) || (0 >= elementSpan)) {\n      throw new TypeError('elementSpan must be a (positive) integer');\n    }\n    super(-1, property);\n\n    /** The layout for individual elements of the sequence.  The value\n     * must be a positive integer.  If not provided, the value will be\n     * 1. */\n    this.elementSpan = elementSpan;\n  }\n\n  /** @override */\n  isCount() {\n    return true;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rem = b.length - offset;\n    return Math.floor(rem / this.elementSpan);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    return 0;\n  }\n}\n\n/**\n * An {@link ExternalLayout} that supports accessing a {@link Layout}\n * at a fixed offset from the start of another Layout.  The offset may\n * be before, within, or after the base layout.\n *\n * *Factory*: {@link module:Layout.offset|offset}\n *\n * @param {Layout} layout - initializer for {@link\n * OffsetLayout#layout|layout}, modulo `property`.\n *\n * @param {Number} [offset] - Initializes {@link\n * OffsetLayout#offset|offset}.  Defaults to zero.\n *\n * @param {string} [property] - Optional new property name for a\n * {@link Layout#replicate| replica} of `layout` to be used as {@link\n * OffsetLayout#layout|layout}.  If not provided the `layout` is used\n * unchanged.\n *\n * @augments {Layout}\n */\nclass OffsetLayout extends ExternalLayout {\n  constructor(layout, offset, property) {\n    if (!(layout instanceof Layout)) {\n      throw new TypeError('layout must be a Layout');\n    }\n\n    if (undefined === offset) {\n      offset = 0;\n    } else if (!Number.isInteger(offset)) {\n      throw new TypeError('offset must be integer or undefined');\n    }\n\n    super(layout.span, property || layout.property);\n\n    /** The subordinated layout. */\n    this.layout = layout;\n\n    /** The location of {@link OffsetLayout#layout} relative to the\n     * start of another layout.\n     *\n     * The value may be positive or negative, but an error will thrown\n     * if at the point of use it goes outside the span of the Buffer\n     * being accessed.  */\n    this.offset = offset;\n  }\n\n  /** @override */\n  isCount() {\n    return ((this.layout instanceof UInt)\n            || (this.layout instanceof UIntBE));\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.decode(b, offset + this.offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return this.layout.encode(src, b, offset + this.offset);\n  }\n}\n\n/**\n * Represent an unsigned integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.u8|u8}, {@link\n *  module:Layout.u16|u16}, {@link module:Layout.u24|u24}, {@link\n *  module:Layout.u32|u32}, {@link module:Layout.u40|u40}, {@link\n *  module:Layout.u48|u48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UInt extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent an unsigned integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.u8be|u8be}, {@link\n * module:Layout.u16be|u16be}, {@link module:Layout.u24be|u24be},\n * {@link module:Layout.u32be|u32be}, {@link\n * module:Layout.u40be|u40be}, {@link module:Layout.u48be|u48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UIntBE extends Layout {\n  constructor(span, property) {\n    super( span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readUIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeUIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in little-endian format.\n *\n * *Factory*: {@link module:Layout.s8|s8}, {@link\n *  module:Layout.s16|s16}, {@link module:Layout.s24|s24}, {@link\n *  module:Layout.s32|s32}, {@link module:Layout.s40|s40}, {@link\n *  module:Layout.s48|s48}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Int extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntLE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntLE(src, offset, this.span);\n    return this.span;\n  }\n}\n\n/**\n * Represent a signed integer in big-endian format.\n *\n * *Factory*: {@link module:Layout.s8be|s8be}, {@link\n * module:Layout.s16be|s16be}, {@link module:Layout.s24be|s24be},\n * {@link module:Layout.s32be|s32be}, {@link\n * module:Layout.s40be|s40be}, {@link module:Layout.s48be|s48be}\n *\n * @param {Number} span - initializer for {@link Layout#span|span}.\n * The parameter can range from 1 through 6.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass IntBE extends Layout {\n  constructor(span, property) {\n    super(span, property);\n    if (6 < this.span) {\n      throw new RangeError('span must not exceed 6 bytes');\n    }\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readIntBE(offset, this.span);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeIntBE(src, offset, this.span);\n    return this.span;\n  }\n}\n\nconst V2E32 = Math.pow(2, 32);\n\n/* True modulus high and low 32-bit words, where low word is always\n * non-negative. */\nfunction divmodInt64(src) {\n  const hi32 = Math.floor(src / V2E32);\n  const lo32 = src - (hi32 * V2E32);\n  return {hi32, lo32};\n}\n/* Reconstruct Number from quotient and non-negative remainder */\nfunction roundedInt64(hi32, lo32) {\n  return hi32 * V2E32 + lo32;\n}\n\n/**\n * Represent an unsigned 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64|nu64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readUInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeUInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent an unsigned 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.nu64be|nu64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearUInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readUInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in little-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64|ns64}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64 extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const lo32 = b.readUInt32LE(offset);\n    const hi32 = b.readInt32LE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeUInt32LE(split.lo32, offset);\n    b.writeInt32LE(split.hi32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a signed 64-bit integer in big-endian format when\n * encoded and as a near integral JavaScript Number when decoded.\n *\n * *Factory*: {@link module:Layout.ns64be|ns64be}\n *\n * **NOTE** Values with magnitude greater than 2^52 may not decode to\n * the exact value of the encoded representation.\n *\n * @augments {Layout}\n */\nclass NearInt64BE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const hi32 = b.readInt32BE(offset);\n    const lo32 = b.readUInt32BE(offset + 4);\n    return roundedInt64(hi32, lo32);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const split = divmodInt64(src);\n    b.writeInt32BE(split.hi32, offset);\n    b.writeUInt32BE(split.lo32, offset + 4);\n    return 8;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f32|f32}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Float extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatLE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 32-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f32be|f32be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass FloatBE extends Layout {\n  constructor(property) {\n    super(4, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readFloatBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeFloatBE(src, offset);\n    return 4;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in little-endian format.\n *\n * *Factory*: {@link module:Layout.f64|f64}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Double extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleLE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleLE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a 64-bit floating point number in big-endian format.\n *\n * *Factory*: {@link module:Layout.f64be|f64be}\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass DoubleBE extends Layout {\n  constructor(property) {\n    super(8, property);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.readDoubleBE(offset);\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    b.writeDoubleBE(src, offset);\n    return 8;\n  }\n}\n\n/**\n * Represent a contiguous sequence of a specific layout as an Array.\n *\n * *Factory*: {@link module:Layout.seq|seq}\n *\n * @param {Layout} elementLayout - initializer for {@link\n * Sequence#elementLayout|elementLayout}.\n *\n * @param {(Number|ExternalLayout)} count - initializer for {@link\n * Sequence#count|count}.  The parameter must be either a positive\n * integer or an instance of {@link ExternalLayout}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Sequence extends Layout {\n  constructor(elementLayout, count, property) {\n    if (!(elementLayout instanceof Layout)) {\n      throw new TypeError('elementLayout must be a Layout');\n    }\n    if (!(((count instanceof ExternalLayout) && count.isCount())\n          || (Number.isInteger(count) && (0 <= count)))) {\n      throw new TypeError('count must be non-negative integer '\n                          + 'or an unsigned integer ExternalLayout');\n    }\n    let span = -1;\n    if ((!(count instanceof ExternalLayout))\n        && (0 < elementLayout.span)) {\n      span = count * elementLayout.span;\n    }\n\n    super(span, property);\n\n    /** The layout for individual elements of the sequence. */\n    this.elementLayout = elementLayout;\n\n    /** The number of elements in the sequence.\n     *\n     * This will be either a non-negative integer or an instance of\n     * {@link ExternalLayout} for which {@link\n     * ExternalLayout#isCount|isCount()} is `true`. */\n    this.count = count;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    if (0 < this.elementLayout.span) {\n      span = count * this.elementLayout.span;\n    } else {\n      let idx = 0;\n      while (idx < count) {\n        span += this.elementLayout.getSpan(b, offset + span);\n        ++idx;\n      }\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const rv = [];\n    let i = 0;\n    let count = this.count;\n    if (count instanceof ExternalLayout) {\n      count = count.decode(b, offset);\n    }\n    while (i < count) {\n      rv.push(this.elementLayout.decode(b, offset));\n      offset += this.elementLayout.getSpan(b, offset);\n      i += 1;\n    }\n    return rv;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Sequence}.\n   *\n   * **NOTE** If `src` is shorter than {@link Sequence#count|count} then\n   * the unused space in the buffer is left unchanged.  If `src` is\n   * longer than {@link Sequence#count|count} the unneeded elements are\n   * ignored.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const elo = this.elementLayout;\n    const span = src.reduce((span, v) => {\n      return span + elo.encode(v, b, offset + span);\n    }, 0);\n    if (this.count instanceof ExternalLayout) {\n      this.count.encode(src.length, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Represent a contiguous sequence of arbitrary layout elements as an\n * Object.\n *\n * *Factory*: {@link module:Layout.struct|struct}\n *\n * **NOTE** The {@link Layout#span|span} of the structure is variable\n * if any layout in {@link Structure#fields|fields} has a variable\n * span.  When {@link Layout#encode|encoding} we must have a value for\n * all variable-length fields, or we wouldn't be able to figure out\n * how much space to use for storage.  We can only identify the value\n * for a field when it has a {@link Layout#property|property}.  As\n * such, although a structure may contain both unnamed fields and\n * variable-length fields, it cannot contain an unnamed\n * variable-length field.\n *\n * @param {Layout[]} fields - initializer for {@link\n * Structure#fields|fields}.  An error is raised if this contains a\n * variable-length field for which a {@link Layout#property|property}\n * is not defined.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @param {Boolean} [decodePrefixes] - initializer for {@link\n * Structure#decodePrefixes|property}.\n *\n * @throws {Error} - if `fields` contains an unnamed variable-length\n * layout.\n *\n * @augments {Layout}\n */\nclass Structure extends Layout {\n  constructor(fields, property, decodePrefixes) {\n    if (!(Array.isArray(fields)\n          && fields.reduce((acc, v) => acc && (v instanceof Layout), true))) {\n      throw new TypeError('fields must be array of Layout instances');\n    }\n    if (('boolean' === typeof property)\n        && (undefined === decodePrefixes)) {\n      decodePrefixes = property;\n      property = undefined;\n    }\n\n    /* Verify absence of unnamed variable-length fields. */\n    for (const fd of fields) {\n      if ((0 > fd.span)\n          && (undefined === fd.property)) {\n        throw new Error('fields cannot contain unnamed variable-length layout');\n      }\n    }\n\n    let span = -1;\n    try {\n      span = fields.reduce((span, fd) => span + fd.getSpan(), 0);\n    } catch (e) {\n    }\n    super(span, property);\n\n    /** The sequence of {@link Layout} values that comprise the\n     * structure.\n     *\n     * The individual elements need not be the same type, and may be\n     * either scalar or aggregate layouts.  If a member layout leaves\n     * its {@link Layout#property|property} undefined the\n     * corresponding region of the buffer associated with the element\n     * will not be mutated.\n     *\n     * @type {Layout[]} */\n    this.fields = fields;\n\n    /** Control behavior of {@link Layout#decode|decode()} given short\n     * buffers.\n     *\n     * In some situations a structure many be extended with additional\n     * fields over time, with older installations providing only a\n     * prefix of the full structure.  If this property is `true`\n     * decoding will accept those buffers and leave subsequent fields\n     * undefined, as long as the buffer ends at a field boundary.\n     * Defaults to `false`. */\n    this.decodePrefixes = !!decodePrefixes;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = 0;\n    try {\n      span = this.fields.reduce((span, fd) => {\n        const fsp = fd.getSpan(b, offset);\n        offset += fsp;\n        return span + fsp;\n      }, 0);\n    } catch (e) {\n      throw new RangeError('indeterminate span');\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(b, offset);\n      }\n      offset += fd.getSpan(b, offset);\n      if (this.decodePrefixes\n          && (b.length === offset)) {\n        break;\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Structure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the buffer is\n   * left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const firstOffset = offset;\n    let lastOffset = 0;\n    let lastWrote = 0;\n    for (const fd of this.fields) {\n      let span = fd.span;\n      lastWrote = (0 < span) ? span : 0;\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          lastWrote = fd.encode(fv, b, offset);\n          if (0 > span) {\n            /* Read the as-encoded span, which is not necessarily the\n             * same as what we wrote. */\n            span = fd.getSpan(b, offset);\n          }\n        }\n      }\n      lastOffset = offset;\n      offset += span;\n    }\n    /* Use (lastOffset + lastWrote) instead of offset because the last\n     * item may have had a dynamic length and we don't want to include\n     * the padding between it and the end of the space reserved for\n     * it. */\n    return (lastOffset + lastWrote) - firstOffset;\n  }\n\n  /** @override */\n  fromArray(values) {\n    const dest = this.makeDestinationObject();\n    for (const fd of this.fields) {\n      if ((undefined !== fd.property)\n          && (0 < values.length)) {\n        dest[fd.property] = values.shift();\n      }\n    }\n    return dest;\n  }\n\n  /**\n   * Get access to the layout of a given property.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Layout} - the layout associated with `property`, or\n   * undefined if there is no such property.\n   */\n  layoutFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n\n  /**\n   * Get the offset of a structure member.\n   *\n   * @param {String} property - the structure member of interest.\n   *\n   * @return {Number} - the offset in bytes to the start of `property`\n   * within the structure, or undefined if `property` is not a field\n   * within the structure.  If the property is a member but follows a\n   * variable-length structure member a negative number will be\n   * returned.\n   */\n  offsetOf(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    let offset = 0;\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return offset;\n      }\n      if (0 > fd.span) {\n        offset = -1;\n      } else if (0 <= offset) {\n        offset += fd.span;\n      }\n    }\n  }\n}\n\n/**\n * An object that can provide a {@link\n * Union#discriminator|discriminator} API for {@link Union}.\n *\n * **NOTE** This is an abstract base class; you can create instances\n * if it amuses you, but they won't support the {@link\n * UnionDiscriminator#encode|encode} or {@link\n * UnionDiscriminator#decode|decode} functions.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}.\n *\n * @abstract\n */\nclass UnionDiscriminator {\n  constructor(property) {\n    /** The {@link Layout#property|property} to be used when the\n     * discriminator is referenced in isolation (generally when {@link\n     * Union#decode|Union decode} cannot delegate to a specific\n     * variant). */\n    this.property = property;\n  }\n\n  /** Analog to {@link Layout#decode|Layout decode} for union discriminators.\n   *\n   * The implementation of this method need not reference the buffer if\n   * variant information is available through other means. */\n  decode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n\n  /** Analog to {@link Layout#decode|Layout encode} for union discriminators.\n   *\n   * The implementation of this method need not store the value if\n   * variant information is maintained through other means. */\n  encode() {\n    throw new Error('UnionDiscriminator is abstract');\n  }\n}\n\n/**\n * An object that can provide a {@link\n * UnionDiscriminator|discriminator API} for {@link Union} using an\n * unsigned integral {@link Layout} instance located either inside or\n * outside the union.\n *\n * @param {ExternalLayout} layout - initializes {@link\n * UnionLayoutDiscriminator#layout|layout}.  Must satisfy {@link\n * ExternalLayout#isCount|isCount()}.\n *\n * @param {string} [property] - Default for {@link\n * UnionDiscriminator#property|property}, superseding the property\n * from `layout`, but defaulting to `variant` if neither `property`\n * nor layout provide a property name.\n *\n * @augments {UnionDiscriminator}\n */\nclass UnionLayoutDiscriminator extends UnionDiscriminator {\n  constructor(layout, property) {\n    if (!((layout instanceof ExternalLayout)\n          && layout.isCount())) {\n      throw new TypeError('layout must be an unsigned integer ExternalLayout');\n    }\n\n    super(property || layout.property || 'variant');\n\n    /** The {@link ExternalLayout} used to access the discriminator\n     * value. */\n    this.layout = layout;\n  }\n\n  /** Delegate decoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  decode(b, offset) {\n    return this.layout.decode(b, offset);\n  }\n\n  /** Delegate encoding to {@link UnionLayoutDiscriminator#layout|layout}. */\n  encode(src, b, offset) {\n    return this.layout.encode(src, b, offset);\n  }\n}\n\n/**\n * Represent any number of span-compatible layouts.\n *\n * *Factory*: {@link module:Layout.union|union}\n *\n * If the union has a {@link Union#defaultLayout|default layout} that\n * layout must have a non-negative {@link Layout#span|span}.  The span\n * of a fixed-span union includes its {@link\n * Union#discriminator|discriminator} if the variant is a {@link\n * Union#usesPrefixDiscriminator|prefix of the union}, plus the span\n * of its {@link Union#defaultLayout|default layout}.\n *\n * If the union does not have a default layout then the encoded span\n * of the union depends on the encoded span of its variant (which may\n * be fixed or variable).\n *\n * {@link VariantLayout#layout|Variant layout}s are added through\n * {@link Union#addVariant|addVariant}.  If the union has a default\n * layout, the span of the {@link VariantLayout#layout|layout\n * contained by the variant} must not exceed the span of the {@link\n * Union#defaultLayout|default layout} (minus the span of a {@link\n * Union#usesPrefixDiscriminator|prefix disriminator}, if used).  The\n * span of the variant will equal the span of the union itself.\n *\n * The variant for a buffer can only be identified from the {@link\n * Union#discriminator|discriminator} {@link\n * UnionDiscriminator#property|property} (in the case of the {@link\n * Union#defaultLayout|default layout}), or by using {@link\n * Union#getVariant|getVariant} and examining the resulting {@link\n * VariantLayout} instance.\n *\n * A variant compatible with a JavaScript object can be identified\n * using {@link Union#getSourceVariant|getSourceVariant}.\n *\n * @param {(UnionDiscriminator|ExternalLayout|Layout)} discr - How to\n * identify the layout used to interpret the union contents.  The\n * parameter must be an instance of {@link UnionDiscriminator}, an\n * {@link ExternalLayout} that satisfies {@link\n * ExternalLayout#isCount|isCount()}, or {@link UInt} (or {@link\n * UIntBE}).  When a non-external layout element is passed the layout\n * appears at the start of the union.  In all cases the (synthesized)\n * {@link UnionDiscriminator} instance is recorded as {@link\n * Union#discriminator|discriminator}.\n *\n * @param {(Layout|null)} defaultLayout - initializer for {@link\n * Union#defaultLayout|defaultLayout}.  If absent defaults to `null`.\n * If `null` there is no default layout: the union has data-dependent\n * length and attempts to decode or encode unrecognized variants will\n * throw an exception.  A {@link Layout} instance must have a\n * non-negative {@link Layout#span|span}, and if it lacks a {@link\n * Layout#property|property} the {@link\n * Union#defaultLayout|defaultLayout} will be a {@link\n * Layout#replicate|replica} with property `content`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Union extends Layout {\n  constructor(discr, defaultLayout, property) {\n    const upv = ((discr instanceof UInt)\n               || (discr instanceof UIntBE));\n    if (upv) {\n      discr = new UnionLayoutDiscriminator(new OffsetLayout(discr));\n    } else if ((discr instanceof ExternalLayout)\n               && discr.isCount()) {\n      discr = new UnionLayoutDiscriminator(discr);\n    } else if (!(discr instanceof UnionDiscriminator)) {\n      throw new TypeError('discr must be a UnionDiscriminator '\n                          + 'or an unsigned integer layout');\n    }\n    if (undefined === defaultLayout) {\n      defaultLayout = null;\n    }\n    if (!((null === defaultLayout)\n          || (defaultLayout instanceof Layout))) {\n      throw new TypeError('defaultLayout must be null or a Layout');\n    }\n    if (null !== defaultLayout) {\n      if (0 > defaultLayout.span) {\n        throw new Error('defaultLayout must have constant span');\n      }\n      if (undefined === defaultLayout.property) {\n        defaultLayout = defaultLayout.replicate('content');\n      }\n    }\n\n    /* The union span can be estimated only if there's a default\n     * layout.  The union spans its default layout, plus any prefix\n     * variant layout.  By construction both layouts, if present, have\n     * non-negative span. */\n    let span = -1;\n    if (defaultLayout) {\n      span = defaultLayout.span;\n      if ((0 <= span) && upv) {\n        span += discr.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The interface for the discriminator value in isolation.\n     *\n     * This a {@link UnionDiscriminator} either passed to the\n     * constructor or synthesized from the `discr` constructor\n     * argument.  {@link\n     * Union#usesPrefixDiscriminator|usesPrefixDiscriminator} will be\n     * `true` iff the `discr` parameter was a non-offset {@link\n     * Layout} instance. */\n    this.discriminator = discr;\n\n    /** `true` if the {@link Union#discriminator|discriminator} is the\n     * first field in the union.\n     *\n     * If `false` the discriminator is obtained from somewhere\n     * else. */\n    this.usesPrefixDiscriminator = upv;\n\n    /** The layout for non-discriminator content when the value of the\n     * discriminator is not recognized.\n     *\n     * This is the value passed to the constructor.  It is\n     * structurally equivalent to the second component of {@link\n     * Union#layout|layout} but may have a different property\n     * name. */\n    this.defaultLayout = defaultLayout;\n\n    /** A registry of allowed variants.\n     *\n     * The keys are unsigned integers which should be compatible with\n     * {@link Union.discriminator|discriminator}.  The property value\n     * is the corresponding {@link VariantLayout} instances assigned\n     * to this union by {@link Union#addVariant|addVariant}.\n     *\n     * **NOTE** The registry remains mutable so that variants can be\n     * {@link Union#addVariant|added} at any time.  Users should not\n     * manipulate the content of this property. */\n    this.registry = {};\n\n    /* Private variable used when invoking getSourceVariant */\n    let boundGetSourceVariant = this.defaultGetSourceVariant.bind(this);\n\n    /** Function to infer the variant selected by a source object.\n     *\n     * Defaults to {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant} but may\n     * be overridden using {@link\n     * Union#configGetSourceVariant|configGetSourceVariant}.\n     *\n     * @param {Object} src - as with {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * @returns {(undefined|VariantLayout)} The default variant\n     * (`undefined`) or first registered variant that uses a property\n     * available in `src`. */\n    this.getSourceVariant = function(src) {\n      return boundGetSourceVariant(src);\n    };\n\n    /** Function to override the implementation of {@link\n     * Union#getSourceVariant|getSourceVariant}.\n     *\n     * Use this if the desired variant cannot be identified using the\n     * algorithm of {@link\n     * Union#defaultGetSourceVariant|defaultGetSourceVariant}.\n     *\n     * **NOTE** The provided function will be invoked bound to this\n     * Union instance, providing local access to {@link\n     * Union#registry|registry}.\n     *\n     * @param {Function} gsv - a function that follows the API of\n     * {@link Union#defaultGetSourceVariant|defaultGetSourceVariant}. */\n    this.configGetSourceVariant = function(gsv) {\n      boundGetSourceVariant = gsv.bind(this);\n    };\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Default layouts always have non-negative span, so we don't have\n     * one and we have to recognize the variant which will in turn\n     * determine the span. */\n    const vlo = this.getVariant(b, offset);\n    if (!vlo) {\n      throw new Error('unable to determine span for unrecognized variant');\n    }\n    return vlo.getSpan(b, offset);\n  }\n\n  /**\n   * Method to infer a registered Union variant compatible with `src`.\n   *\n   * The first satisified rule in the following sequence defines the\n   * return value:\n   * * If `src` has properties matching the Union discriminator and\n   *   the default layout, `undefined` is returned regardless of the\n   *   value of the discriminator property (this ensures the default\n   *   layout will be used);\n   * * If `src` has a property matching the Union discriminator, the\n   *   value of the discriminator identifies a registered variant, and\n   *   either (a) the variant has no layout, or (b) `src` has the\n   *   variant's property, then the variant is returned (because the\n   *   source satisfies the constraints of the variant it identifies);\n   * * If `src` does not have a property matching the Union\n   *   discriminator, but does have a property matching a registered\n   *   variant, then the variant is returned (because the source\n   *   matches a variant without an explicit conflict);\n   * * An error is thrown (because we either can't identify a variant,\n   *   or we were explicitly told the variant but can't satisfy it).\n   *\n   * @param {Object} src - an object presumed to be compatible with\n   * the content of the Union.\n   *\n   * @return {(undefined|VariantLayout)} - as described above.\n   *\n   * @throws {Error} - if `src` cannot be associated with a default or\n   * registered variant.\n   */\n  defaultGetSourceVariant(src) {\n    if (src.hasOwnProperty(this.discriminator.property)) {\n      if (this.defaultLayout\n          && src.hasOwnProperty(this.defaultLayout.property)) {\n        return undefined;\n      }\n      const vlo = this.registry[src[this.discriminator.property]];\n      if (vlo\n          && ((!vlo.layout)\n              || src.hasOwnProperty(vlo.property))) {\n        return vlo;\n      }\n    } else {\n      for (const tag in this.registry) {\n        const vlo = this.registry[tag];\n        if (src.hasOwnProperty(vlo.property)) {\n          return vlo;\n        }\n      }\n    }\n    throw new Error('unable to infer src variant');\n  }\n\n  /** Implement {@link Layout#decode|decode} for {@link Union}.\n   *\n   * If the variant is {@link Union#addVariant|registered} the return\n   * value is an instance of that variant, with no explicit\n   * discriminator.  Otherwise the {@link Union#defaultLayout|default\n   * layout} is used to decode the content. */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let dest;\n    const dlo = this.discriminator;\n    const discr = dlo.decode(b, offset);\n    let clo = this.registry[discr];\n    if (undefined === clo) {\n      let contentOffset = 0;\n      clo = this.defaultLayout;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dest = this.makeDestinationObject();\n      dest[dlo.property] = discr;\n      dest[clo.property] = this.defaultLayout.decode(b, offset + contentOffset);\n    } else {\n      dest = clo.decode(b, offset);\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Union}.\n   *\n   * This API assumes the `src` object is consistent with the union's\n   * {@link Union#defaultLayout|default layout}.  To encode variants\n   * use the appropriate variant-specific {@link VariantLayout#encode}\n   * method. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const vlo = this.getSourceVariant(src);\n    if (undefined === vlo) {\n      const dlo = this.discriminator;\n      const clo = this.defaultLayout;\n      let contentOffset = 0;\n      if (this.usesPrefixDiscriminator) {\n        contentOffset = dlo.layout.span;\n      }\n      dlo.encode(src[dlo.property], b, offset);\n      return contentOffset + clo.encode(src[clo.property], b,\n                                        offset + contentOffset);\n    }\n    return vlo.encode(src, b, offset);\n  }\n\n  /** Register a new variant structure within a union.  The newly\n   * created variant is returned.\n   *\n   * @param {Number} variant - initializer for {@link\n   * VariantLayout#variant|variant}.\n   *\n   * @param {Layout} layout - initializer for {@link\n   * VariantLayout#layout|layout}.\n   *\n   * @param {String} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {VariantLayout} */\n  addVariant(variant, layout, property) {\n    const rv = new VariantLayout(this, variant, layout, property);\n    this.registry[variant] = rv;\n    return rv;\n  }\n\n  /**\n   * Get the layout associated with a registered variant.\n   *\n   * If `vb` does not produce a registered variant the function returns\n   * `undefined`.\n   *\n   * @param {(Number|Buffer)} vb - either the variant number, or a\n   * buffer from which the discriminator is to be read.\n   *\n   * @param {Number} offset - offset into `vb` for the start of the\n   * union.  Used only when `vb` is an instance of {Buffer}.\n   *\n   * @return {({VariantLayout}|undefined)}\n   */\n  getVariant(vb, offset) {\n    let variant = vb;\n    if (Buffer.isBuffer(vb)) {\n      if (undefined === offset) {\n        offset = 0;\n      }\n      variant = this.discriminator.decode(vb, offset);\n    }\n    return this.registry[variant];\n  }\n}\n\n/**\n * Represent a specific variant within a containing union.\n *\n * **NOTE** The {@link Layout#span|span} of the variant may include\n * the span of the {@link Union#discriminator|discriminator} used to\n * identify it, but values read and written using the variant strictly\n * conform to the content of {@link VariantLayout#layout|layout}.\n *\n * **NOTE** User code should not invoke this constructor directly.  Use\n * the union {@link Union#addVariant|addVariant} helper method.\n *\n * @param {Union} union - initializer for {@link\n * VariantLayout#union|union}.\n *\n * @param {Number} variant - initializer for {@link\n * VariantLayout#variant|variant}.\n *\n * @param {Layout} [layout] - initializer for {@link\n * VariantLayout#layout|layout}.  If absent the variant carries no\n * data.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.  Unlike many other layouts, variant\n * layouts normally include a property name so they can be identified\n * within their containing {@link Union}.  The property identifier may\n * be absent only if `layout` is is absent.\n *\n * @augments {Layout}\n */\nclass VariantLayout extends Layout {\n  constructor(union, variant, layout, property) {\n    if (!(union instanceof Union)) {\n      throw new TypeError('union must be a Union');\n    }\n    if ((!Number.isInteger(variant)) || (0 > variant)) {\n      throw new TypeError('variant must be a (non-negative) integer');\n    }\n    if (('string' === typeof layout)\n        && (undefined === property)) {\n      property = layout;\n      layout = null;\n    }\n    if (layout) {\n      if (!(layout instanceof Layout)) {\n        throw new TypeError('layout must be a Layout');\n      }\n      if ((null !== union.defaultLayout)\n          && (0 <= layout.span)\n          && (layout.span > union.defaultLayout.span)) {\n        throw new Error('variant span exceeds span of containing union');\n      }\n      if ('string' !== typeof property) {\n        throw new TypeError('variant must have a String property');\n      }\n    }\n    let span = union.span;\n    if (0 > union.span) {\n      span = layout ? layout.span : 0;\n      if ((0 <= span) && union.usesPrefixDiscriminator) {\n        span += union.discriminator.layout.span;\n      }\n    }\n    super(span, property);\n\n    /** The {@link Union} to which this variant belongs. */\n    this.union = union;\n\n    /** The unsigned integral value identifying this variant within\n     * the {@link Union#discriminator|discriminator} of the containing\n     * union. */\n    this.variant = variant;\n\n    /** The {@link Layout} to be used when reading/writing the\n     * non-discriminator part of the {@link\n     * VariantLayout#union|union}.  If `null` the variant carries no\n     * data. */\n    this.layout = layout || null;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (0 <= this.span) {\n      /* Will be equal to the containing union span if that is not\n       * variable. */\n      return this.span;\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    /* Span is defined solely by the variant (and prefix discriminator) */\n    return contentOffset + this.layout.getSpan(b, offset + contentOffset);\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    if (this !== this.union.getVariant(b, offset)) {\n      throw new Error('variant mismatch');\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout) {\n      dest[this.property] = this.layout.decode(b, offset + contentOffset);\n    } else if (this.property) {\n      dest[this.property] = true;\n    } else if (this.union.usesPrefixDiscriminator) {\n      dest[this.union.discriminator.property] = this.variant;\n    }\n    return dest;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let contentOffset = 0;\n    if (this.union.usesPrefixDiscriminator) {\n      contentOffset = this.union.discriminator.layout.span;\n    }\n    if (this.layout\n        && (!src.hasOwnProperty(this.property))) {\n      throw new TypeError('variant lacks property ' + this.property);\n    }\n    this.union.discriminator.encode(this.variant, b, offset);\n    let span = contentOffset;\n    if (this.layout) {\n      this.layout.encode(src[this.property], b, offset + contentOffset);\n      span += this.layout.getSpan(b, offset + contentOffset);\n      if ((0 <= this.union.span)\n          && (span > this.union.span)) {\n        throw new Error('encoded variant overruns containing union');\n      }\n    }\n    return span;\n  }\n\n  /** Delegate {@link Layout#fromArray|fromArray} to {@link\n   * VariantLayout#layout|layout}. */\n  fromArray(values) {\n    if (this.layout) {\n      return this.layout.fromArray(values);\n    }\n  }\n}\n\n/** JavaScript chose to define bitwise operations as operating on\n * signed 32-bit values in 2's complement form, meaning any integer\n * with bit 31 set is going to look negative.  For right shifts that's\n * not a problem, because `>>>` is a logical shift, but for every\n * other bitwise operator we have to compensate for possible negative\n * results. */\nfunction fixBitwiseResult(v) {\n  if (0 > v) {\n    v += 0x100000000;\n  }\n  return v;\n}\n\n/**\n * Contain a sequence of bit fields as an unsigned integer.\n *\n * *Factory*: {@link module:Layout.bits|bits}\n *\n * This is a container element; within it there are {@link BitField}\n * instances that provide the extracted properties.  The container\n * simply defines the aggregate representation and its bit ordering.\n * The representation is an object containing properties with numeric\n * or {@link Boolean} values.\n *\n * {@link BitField}s are added with the {@link\n * BitStructure#addField|addField} and {@link\n * BitStructure#addBoolean|addBoolean} methods.\n\n * @param {Layout} word - initializer for {@link\n * BitStructure#word|word}.  The parameter must be an instance of\n * {@link UInt} (or {@link UIntBE}) that is no more than 4 bytes wide.\n *\n * @param {bool} [msb] - `true` if the bit numbering starts at the\n * most significant bit of the containing word; `false` (default) if\n * it starts at the least significant bit of the containing word.  If\n * the parameter at this position is a string and `property` is\n * `undefined` the value of this argument will instead be used as the\n * value of `property`.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass BitStructure extends Layout {\n  constructor(word, msb, property) {\n    if (!((word instanceof UInt)\n          || (word instanceof UIntBE))) {\n      throw new TypeError('word must be a UInt or UIntBE layout');\n    }\n    if (('string' === typeof msb)\n        && (undefined === property)) {\n      property = msb;\n      msb = undefined;\n    }\n    if (4 < word.span) {\n      throw new RangeError('word cannot exceed 32 bits');\n    }\n    super(word.span, property);\n\n    /** The layout used for the packed value.  {@link BitField}\n     * instances are packed sequentially depending on {@link\n     * BitStructure#msb|msb}. */\n    this.word = word;\n\n    /** Whether the bit sequences are packed starting at the most\n     * significant bit growing down (`true`), or the least significant\n     * bit growing up (`false`).\n     *\n     * **NOTE** Regardless of this value, the least significant bit of\n     * any {@link BitField} value is the least significant bit of the\n     * corresponding section of the packed value. */\n    this.msb = !!msb;\n\n    /** The sequence of {@link BitField} layouts that comprise the\n     * packed structure.\n     *\n     * **NOTE** The array remains mutable to allow fields to be {@link\n     * BitStructure#addField|added} after construction.  Users should\n     * not manipulate the content of this property.*/\n    this.fields = [];\n\n    /* Storage for the value.  Capture a variable instead of using an\n     * instance property because we don't want anything to change the\n     * value without going through the mutator. */\n    let value = 0;\n    this._packedSetValue = function(v) {\n      value = fixBitwiseResult(v);\n      return this;\n    };\n    this._packedGetValue = function() {\n      return value;\n    };\n  }\n\n  /** @override */\n  decode(b, offset) {\n    const dest = this.makeDestinationObject();\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        dest[fd.property] = fd.decode(value);\n      }\n    }\n    return dest;\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link BitStructure}.\n   *\n   * If `src` is missing a property for a member with a defined {@link\n   * Layout#property|property} the corresponding region of the packed\n   * value is left unmodified.  Unused bits are also left unmodified. */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    const value = this.word.decode(b, offset);\n    this._packedSetValue(value);\n    for (const fd of this.fields) {\n      if (undefined !== fd.property) {\n        const fv = src[fd.property];\n        if (undefined !== fv) {\n          fd.encode(fv);\n        }\n      }\n    }\n    return this.word.encode(this._packedGetValue(), b, offset);\n  }\n\n  /** Register a new bitfield with a containing bit structure.  The\n   * resulting bitfield is returned.\n   *\n   * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {BitField} */\n  addField(bits, property) {\n    const bf = new BitField(this, bits, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /** As with {@link BitStructure#addField|addField} for single-bit\n   * fields with `boolean` value representation.\n   *\n   * @param {string} property - initializer for {@link\n   * Layout#property|property}.\n   *\n   * @return {Boolean} */\n  addBoolean(property) {\n    // This is my Boolean, not the Javascript one.\n    // eslint-disable-next-line no-new-wrappers\n    const bf = new Boolean(this, property);\n    this.fields.push(bf);\n    return bf;\n  }\n\n  /**\n   * Get access to the bit field for a given property.\n   *\n   * @param {String} property - the bit field of interest.\n   *\n   * @return {BitField} - the field associated with `property`, or\n   * undefined if there is no such property.\n   */\n  fieldFor(property) {\n    if ('string' !== typeof property) {\n      throw new TypeError('property must be string');\n    }\n    for (const fd of this.fields) {\n      if (fd.property === property) {\n        return fd;\n      }\n    }\n  }\n}\n\n/**\n * Represent a sequence of bits within a {@link BitStructure}.\n *\n * All bit field values are represented as unsigned integers.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addField|addField} helper\n * method.\n *\n * **NOTE** BitField instances are not instances of {@link Layout}\n * since {@link Layout#span|span} measures 8-bit units.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {Number} bits - initializer for {@link BitField#bits|bits}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n */\nclass BitField {\n  constructor(container, bits, property) {\n    if (!(container instanceof BitStructure)) {\n      throw new TypeError('container must be a BitStructure');\n    }\n    if ((!Number.isInteger(bits)) || (0 >= bits)) {\n      throw new TypeError('bits must be positive integer');\n    }\n    const totalBits = 8 * container.span;\n    const usedBits = container.fields.reduce((sum, fd) => sum + fd.bits, 0);\n    if ((bits + usedBits) > totalBits) {\n      throw new Error('bits too long for span remainder ('\n                      + (totalBits - usedBits) + ' of '\n                      + totalBits + ' remain)');\n    }\n\n    /** The {@link BitStructure} instance to which this bit field\n     * belongs. */\n    this.container = container;\n\n    /** The span of this value in bits. */\n    this.bits = bits;\n\n    /** A mask of {@link BitField#bits|bits} bits isolating value bits\n     * that fit within the field.\n     *\n     * That is, it masks a value that has not yet been shifted into\n     * position within its containing packed integer. */\n    this.valueMask = (1 << bits) - 1;\n    if (32 === bits) { // shifted value out of range\n      this.valueMask = 0xFFFFFFFF;\n    }\n\n    /** The offset of the value within the containing packed unsigned\n     * integer.  The least significant bit of the packed value is at\n     * offset zero, regardless of bit ordering used. */\n    this.start = usedBits;\n    if (this.container.msb) {\n      this.start = totalBits - usedBits - bits;\n    }\n\n    /** A mask of {@link BitField#bits|bits} isolating the field value\n     * within the containing packed unsigned integer. */\n    this.wordMask = fixBitwiseResult(this.valueMask << this.start);\n\n    /** The property name used when this bitfield is represented in an\n     * Object.\n     *\n     * Intended to be functionally equivalent to {@link\n     * Layout#property}.\n     *\n     * If left undefined the corresponding span of bits will be\n     * treated as padding: it will not be mutated by {@link\n     * Layout#encode|encode} nor represented as a property in the\n     * decoded Object. */\n    this.property = property;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field. */\n  decode() {\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(word & this.wordMask);\n    const value = wordValue >>> this.start;\n    return value;\n  }\n\n  /** Store a value into the corresponding subsequence of the containing\n   * bit field.\n   *\n   * **NOTE** This is not a specialization of {@link\n   * Layout#encode|Layout.encode} and there is no return value. */\n  encode(value) {\n    if ((!Number.isInteger(value))\n        || (value !== fixBitwiseResult(value & this.valueMask))) {\n      throw new TypeError(nameWithProperty('BitField.encode', this)\n                          + ' value must be integer not exceeding ' + this.valueMask);\n    }\n    const word = this.container._packedGetValue();\n    const wordValue = fixBitwiseResult(value << this.start);\n    this.container._packedSetValue(fixBitwiseResult(word & ~this.wordMask)\n                                   | wordValue);\n  };\n}\n\n/**\n * Represent a single bit within a {@link BitStructure} as a\n * JavaScript boolean.\n *\n * **NOTE** User code should not invoke this constructor directly.\n * Use the container {@link BitStructure#addBoolean|addBoolean} helper\n * method.\n *\n * @param {BitStructure} container - initializer for {@link\n * BitField#container|container}.\n *\n * @param {string} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {BitField}\n */\n/* eslint-disable no-extend-native */\nclass Boolean extends BitField {\n  constructor(container, property) {\n    super(container, 1, property);\n  }\n\n  /** Override {@link BitField#decode|decode} for {@link Boolean|Boolean}.\n   *\n   * @returns {boolean} */\n  decode(b, offset) {\n    return !!BitField.prototype.decode.call(this, b, offset);\n  }\n\n  /** @override */\n  encode(value) {\n    if ('boolean' === typeof value) {\n      // BitField requires integer values\n      value = +value;\n    }\n    return BitField.prototype.encode.call(this, value);\n  }\n}\n/* eslint-enable no-extend-native */\n\n/**\n * Contain a fixed-length block of arbitrary data, represented as a\n * Buffer.\n *\n * *Factory*: {@link module:Layout.blob|blob}\n *\n * @param {(Number|ExternalLayout)} length - initializes {@link\n * Blob#length|length}.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Blob extends Layout {\n  constructor(length, property) {\n    if (!(((length instanceof ExternalLayout) && length.isCount())\n          || (Number.isInteger(length) && (0 <= length)))) {\n      throw new TypeError('length must be positive integer '\n                          + 'or an unsigned integer ExternalLayout');\n    }\n\n    let span = -1;\n    if (!(length instanceof ExternalLayout)) {\n      span = length;\n    }\n    super(span, property);\n\n    /** The number of bytes in the blob.\n     *\n     * This may be a non-negative integer, or an instance of {@link\n     * ExternalLayout} that satisfies {@link\n     * ExternalLayout#isCount|isCount()}. */\n    this.length = length;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return span;\n  }\n\n  /** @override */\n  decode(b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.span;\n    if (0 > span) {\n      span = this.length.decode(b, offset);\n    }\n    return b.slice(offset, offset + span);\n  }\n\n  /** Implement {@link Layout#encode|encode} for {@link Blob}.\n   *\n   * **NOTE** If {@link Layout#count|count} is an instance of {@link\n   * ExternalLayout} then the length of `src` will be encoded as the\n   * count after `src` is encoded. */\n  encode(src, b, offset) {\n    let span = this.length;\n    if (this.length instanceof ExternalLayout) {\n      span = src.length;\n    }\n    if (!(Buffer.isBuffer(src)\n          && (span === src.length))) {\n      throw new TypeError(nameWithProperty('Blob.encode', this)\n                          + ' requires (length ' + span + ') Buffer as src');\n    }\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    b.write(src.toString('hex'), offset, span, 'hex');\n    if (this.length instanceof ExternalLayout) {\n      this.length.encode(span, b, offset);\n    }\n    return span;\n  }\n}\n\n/**\n * Contain a `NUL`-terminated UTF8 string.\n *\n * *Factory*: {@link module:Layout.cstr|cstr}\n *\n * **NOTE** Any UTF8 string that incorporates a zero-valued byte will\n * not be correctly decoded by this layout.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass CString extends Layout {\n  constructor(property) {\n    super(-1, property);\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let idx = offset;\n    while ((idx < b.length) && (0 !== b[idx])) {\n      idx += 1;\n    }\n    return 1 + idx - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    return b.slice(offset, offset + span - 1).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new Buffer(src, 'utf8');\n    const span = srcb.length;\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    b[offset + span] = 0;\n    return span + 1;\n  }\n}\n\n/**\n * Contain a UTF8 string with implicit length.\n *\n * *Factory*: {@link module:Layout.utf8|utf8}\n *\n * **NOTE** Because the length is implicit in the size of the buffer\n * this layout should be used only in isolation, or in a situation\n * where the length can be expressed by operating on a slice of the\n * containing buffer.\n *\n * @param {Number} [maxSpan] - the maximum length allowed for encoded\n * string content.  If not provided there is no bound on the allowed\n * content.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass UTF8 extends Layout {\n  constructor(maxSpan, property) {\n    if (('string' === typeof maxSpan)\n        && (undefined === property)) {\n      property = maxSpan;\n      maxSpan = undefined;\n    }\n    if (undefined === maxSpan) {\n      maxSpan = -1;\n    } else if (!Number.isInteger(maxSpan)) {\n      throw new TypeError('maxSpan must be an integer');\n    }\n\n    super(-1, property);\n\n    /** The maximum span of the layout in bytes.\n     *\n     * Positive values are generally expected.  Zero is abnormal.\n     * Attempts to encode or decode a value that exceeds this length\n     * will throw a `RangeError`.\n     *\n     * A negative value indicates that there is no bound on the length\n     * of the content. */\n    this.maxSpan = maxSpan;\n  }\n\n  /** @override */\n  getSpan(b, offset) {\n    if (!Buffer.isBuffer(b)) {\n      throw new TypeError('b must be a Buffer');\n    }\n    if (undefined === offset) {\n      offset = 0;\n    }\n    return b.length - offset;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    let span = this.getSpan(b, offset);\n    if ((0 <= this.maxSpan)\n        && (this.maxSpan < span)) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    return b.slice(offset, offset + span).toString('utf-8');\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    if (undefined === offset) {\n      offset = 0;\n    }\n    /* Must force this to a string, lest it be a number and the\n     * \"utf8-encoding\" below actually allocate a buffer of length\n     * src */\n    if ('string' !== typeof src) {\n      src = src.toString();\n    }\n    const srcb = new Buffer(src, 'utf8');\n    const span = srcb.length;\n    if ((0 <= this.maxSpan)\n        && (this.maxSpan < span)) {\n      throw new RangeError('text length exceeds maxSpan');\n    }\n    if ((offset + span) > b.length) {\n      throw new RangeError('encoding overruns Buffer');\n    }\n    srcb.copy(b, offset);\n    return span;\n  }\n}\n\n/**\n * Contain a constant value.\n *\n * This layout may be used in cases where a JavaScript value can be\n * inferred without an expression in the binary encoding.  An example\n * would be a {@link VariantLayout|variant layout} where the content\n * is implied by the union {@link Union#discriminator|discriminator}.\n *\n * @param {Object|Number|String} value - initializer for {@link\n * Constant#value|value}.  If the value is an object (or array) and\n * the application intends the object to remain unchanged regardless\n * of what is done to values decoded by this layout, the value should\n * be frozen prior passing it to this constructor.\n *\n * @param {String} [property] - initializer for {@link\n * Layout#property|property}.\n *\n * @augments {Layout}\n */\nclass Constant extends Layout {\n  constructor(value, property) {\n    super(0, property);\n\n    /** The value produced by this constant when the layout is {@link\n     * Constant#decode|decoded}.\n     *\n     * Any JavaScript value including `null` and `undefined` is\n     * permitted.\n     *\n     * **WARNING** If `value` passed in the constructor was not\n     * frozen, it is possible for users of decoded values to change\n     * the content of the value. */\n    this.value = value;\n  }\n\n  /** @override */\n  decode(b, offset, dest) {\n    return this.value;\n  }\n\n  /** @override */\n  encode(src, b, offset) {\n    /* Constants take no space */\n    return 0;\n  }\n}\n\nexports.ExternalLayout = ExternalLayout;\nexports.GreedyCount = GreedyCount;\nexports.OffsetLayout = OffsetLayout;\nexports.UInt = UInt;\nexports.UIntBE = UIntBE;\nexports.Int = Int;\nexports.IntBE = IntBE;\nexports.Float = Float;\nexports.FloatBE = FloatBE;\nexports.Double = Double;\nexports.DoubleBE = DoubleBE;\nexports.Sequence = Sequence;\nexports.Structure = Structure;\nexports.UnionDiscriminator = UnionDiscriminator;\nexports.UnionLayoutDiscriminator = UnionLayoutDiscriminator;\nexports.Union = Union;\nexports.VariantLayout = VariantLayout;\nexports.BitStructure = BitStructure;\nexports.BitField = BitField;\nexports.Boolean = Boolean;\nexports.Blob = Blob;\nexports.CString = CString;\nexports.UTF8 = UTF8;\nexports.Constant = Constant;\n\n/** Factory for {@link GreedyCount}. */\nexports.greedy = ((elementSpan, property) => new GreedyCount(elementSpan, property));\n\n/** Factory for {@link OffsetLayout}. */\nexports.offset = ((layout, offset, property) => new OffsetLayout(layout, offset, property));\n\n/** Factory for {@link UInt|unsigned int layouts} spanning one\n * byte. */\nexports.u8 = (property => new UInt(1, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16 = (property => new UInt(2, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24 = (property => new UInt(3, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32 = (property => new UInt(4, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40 = (property => new UInt(5, property));\n\n/** Factory for {@link UInt|little-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48 = (property => new UInt(6, property));\n\n/** Factory for {@link NearUInt64|little-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64 = (property => new NearUInt64(property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning two bytes. */\nexports.u16be = (property => new UIntBE(2, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning three bytes. */\nexports.u24be = (property => new UIntBE(3, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning four bytes. */\nexports.u32be = (property => new UIntBE(4, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning five bytes. */\nexports.u40be = (property => new UIntBE(5, property));\n\n/** Factory for {@link UInt|big-endian unsigned int layouts}\n * spanning six bytes. */\nexports.u48be = (property => new UIntBE(6, property));\n\n/** Factory for {@link NearUInt64BE|big-endian unsigned int\n * layouts} interpreted as Numbers. */\nexports.nu64be = (property => new NearUInt64BE(property));\n\n/** Factory for {@link Int|signed int layouts} spanning one\n * byte. */\nexports.s8 = (property => new Int(1, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning two bytes. */\nexports.s16 = (property => new Int(2, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning three bytes. */\nexports.s24 = (property => new Int(3, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning four bytes. */\nexports.s32 = (property => new Int(4, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning five bytes. */\nexports.s40 = (property => new Int(5, property));\n\n/** Factory for {@link Int|little-endian signed int layouts}\n * spanning six bytes. */\nexports.s48 = (property => new Int(6, property));\n\n/** Factory for {@link NearInt64|little-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64 = (property => new NearInt64(property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning two bytes. */\nexports.s16be = (property => new IntBE(2, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning three bytes. */\nexports.s24be = (property => new IntBE(3, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning four bytes. */\nexports.s32be = (property => new IntBE(4, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning five bytes. */\nexports.s40be = (property => new IntBE(5, property));\n\n/** Factory for {@link Int|big-endian signed int layouts}\n * spanning six bytes. */\nexports.s48be = (property => new IntBE(6, property));\n\n/** Factory for {@link NearInt64BE|big-endian signed int layouts}\n * interpreted as Numbers. */\nexports.ns64be = (property => new NearInt64BE(property));\n\n/** Factory for {@link Float|little-endian 32-bit floating point} values. */\nexports.f32 = (property => new Float(property));\n\n/** Factory for {@link FloatBE|big-endian 32-bit floating point} values. */\nexports.f32be = (property => new FloatBE(property));\n\n/** Factory for {@link Double|little-endian 64-bit floating point} values. */\nexports.f64 = (property => new Double(property));\n\n/** Factory for {@link DoubleBE|big-endian 64-bit floating point} values. */\nexports.f64be = (property => new DoubleBE(property));\n\n/** Factory for {@link Structure} values. */\nexports.struct = ((fields, property, decodePrefixes) => new Structure(fields, property, decodePrefixes));\n\n/** Factory for {@link BitStructure} values. */\nexports.bits = ((word, msb, property) => new BitStructure(word, msb, property));\n\n/** Factory for {@link Sequence} values. */\nexports.seq = ((elementLayout, count, property) => new Sequence(elementLayout, count, property));\n\n/** Factory for {@link Union} values. */\nexports.union = ((discr, defaultLayout, property) => new Union(discr, defaultLayout, property));\n\n/** Factory for {@link UnionLayoutDiscriminator} values. */\nexports.unionLayoutDiscriminator = ((layout, property) => new UnionLayoutDiscriminator(layout, property));\n\n/** Factory for {@link Blob} values. */\nexports.blob = ((length, property) => new Blob(length, property));\n\n/** Factory for {@link CString} values. */\nexports.cstr = (property => new CString(property));\n\n/** Factory for {@link UTF8} values. */\nexports.utf8 = ((maxSpan, property) => new UTF8(maxSpan, property));\n\n/** Factory for {@link Constant} values. */\nexports.const = ((value, property) => new Constant(value, property));\n"],"mappingsgBAAYC,IAAZ,EAAkBC,QAAlB,EAA4B;IAAA;;IAC1B,IAAI,CAACC,MAAM,CAACC,SAAP,CAAiBH,IAAjB,CAAL,EAA6B;MAC3B,MAAM,IAAII,SAAJ,CAAc,yBAAd,CAAN;IACD;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACI,KAAKJ,IAAL,GAAYA,IAAZ;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;IACI,KAAKC,QAAL,GAAgBA,QAAhB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACE,iCAAwB;MACtB,OAAO,EAAP;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAOI,CAAP,EAAUC,MAAV,EAAkB;MAChB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,gBAAOC,GAAP,EAAYH,CAAZ,EAAeC,MAAf,EAAuB;MACrB,MAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,iBAAQF,CAAR,EAAWC,MAAX,EAAmB;MACjB,IAAI,IAAI,KAAKN,IAAb,EAAmB;QACjB,MAAM,IAAIS,UAAJ,CAAe,oBAAf,CAAN;MACD;;MACD,OAAO,KAAKT,IAAZ;IACD;IAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACE,mBAAUC,QAAV,EAAoB;MAClB,IAAMS,EAAE,GAAGC,MAAM,CAACC,MAAP,CAAc,KAAKC,WAAL,CAAiBC,SAA/B,CAAX;MACAH,MAAM,CAACI,MAAP,CAAcL,EAAd,EAAkB,IAAlB;MACAA,EAA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"},"metadata":{},"sourceType":"script"}