{"ast":null,"code":"import { Connection, Keypair, sendAndConfirmRawTransaction } from \"@solana/web3.js\";\nimport { isBrowser } from \"./utils/common\";\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\n\nexport default class Provider {\n  /**\n   * @param connection The cluster connection where the program is deployed.\n   * @param wallet     The wallet used to pay for and sign all transactions.\n   * @param opts       Transaction confirmation options to use by default.\n   */\n  constructor(connection, wallet, opts) {\n    this.connection = connection;\n    this.wallet = wallet;\n    this.opts = opts;\n  }\n\n  static defaultOptions() {\n    return {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\"\n    };\n  }\n  /**\n   * Returns a `Provider` with a wallet read from the local filesystem.\n   *\n   * @param url  The network cluster url.\n   * @param opts The default transaction confirmation options.\n   *\n   * (This api is for Node only.)\n   */\n\n\n  static local(url, opts) {\n    opts = opts !== null && opts !== void 0 ? opts : Provider.defaultOptions();\n    const connection = new Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n    const wallet = NodeWallet.local();\n    return new Provider(connection, wallet, opts);\n  }\n  /**\n   * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n   * variable\n   *\n   * (This api is for Node only.)\n   */\n\n\n  static env() {\n    if (isBrowser) {\n      throw new Error(`Provider env is not available on browser.`);\n    }\n\n    const process = require(\"process\");\n\n    const url = process.env.ANCHOR_PROVIDER_URL;\n\n    if (url === undefined) {\n      throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n    }\n\n    const options = Provider.defaultOptions();\n    const connection = new Connection(url, options.commitment);\n    const wallet = NodeWallet.local();\n    return new Provider(connection, wallet, options);\n  }\n  /**\n   * Sends the given transaction, paid for and signed by the provider's wallet.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provider wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n\n\n  async send(tx, signers, opts) {\n    if (signers === undefined) {\n      signers = [];\n    }\n\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n    await this.wallet.signTransaction(tx);\n    signers.filter(s => s !== undefined).forEach(kp => {\n      tx.partialSign(kp);\n    });\n    const rawTx = tx.serialize();\n    const txId = await sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n    return txId;\n  }\n  /**\n   * Similar to `send`, but for an array of transactions and signers.\n   */\n\n\n  async sendAll(reqs, opts) {\n    if (opts === undefined) {\n      opts = this.opts;\n    }\n\n    const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n    let txs = reqs.map(r => {\n      let tx = r.tx;\n      let signers = r.signers;\n\n      if (signers === undefined) {\n        signers = [];\n      }\n\n      tx.feePayer = this.wallet.publicKey;\n      tx.recentBlockhash = blockhash.blockhash;\n      signers.filter(s => s !== undefined).forEach(kp => {\n        tx.partialSign(kp);\n      });\n      return tx;\n    });\n    const signedTxs = await this.wallet.signAllTransactions(txs);\n    const sigs = [];\n\n    for (let k = 0; k < txs.length; k += 1) {\n      const tx = signedTxs[k];\n      const rawTx = tx.serialize();\n      sigs.push(await sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n    }\n\n    return sigs;\n  }\n  /**\n   * Simulates the given transaction, returning emitted logs from execution.\n   *\n   * @param tx      The transaction to send.\n   * @param signers The set of signers in addition to the provdier wallet that\n   *                will sign the transaction.\n   * @param opts    Transaction confirmation options.\n   */\n\n\n  async simulate(tx, signers) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.opts;\n\n    var _a, _b, _c;\n\n    if (signers === undefined) {\n      signers = [];\n    }\n\n    tx.feePayer = this.wallet.publicKey;\n    tx.recentBlockhash = (await this.connection.getRecentBlockhash((_a = opts.preflightCommitment) !== null && _a !== void 0 ? _a : this.opts.preflightCommitment)).blockhash;\n    await this.wallet.signTransaction(tx);\n    signers.filter(s => s !== undefined).forEach(kp => {\n      tx.partialSign(kp);\n    });\n    return await simulateTransaction(this.connection, tx, (_c = (_b = opts.commitment) !== null && _b !== void 0 ? _b : this.opts.commitment) !== null && _c !== void 0 ? _c : \"recent\");\n  }\n\n}\n/**\n * Node only wallet.\n */\n\nexport class NodeWallet {\n  constructor(payer) {\n    this.payer = payer;\n  }\n\n  static local() {\n    const process = require(\"process\");\n\n    const payer = Keypair.fromSecretKey(Buffer.from(JSON.parse(require(\"fs\").readFileSync(process.env.ANCHOR_WALLET, {\n      encoding: \"utf-8\"\n    }))));\n    return new NodeWallet(payer);\n  }\n\n  async signTransaction(tx) {\n    tx.partialSign(this.payer);\n    return tx;\n  }\n\n  async signAllTransactions(txs) {\n    return txs.map(t => {\n      t.partialSign(this.payer);\n      return t;\n    });\n  }\n\n  get publicKey() {\n    return this.payer.publicKey;\n  }\n\n} // Copy of Connection.simulateTransaction that takes a commitment parameter.\n\nasync function simulateTransaction(connection, transaction, commitment) {\n  // @ts-ignore\n  transaction.recentBlockhash = await connection._recentBlockhash( // @ts-ignore\n  connection._disableBlockhashCaching);\n  const signData = transaction.serializeMessage(); // @ts-ignore\n\n  const wireTransaction = transaction._serialize(signData);\n\n  const encodedTransaction = wireTransaction.toString(\"base64\");\n  const config = {\n    encoding: \"base64\",\n    commitment\n  };\n  const args = [encodedTransaction, config]; // @ts-ignore\n\n  const res = await connection._rpcRequest(\"simulateTransaction\", args);\n\n  if (res.error) {\n    throw new Error(\"failed to simulate transaction: \" + res.error.message);\n  }\n\n  return res.result;\n}\n/**\n * Sets the default provider on the client.\n */\n\n\nexport function setProvider(provider) {\n  _provider = provider;\n}\n/**\n * Returns the default provider being used by the client.\n */\n\nexport function getProvider() {\n  if (_provider === null) {\n    return Provider.local();\n  }\n\n  return _provider;\n} // Global provider used as the default when a provider is not given.\n\nlet _provider = null;","map":{"version":3,"sources":["../../src/provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Connection, Keypair, sendAndConfirmRawTransaction, } from \"@solana/web3.js\";\nimport { isBrowser } from \"./utils/common\";\n/**\n * The network and wallet context used to send transactions paid for and signed\n * by the provider.\n */\nexport default class Provider {\n    /**\n     * @param connection The cluster connection where the program is deployed.\n     * @param wallet     The wallet used to pay for and sign all transactions.\n     * @param opts       Transaction confirmation options to use by default.\n     */\n    constructor(connection, wallet, opts) {\n        this.connection = connection;\n        this.wallet = wallet;\n        this.opts = opts;\n    }\n    static defaultOptions() {\n        return {\n            preflightCommitment: \"recent\",\n            commitment: \"recent\",\n        };\n    }\n    /**\n     * Returns a `Provider` with a wallet read from the local filesystem.\n     *\n     * @param url  The network cluster url.\n     * @param opts The default transaction confirmation options.\n     *\n     * (This api is for Node only.)\n     */\n    static local(url, opts) {\n        opts = opts !== null && opts !== void 0 ? opts : Provider.defaultOptions();\n        const connection = new Connection(url !== null && url !== void 0 ? url : \"http://localhost:8899\", opts.preflightCommitment);\n        const wallet = NodeWallet.local();\n        return new Provider(connection, wallet, opts);\n    }\n    /**\n     * Returns a `Provider` read from the `ANCHOR_PROVIDER_URL` environment\n     * variable\n     *\n     * (This api is for Node only.)\n     */\n    static env() {\n        if (isBrowser) {\n            throw new Error(`Provider env is not available on browser.`);\n        }\n        const process = require(\"process\");\n        const url = process.env.ANCHOR_PROVIDER_URL;\n        if (url === undefined) {\n            throw new Error(\"ANCHOR_PROVIDER_URL is not defined\");\n        }\n        const options = Provider.defaultOptions();\n        const connection = new Connection(url, options.commitment);\n        const wallet = NodeWallet.local();\n        return new Provider(connection, wallet, options);\n    }\n    /**\n     * Sends the given transaction, paid for and signed by the provider's wallet.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provider wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n    async send(tx, signers, opts) {\n        if (signers === undefined) {\n            signers = [];\n        }\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        tx.feePayer = this.wallet.publicKey;\n        tx.recentBlockhash = (await this.connection.getRecentBlockhash(opts.preflightCommitment)).blockhash;\n        await this.wallet.signTransaction(tx);\n        signers\n            .filter((s) => s !== undefined)\n            .forEach((kp) => {\n            tx.partialSign(kp);\n        });\n        const rawTx = tx.serialize();\n        const txId = await sendAndConfirmRawTransaction(this.connection, rawTx, opts);\n        return txId;\n    }\n    /**\n     * Similar to `send`, but for an array of transactions and signers.\n     */\n    async sendAll(reqs, opts) {\n        if (opts === undefined) {\n            opts = this.opts;\n        }\n        const blockhash = await this.connection.getRecentBlockhash(opts.preflightCommitment);\n        let txs = reqs.map((r) => {\n            let tx = r.tx;\n            let signers = r.signers;\n            if (signers === undefined) {\n                signers = [];\n            }\n            tx.feePayer = this.wallet.publicKey;\n            tx.recentBlockhash = blockhash.blockhash;\n            signers\n                .filter((s) => s !== undefined)\n                .forEach((kp) => {\n                tx.partialSign(kp);\n            });\n            return tx;\n        });\n        const signedTxs = await this.wallet.signAllTransactions(txs);\n        const sigs = [];\n        for (let k = 0; k < txs.length; k += 1) {\n            const tx = signedTxs[k];\n            const rawTx = tx.serialize();\n            sigs.push(await sendAndConfirmRawTransaction(this.connection, rawTx, opts));\n        }\n        return sigs;\n    }\n    /**\n     * Simulates the given transaction, returning emitted logs from execution.\n     *\n     * @param tx      The transaction to send.\n     * @param signers The set of signers in addition to the provdier wallet that\n     *                will sign the transaction.\n     * @param opts    Transaction confirmation options.\n     */\n    async simulate(tx, signers, opts = this.opts) {\n        var _a, _b, _c;\n        if (signers === undefined) {\n            signers = [];\n        }\n        tx.feePayer = this.wallet.publicKey;\n        tx.recentBlockhash = (await this.connection.getRecentBlockhash((_a = opts.preflightCommitment) !== null && _a !== void 0 ? _a : this.opts.preflightCommitment)).blockhash;\n        await this.wallet.signTransaction(tx);\n        signers\n            .filter((s) => s !== undefined)\n            .forEach((kp) => {\n            tx.partialSign(kp);\n        });\n        return await simulateTransaction(this.connection, tx, (_c = (_b = opts.commitment) !== null && _b !== void 0 ? _b : this.opts.commitment) !== null && _c !== void 0 ? _c : \"recent\");\n    }\n}\n/**\n * Node only wallet.\n */\nexport class NodeWallet {\n    constructor(payer) {\n        this.payer = payer;\n    }\n    static local() {\n        const process = require(\"process\");\n        const payer = Keypair.fromSecretKey(Buffer.from(JSON.parse(require(\"fs\").readFileSync(process.env.ANCHOR_WALLET, {\n            encoding: \"utf-8\",\n        }))));\n        return new NodeWallet(payer);\n    }\n    async signTransaction(tx) {\n        tx.partialSign(this.payer);\n        return tx;\n    }\n    async signAllTransactions(txs) {\n        return txs.map((t) => {\n            t.partialSign(this.payer);\n            return t;\n        });\n    }\n    get publicKey() {\n        return this.payer.publicKey;\n    }\n}\n// Copy of Connection.simulateTransaction that takes a commitment parameter.\nasync function simulateTransaction(connection, transaction, commitment) {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(\n    // @ts-ignore\n    connection._disableBlockhashCaching);\n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString(\"base64\");\n    const config = { encoding: \"base64\", commitment };\n    const args = [encodedTransaction, config];\n    // @ts-ignore\n    const res = await connection._rpcRequest(\"simulateTransaction\", args);\n    if (res.error) {\n        throw new Error(\"failed to simulate transaction: \" + res.error.message);\n    }\n    return res.result;\n}\n/**\n * Sets the default provider on the client.\n */\nexport function setProvider(provider) {\n    _provider = provider;\n}\n/**\n * Returns the default provider being used by the client.\n */\nexport function getProvider() {\n    if (_provider === null) {\n        return Provider.local();\n    }\n    return _provider;\n}\n// Global provider used as the default when a provider is not given.\nlet _provider = null;\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}