{"ast":null,"code":"import _classCallCheck from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { IdlCoder } from \"./idl\";\n/**\n * Encodes and decodes user defined types.\n */\n\nexport var TypesCoder = /*#__PURE__*/function () {\n  function TypesCoder(idl) {\n    _classCallCheck(this, TypesCoder);\n\n    if (idl.types === undefined) {\n      this.layouts = new Map();\n      return;\n    }\n\n    var types = idl.types;\n    var layouts = types.map(function (acc) {\n      return [acc.name, IdlCoder.typeDefLayout(acc, types)];\n    }); // @ts-ignore\n\n    this.layouts = new Map(layouts);\n  }\n\n  _createClass(TypesCoder, [{\n    key: \"encode\",\n    value: function encode(accountName, account) {\n      var buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n      var layout = this.layouts.get(accountName);\n\n      if (!layout) {\n        throw new Error(\"Unknown account type: \".concat(accountName));\n      }\n\n      var len = layout.encode(account, buffer);\n      return buffer.slice(0, len);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(accountName, ix) {\n      var layout = this.layouts.get(accountName);\n\n      if (!layout) {\n        throw new Error(\"Unknown account type: \".concat(accountName));\n      }\n\n      return layout.decode(ix);\n    }\n  }]);\n\n  return TypesCoder;\n}();","map":{"version":3,"sources":["../../../src/coder/types.ts"],"names":[],"mappings":";;AAEA,SAAS,QAAT,QAAyB,OAAzB;AAEA;;AAEG;;AACH,WAAa,UAAb;EAME,oBAAmB,GAAnB,EAA2B;IAAA;;IACzB,IAAI,GAAG,CAAC,KAAJ,KAAc,SAAlB,EAA6B;MAC3B,KAAK,OAAL,GAAe,IAAI,GAAJ,EAAf;MACA;IACD;;IACD,IAAM,KAAK,GAAG,GAAG,CAAC,KAAlB;IACA,IAAM,OAAO,GAAG,KAAK,CAAC,GAAN,CAAU,UAAC,GAAD,EAAQ;MAChC,OAAO,CAAC,GAAG,CAAC,IAAL,EAAW,QAAQ,CAAC,aAAT,CAAuB,GAAvB,EAA4B,KAA5B,CAAX,CAAP;IACD,CAFe,CAAhB,CANyB,CAUzB;;IACA,KAAK,OAAL,GAAe,IAAI,GAAJ,CAAQ,OAAR,CAAf;EACD;;EAlBH;IAAA;IAAA,OAoBS,gBAAgB,WAAhB,EAAqC,OAArC,EAA+C;MACpD,IAAM,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAf,CADoD,CACjB;;MACnC,IAAM,MAAM,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAf;;MACA,IAAI,CAAC,MAAL,EAAa;QACX,MAAM,IAAI,KAAJ,iCAAmC,WAAnC,EAAN;MACD;;MACD,IAAM,GAAG,GAAG,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,MAAvB,CAAZ;MACA,OAAO,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAAP;IACD;EA5BH;IAAA;IAAA,OA8BS,gBAAgB,WAAhB,EAAqC,EAArC,EAA+C;MACpD,IAAM,MAAM,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,WAAjB,CAAf;;MACA,IAAI,CAAC,MAAL,EAAa;QACX,MAAM,IAAI,KAAJ,iCAAmC,WAAnC,EAAN;MACD;;MACD,OAAO,MAAM,CAAC,MAAP,CAAc,EAAd,CAAP;IACD;EApCH;;EAAA;AAAA","sourceRoot":"","sourcesContent":["import { IdlCoder } from \"./idl\";\n/**\n * Encodes and decodes user defined types.\n */\nexport class TypesCoder {\n    constructor(idl) {\n        if (idl.types === undefined) {\n            this.layouts = new Map();\n            return;\n        }\n        const types = idl.types;\n        const layouts = types.map((acc) => {\n            return [acc.name, IdlCoder.typeDefLayout(acc, types)];\n        });\n        // @ts-ignore\n        this.layouts = new Map(layouts);\n    }\n    encode(accountName, account) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const layout = this.layouts.get(accountName);\n        if (!layout) {\n            throw new Error(`Unknown account type: ${accountName}`);\n        }\n        const len = layout.encode(account, buffer);\n        return buffer.slice(0, len);\n    }\n    decode(accountName, ix) {\n        const layout = this.layouts.get(accountName);\n        if (!layout) {\n            throw new Error(`Unknown account type: ${accountName}`);\n        }\n        return layout.decode(ix);\n    }\n}\n//# sourceMappingURL=types.js.map"]},"metadata":{},"sourceType":"module"}