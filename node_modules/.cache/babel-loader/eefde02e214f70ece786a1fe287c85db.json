{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BaseMessageSignerWalletAdapter, pollUntilReady, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletNotConnectedError, WalletNotFoundError, WalletNotInstalledError, WalletPublicKeyError, WalletSignTransactionError } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nexport class SolflareWalletAdapter extends BaseMessageSignerWalletAdapter {\n  constructor() {\n    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super();\n\n    this._disconnected = () => {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        wallet.off('disconnect', this._disconnected);\n        this._wallet = null;\n        this._publicKey = null;\n        this.emit('error', new WalletDisconnectedError());\n        this.emit('disconnect');\n      }\n    };\n\n    this._connecting = false;\n    this._wallet = null;\n    this._publicKey = null;\n    if (!this.ready) pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);\n  }\n\n  get publicKey() {\n    return this._publicKey;\n  }\n\n  get ready() {\n    var _a;\n\n    return typeof window !== 'undefined' && !!((_a = window.solflare) === null || _a === void 0 ? void 0 : _a.isSolflare);\n  }\n\n  get connecting() {\n    return this._connecting;\n  }\n\n  get connected() {\n    var _a;\n\n    return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.isConnected);\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        if (this.connected || this.connecting) return;\n        this._connecting = true;\n        const wallet = typeof window !== 'undefined' && window.solflare;\n        if (!wallet) throw new WalletNotFoundError();\n        if (!wallet.isSolflare) throw new WalletNotInstalledError();\n\n        if (!wallet.isConnected) {\n          try {\n            yield wallet.connect();\n          } catch (error) {\n            throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n          }\n        } // HACK: Solflare doesn't reject its promise if the popup is closed\n\n\n        if (!wallet.publicKey) throw new WalletConnectionError();\n        let publicKey;\n\n        try {\n          publicKey = new PublicKey(wallet.publicKey.toBytes());\n        } catch (error) {\n          throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n\n        wallet.on('disconnect', this._disconnected);\n        this._wallet = wallet;\n        this._publicKey = publicKey;\n        this.emit('connect');\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      } finally {\n        this._connecting = false;\n      }\n    });\n  }\n\n  disconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const wallet = this._wallet;\n\n      if (wallet) {\n        wallet.off('disconnect', this._disconnected);\n        this._wallet = null;\n        this._publicKey = null;\n\n        try {\n          yield wallet.disconnect();\n        } catch (error) {\n          this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n        }\n      }\n\n      this.emit('disconnect');\n    });\n  }\n\n  signTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return (yield wallet.signTransaction(transaction)) || transaction;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signAllTransactions(transactions) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          return (yield wallet.signAllTransactions(transactions)) || transactions;\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      try {\n        const wallet = this._wallet;\n        if (!wallet) throw new WalletNotConnectedError();\n\n        try {\n          const {\n            signature\n          } = yield wallet.signMessage(message, 'utf8');\n          return Uint8Array.from(signature);\n        } catch (error) {\n          throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n        }\n      } catch (error) {\n        this.emit('error', error);\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../src/adapter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BaseMessageSignerWalletAdapter, pollUntilReady, WalletConnectionError, WalletDisconnectedError, WalletDisconnectionError, WalletNotConnectedError, WalletNotFoundError, WalletNotInstalledError, WalletPublicKeyError, WalletSignTransactionError, } from '@solana/wallet-adapter-base';\nimport { PublicKey } from '@solana/web3.js';\nexport class SolflareWalletAdapter extends BaseMessageSignerWalletAdapter {\n    constructor(config = {}) {\n        super();\n        this._disconnected = () => {\n            const wallet = this._wallet;\n            if (wallet) {\n                wallet.off('disconnect', this._disconnected);\n                this._wallet = null;\n                this._publicKey = null;\n                this.emit('error', new WalletDisconnectedError());\n                this.emit('disconnect');\n            }\n        };\n        this._connecting = false;\n        this._wallet = null;\n        this._publicKey = null;\n        if (!this.ready)\n            pollUntilReady(this, config.pollInterval || 1000, config.pollCount || 3);\n    }\n    get publicKey() {\n        return this._publicKey;\n    }\n    get ready() {\n        var _a;\n        return typeof window !== 'undefined' && !!((_a = window.solflare) === null || _a === void 0 ? void 0 : _a.isSolflare);\n    }\n    get connecting() {\n        return this._connecting;\n    }\n    get connected() {\n        var _a;\n        return !!((_a = this._wallet) === null || _a === void 0 ? void 0 : _a.isConnected);\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                if (this.connected || this.connecting)\n                    return;\n                this._connecting = true;\n                const wallet = typeof window !== 'undefined' && window.solflare;\n                if (!wallet)\n                    throw new WalletNotFoundError();\n                if (!wallet.isSolflare)\n                    throw new WalletNotInstalledError();\n                if (!wallet.isConnected) {\n                    try {\n                        yield wallet.connect();\n                    }\n                    catch (error) {\n                        throw new WalletConnectionError(error === null || error === void 0 ? void 0 : error.message, error);\n                    }\n                }\n                // HACK: Solflare doesn't reject its promise if the popup is closed\n                if (!wallet.publicKey)\n                    throw new WalletConnectionError();\n                let publicKey;\n                try {\n                    publicKey = new PublicKey(wallet.publicKey.toBytes());\n                }\n                catch (error) {\n                    throw new WalletPublicKeyError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n                wallet.on('disconnect', this._disconnected);\n                this._wallet = wallet;\n                this._publicKey = publicKey;\n                this.emit('connect');\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n            finally {\n                this._connecting = false;\n            }\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wallet = this._wallet;\n            if (wallet) {\n                wallet.off('disconnect', this._disconnected);\n                this._wallet = null;\n                this._publicKey = null;\n                try {\n                    yield wallet.disconnect();\n                }\n                catch (error) {\n                    this.emit('error', new WalletDisconnectionError(error === null || error === void 0 ? void 0 : error.message, error));\n                }\n            }\n            this.emit('disconnect');\n        });\n    }\n    signTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const wallet = this._wallet;\n                if (!wallet)\n                    throw new WalletNotConnectedError();\n                try {\n                    return (yield wallet.signTransaction(transaction)) || transaction;\n                }\n                catch (error) {\n                    throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n        });\n    }\n    signAllTransactions(transactions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const wallet = this._wallet;\n                if (!wallet)\n                    throw new WalletNotConnectedError();\n                try {\n                    return (yield wallet.signAllTransactions(transactions)) || transactions;\n                }\n                catch (error) {\n                    throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const wallet = this._wallet;\n                if (!wallet)\n                    throw new WalletNotConnectedError();\n                try {\n                    const { signature } = yield wallet.signMessage(message, 'utf8');\n                    return Uint8Array.from(signature);\n                }\n                catch (error) {\n                    throw new WalletSignTransactionError(error === null || error === void 0 ? void 0 : error.message, error);\n                }\n            }\n            catch (error) {\n                this.emit('error', error);\n                throw error;\n            }\n        });\n    }\n}\n//# sourceMappingURL=adapter.js.map"]},"metadata":{},"sourceType":"module"}