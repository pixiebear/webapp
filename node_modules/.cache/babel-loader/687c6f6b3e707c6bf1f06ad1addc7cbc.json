{"ast":null,"code":"import { lowerCase } from \"lower-case\"; // Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\n\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g]; // Remove all non-word characters.\n\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\n\nexport function noCase(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.splitRegexp,\n      splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a,\n      _b = options.stripRegexp,\n      stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b,\n      _c = options.transform,\n      transform = _c === void 0 ? lowerCase : _c,\n      _d = options.delimiter,\n      delimiter = _d === void 0 ? \" \" : _d;\n  var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n  var start = 0;\n  var end = result.length; // Trim the delimiter from around the output string.\n\n  while (result.charAt(start) === \"\\0\") start++;\n\n  while (result.charAt(end - 1) === \"\\0\") end--; // Transform each token independently.\n\n\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\n\nfunction replace(input, re, value) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce(function (input, re) {\n    return input.replace(re, value);\n  }, input);\n}","map":{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,YAA1B,C,CASA;;AACA,IAAM,oBAAoB,GAAG,CAAC,oBAAD,EAAuB,sBAAvB,CAA7B,C,CAEA;;AACA,IAAM,oBAAoB,GAAG,cAA7B;AAEA;;AAEG;;AACH,OAAM,SAAU,MAAV,CAAiB,KAAjB,EAAgC,OAAhC,EAAqD;EAArB,IAAA,OAAA,KAAA,KAAA,CAAA,EAAA;IAAA,OAAA,GAAA,EAAA;EAAqB;;EAEvD,IAAA,EAAA,GAIE,OAAO,CAJyB,WAAlC;EAAA,IAAA,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,oBAAH,GAAuB,EAAlC;EAAA,IACA,EAAA,GAGE,OAAO,CAHyB,WADlC;EAAA,IACA,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,oBAAH,GAAuB,EADlC;EAAA,IAEA,EAAA,GAEE,OAAO,CAFY,SAFrB;EAAA,IAEA,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,SAAH,GAAY,EAFrB;EAAA,IAGA,EAAA,GACE,OAAO,CADM,SAHf;EAAA,IAGA,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,GAAH,GAAM,EAHf;EAMF,IAAI,MAAM,GAAG,OAAO,CAClB,OAAO,CAAC,KAAD,EAAQ,WAAR,EAAqB,QAArB,CADW,EAElB,WAFkB,EAGlB,IAHkB,CAApB;EAKA,IAAI,KAAK,GAAG,CAAZ;EACA,IAAI,GAAG,GAAG,MAAM,CAAC,MAAjB,CAdyD,CAgBzD;;EACA,OAAO,MAAM,CAAC,MAAP,CAAc,KAAd,MAAyB,IAAhC,EAAsC,KAAK;;EAC3C,OAAO,MAAM,CAAC,MAAP,CAAc,GAAG,GAAG,CAApB,MAA2B,IAAlC,EAAwC,GAAG,GAlBc,CAoBzD;;;EACA,OAAO,MAAM,CAAC,KAAP,CAAa,KAAb,EAAoB,GAApB,EAAyB,KAAzB,CAA+B,IAA/B,EAAqC,GAArC,CAAyC,SAAzC,EAAoD,IAApD,CAAyD,SAAzD,CAAP;AACD;AAED;;AAEG;;AACH,SAAS,OAAT,CAAiB,KAAjB,EAAgC,EAAhC,EAAuD,KAAvD,EAAoE;EAClE,IAAI,EAAE,YAAY,MAAlB,EAA0B,OAAO,KAAK,CAAC,OAAN,CAAc,EAAd,EAAkB,KAAlB,CAAP;EAC1B,OAAO,EAAE,CAAC,MAAH,CAAU,UAAC,KAAD,EAAQ,EAAR,EAAU;IAAK,OAAA,KAAK,CAAC,OAAN,CAAc,EAAd,EAAA,KAAA,CAAA;EAAwB,CAAjD,EAAmD,KAAnD,CAAP;AACD","sourcesContent":["import { lowerCase } from \"lower-case\";\n\nexport interface Options {\n  splitRegexp?: RegExp | RegExp[];\n  stripRegexp?: RegExp | RegExp[];\n  delimiter?: string;\n  transform?: (part: string, index: number, parts: string[]) => string;\n}\n\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nconst DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n\n// Remove all non-word characters.\nconst DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input: string, options: Options = {}) {\n  const {\n    splitRegexp = DEFAULT_SPLIT_REGEXP,\n    stripRegexp = DEFAULT_STRIP_REGEXP,\n    transform = lowerCase,\n    delimiter = \" \",\n  } = options;\n\n  let result = replace(\n    replace(input, splitRegexp, \"$1\\0$2\"),\n    stripRegexp,\n    \"\\0\"\n  );\n  let start = 0;\n  let end = result.length;\n\n  // Trim the delimiter from around the output string.\n  while (result.charAt(start) === \"\\0\") start++;\n  while (result.charAt(end - 1) === \"\\0\") end--;\n\n  // Transform each token independently.\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input: string, re: RegExp | RegExp[], value: string) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce((input, re) => input.replace(re, value), input);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}