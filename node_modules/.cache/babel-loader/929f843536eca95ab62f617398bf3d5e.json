{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTokenRefreshIntervalMilliseconds = exports.isTokenRefreshRequired = exports.hasExpired = void 0;\n/* eslint-disable import/prefer-default-export */\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst types_1 = require(\"../types\");\n\nconst isApproachingExpiry = (currentExpiry, tokenExpirationMarginSeconds) => {\n  const now = Math.floor(Date.now() / 1000);\n  logger_1.default.debug('checking if the token is approaching expiry', {\n    tokenExpirationMarginSeconds,\n    currentExpiry,\n    now,\n    approachingExpiryResult: currentExpiry - now < tokenExpirationMarginSeconds\n  });\n  return currentExpiry - now < tokenExpirationMarginSeconds;\n};\n\nconst hasExpired = expiryTime => {\n  if (!expiryTime) return false;\n  const now = Math.floor(Date.now() / 1000);\n  return now >= expiryTime;\n};\n\nexports.hasExpired = hasExpired;\n\nconst isTokenRefreshRequired = _ref => {\n  let {\n    gatewayToken,\n    tokenExpirationMarginSeconds\n  } = _ref;\n  const {\n    expiryTime,\n    state\n  } = gatewayToken;\n  const isActive = state === types_1.State.ACTIVE;\n  if (!expiryTime || !isActive) return false;\n  return (0, exports.hasExpired)(expiryTime) || isApproachingExpiry(expiryTime, tokenExpirationMarginSeconds);\n};\n\nexports.isTokenRefreshRequired = isTokenRefreshRequired;\n\nconst getTokenRefreshIntervalMilliseconds = (expiryTime, tokenExpirationMarginSeconds) => {\n  const now = Math.floor(Date.now() / 1000);\n  const interval = expiryTime - now - tokenExpirationMarginSeconds;\n  return interval > 0 ? interval * 1000 : 0;\n};\n\nexports.getTokenRefreshIntervalMilliseconds = getTokenRefreshIntervalMilliseconds;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","getTokenRefreshIntervalMilliseconds","isTokenRefreshRequired","hasExpired","logger_1","require","types_1","isApproachingExpiry","currentExpiry","tokenExpirationMarginSeconds","now","Math","floor","Date","default","debug","approachingExpiryResult","expiryTime","gatewayToken","state","isActive","State","ACTIVE","interval"],"sources":["/Users/nikola/Sites/candy-machine/candy-machine-ui/node_modules/@civic/solana-gateway-react/dist/esm/utils/tokenUtils.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTokenRefreshIntervalMilliseconds = exports.isTokenRefreshRequired = exports.hasExpired = void 0;\n/* eslint-disable import/prefer-default-export */\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst types_1 = require(\"../types\");\nconst isApproachingExpiry = (currentExpiry, tokenExpirationMarginSeconds) => {\n    const now = Math.floor(Date.now() / 1000);\n    logger_1.default.debug('checking if the token is approaching expiry', {\n        tokenExpirationMarginSeconds,\n        currentExpiry,\n        now,\n        approachingExpiryResult: currentExpiry - now < tokenExpirationMarginSeconds,\n    });\n    return currentExpiry - now < tokenExpirationMarginSeconds;\n};\nconst hasExpired = (expiryTime) => {\n    if (!expiryTime)\n        return false;\n    const now = Math.floor(Date.now() / 1000);\n    return now >= expiryTime;\n};\nexports.hasExpired = hasExpired;\nconst isTokenRefreshRequired = ({ gatewayToken, tokenExpirationMarginSeconds, }) => {\n    const { expiryTime, state } = gatewayToken;\n    const isActive = state === types_1.State.ACTIVE;\n    if (!expiryTime || !isActive)\n        return false;\n    return (0, exports.hasExpired)(expiryTime) || isApproachingExpiry(expiryTime, tokenExpirationMarginSeconds);\n};\nexports.isTokenRefreshRequired = isTokenRefreshRequired;\nconst getTokenRefreshIntervalMilliseconds = (expiryTime, tokenExpirationMarginSeconds) => {\n    const now = Math.floor(Date.now() / 1000);\n    const interval = expiryTime - now - tokenExpirationMarginSeconds;\n    return interval > 0 ? interval * 1000 : 0;\n};\nexports.getTokenRefreshIntervalMilliseconds = getTokenRefreshIntervalMilliseconds;\n"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;IAAE,WAAWA;EAAb,CAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mCAAR,GAA8CF,OAAO,CAACG,sBAAR,GAAiCH,OAAO,CAACI,UAAR,GAAqB,KAAK,CAAzG;AACA;;AACA,MAAMC,QAAQ,GAAGV,eAAe,CAACW,OAAO,CAAC,WAAD,CAAR,CAAhC;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,mBAAmB,GAAG,CAACC,aAAD,EAAgBC,4BAAhB,KAAiD;EACzE,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,GAAL,KAAa,IAAxB,CAAZ;EACAN,QAAQ,CAACU,OAAT,CAAiBC,KAAjB,CAAuB,6CAAvB,EAAsE;IAClEN,4BADkE;IAElED,aAFkE;IAGlEE,GAHkE;IAIlEM,uBAAuB,EAAER,aAAa,GAAGE,GAAhB,GAAsBD;EAJmB,CAAtE;EAMA,OAAOD,aAAa,GAAGE,GAAhB,GAAsBD,4BAA7B;AACH,CATD;;AAUA,MAAMN,UAAU,GAAIc,UAAD,IAAgB;EAC/B,IAAI,CAACA,UAAL,EACI,OAAO,KAAP;EACJ,MAAMP,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,GAAL,KAAa,IAAxB,CAAZ;EACA,OAAOA,GAAG,IAAIO,UAAd;AACH,CALD;;AAMAlB,OAAO,CAACI,UAAR,GAAqBA,UAArB;;AACA,MAAMD,sBAAsB,GAAG,QAAqD;EAAA,IAApD;IAAEgB,YAAF;IAAgBT;EAAhB,CAAoD;EAChF,MAAM;IAAEQ,UAAF;IAAcE;EAAd,IAAwBD,YAA9B;EACA,MAAME,QAAQ,GAAGD,KAAK,KAAKb,OAAO,CAACe,KAAR,CAAcC,MAAzC;EACA,IAAI,CAACL,UAAD,IAAe,CAACG,QAApB,EACI,OAAO,KAAP;EACJ,OAAO,CAAC,GAAGrB,OAAO,CAACI,UAAZ,EAAwBc,UAAxB,KAAuCV,mBAAmB,CAACU,UAAD,EAAaR,4BAAb,CAAjE;AACH,CAND;;AAOAV,OAAO,CAACG,sBAAR,GAAiCA,sBAAjC;;AACA,MAAMD,mCAAmC,GAAG,CAACgB,UAAD,EAAaR,4BAAb,KAA8C;EACtF,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,GAAL,KAAa,IAAxB,CAAZ;EACA,MAAMa,QAAQ,GAAGN,UAAU,GAAGP,GAAb,GAAmBD,4BAApC;EACA,OAAOc,QAAQ,GAAG,CAAX,GAAeA,QAAQ,GAAG,IAA1B,GAAiC,CAAxC;AACH,CAJD;;AAKAxB,OAAO,CAACE,mCAAR,GAA8CA,mCAA9C"},"metadata":{},"sourceType":"script"}